<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TRR.O2I.BusinessLogic.Managers</name>
    </assembly>
    <members>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BasketManagement.Exceptions.OrderDoesNotBelongToSupplierException">
            <summary>
            Exception to throw when order does not belong to supplier.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.ConfigurableParametersHierarchyResolver">
            <summary>
            Resolves the allowed parameters according to their hierarchy
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.ConfigurableParametersHierarchyResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.ConfigurableParametersHierarchyResolver"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.ConfigurableParametersHierarchyResolver.#ctor(System.Collections.Generic.IDictionary{TRR.O2I.BusinessLogic.WorkflowConfiguration.ConfigurableParameters,TRR.O2I.BusinessLogic.WorkflowConfiguration.ConfigurableParameters},System.Collections.Generic.IDictionary{TRR.O2I.BusinessLogic.WorkflowConfiguration.ConfigurableParameters,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.ConfigurableParametersHierarchyResolver"/> class.
            </summary>
            <param name="hierarchy">The hierarchy.</param>
            <param name="priorities">The priorities.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.ConfigurableParametersHierarchyResolver.Resolve(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.WorkflowConfiguration.ConfigurableParameters})">
            <summary>
            Resolves the specified parameters according to their hierarchy.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.BuildCreditInvoiceFromOrderForTrip22Exception">
            <summary>
             Thrown if a user tries to cerate a credit invoice from order for TRIP 22.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.NotAllNewRelatedGRsAreIncludedToInvoiceException">
            <summary>
            Is thrown when there're new GRs availalbe for invoicing.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.ISubsequentInvoiceTaxApplier">
            <summary>
            Encapsulates logic on how to apply taxes on SINV.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.ISubsequentInvoiceTaxApplier.ApplyTaxes(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Tax},TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings)">
            <summary>
            Applies taxes on SINV
            </summary>
            <param name="invoice">The invoice</param>
            <param name="taxes">Taxes list</param>
            <param name="order">Order</param>
            <param name="buyerSettings">Buyer Settings</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.PreSendActions.IPreSendInvoiceAction">
            <summary>
            Encapsulates logic on action which should be executed before invoice sending
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.PreSendActions.IPreSendInvoiceAction.ShouldBeExecuted(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey,TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings)">
            <summary>
            Gets a value indicating whether the action should be executed.
            </summary>
            <param name="invoice">The invoice</param>
            <param name="orderTypeKey">Relateed order type key or null.</param>
            <param name="buyerSettings">Buyer settings</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.PreSendActions.IPreSendInvoiceAction.Execute(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Executes action.
            </summary>
            <param name="invoice">The invoice</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.SubsequentInvoiceTaxApplier">
            <summary>
            Encapsulates logic on how to apply taxes on SINV.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.SubsequentInvoiceTaxApplier.#ctor(TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.PreSendActions.IPreSendInvoiceAction)">
            <summary>
            Public constructor
            </summary>
            <param name="applyTaxAction"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.SubsequentInvoiceTaxApplier.ApplyTaxes(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Tax},TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings)">
            <summary>
            Applies taxes on SINV
            </summary>
            <param name="invoice">The invoice</param>
            <param name="taxes">Taxes list</param>
            <param name="order">Order</param>
            <param name="buyerSettings">Buyer Settings</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.Updating.Exceptions.DocumentIsNotRejectedException">
            <summary>
            Is thrown when document is not in a rejected state.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.Updating.Exceptions.NoLinesAvailableForInvoicingException">
            <summary>
            Is thrown when there're no lines available for invoicing.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.Updating.Exceptions.NoLinesWithSublinesException">
            <summary>
            Is thrown when invoice has no lines with sub-lines
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.Updating.IUpdateInvoicingDocumentStrategyFactory`1">
            <summary>
            Update Invoicing Document Strategy Factory
            </summary>
            <typeparam name="TDoc"></typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.Updating.IUpdateInvoicingDocumentStrategyFactory`1.CreateStrategy(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings)">
            <summary>
            Creates an appropriate strategy
            </summary>
            <param name="serviceManager"></param>
            <param name="relatedOrder"></param>
            <param name="buyerSettings"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.Updating.IUpdateInvoicingDocumentStrategy`1">
            <summary>
            Update Invoicing Document strategy
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.Updating.IUpdateInvoicingDocumentStrategy`1.UpdateDocument(`0,DataAccess.Services.IServiceManager)">
            <summary>
            Updates Document and returns tis update.
            </summary>
            <param name="document">Source document.</param>
            <param name="serviceManager">Service Manager.</param>
            <returns>Document update.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IChangeOrderShreddingLineTypeResolver">
            <summary>
            IChangeOrderShreddingLineTypeResolver
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IChangeOrderShreddingLineTypeResolver.Resolve(TRR.O2I.DataAccess.Entities.PurchaseOrder,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Resolves types of CO lines
            </summary>
            <param name="co"></param>
            <param name="po"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IOrderLineTypeDefinitionStrategy">
            <summary>
            Order line type definition
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IOrderLineTypeDefinitionStrategy.Resolve(TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey,System.Int32,System.Nullable{TRR.O2I.BusinessLogic.BusinessEntity.Enums.OrderLineType})">
            <summary>
            Resolves order line type of a parent line
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IOrderLineTypeDefinitionStrategyFactory">
            <summary>
            Order Line Type Definition Strategy Factory
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IOrderLineTypeDefinitionStrategyFactory.CreateInstance(TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IOrderLineTypeResolver)">
            <summary>
            Creates an instance of strategy
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IOrderLineTypeResolver">
            <summary>
            Order line type resolver
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IOrderLineTypeResolver.Resolve(TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey,System.Int32)">
            <summary>
            Resolves order line type
            </summary>
            <param name="actualTypeKey"></param>
            <param name="sublinesCount"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.OrderLineTypeDefinitionStrategyTrip22">
            <summary>
            Order line type definition strategy for trip22
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.OrderLineTypeDefinitionStrategyTrip22.#ctor(TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IOrderLineTypeResolver)">
            <summary>
            public constructor
            </summary>
            <param name="lineTypeResolver"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.OrderLineTypeDefinitionStrategyTrip22.Resolve(TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey,System.Int32,System.Nullable{TRR.O2I.BusinessLogic.BusinessEntity.Enums.OrderLineType})">
            <summary>
            Resolves order line type of a parent line
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.OrderShreddingLineTypeResolverTrip22">
            <summary>
            Order shredding line type resolver trip22
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.OrderShreddingLineTypeResolverTrip22.Resolve(TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey,System.Int32)">
            <summary>
            Resolves order line type
            </summary>
            <param name="actualTypeKey"></param>
            <param name="sublinesCount"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.ShredderedOrderLineTypeResolverTrip22">
            <summary>
            Shreddered order line type resolver for trip22
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.ShredderedOrderLineTypeResolverTrip22.Resolve(TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey,System.Int32)">
            <summary>
            Resolves order line type
            </summary>
            <param name="actualTypeKey"></param>
            <param name="sublinesCount"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IGeneralTaxInformationContainer">
            <summary>
            IGeneralTaxInformationContainer
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IGeneralTaxInformationContainer.TaxCategory">
            <summary>
            Gets or sets TaxCategory
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IGeneralTaxInformationContainer.TaxPercent">
            <summary>
            Gets or sets TaxPercent
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IGeneralTaxInformationContainer.TaxType">
            <summary>
            Gets or sets TaxType
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IGeneralTaxInformationContainer.TaxPaymentMethod">
            <summary>
            Gets or sets TaxPaymentMethod
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IGeneralTaxInformationContainer.ReasonTaxExempt">
            <summary>
            Gets or sets ReasonTaxExempt
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version3.ParsedUploadedNonPOInvoiceCanadaVersion3">
            <summary>
            Data-transfer entity for parsed uploaded non-po invoice for Canada Version1
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceCanadaVersion1">
            <summary>
            Data-transfer entity for parsed uploaded non-po invoice for Canada Version1
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.ParsedUploadedNonPOInvoiceBase">
            <summary>
            ParsedUploadedNonPOInvoiceBase
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.UploadedNonPOInvoiceParsedEntity">
            <summary>
            UploadedNonPOInvoiceParsedEntity
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.ParsedUploadedNonPOInvoiceBase.#ctor">
            <summary>
            protected constructor
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.ParsedUploadedNonPOInvoiceBase.AddLine(System.Object)">
            <summary>
            Adds a line
            </summary>
            <param name="line"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.ParsedUploadedNonPOInvoiceBase.Lines">
            <summary>
            List of lines
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceCanada">
            <summary>
            IParsedUploadedNonPOInvoiceCanada
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedNonPOInvoice">
            <summary>
            IParsedNonPOInvoice
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedNonPOInvoice.InvoiceNumber">
            <summary>
            Gets or sets InvoiceNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedNonPOInvoice.Type">
            <summary>
            Gets or sets Type
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedNonPOInvoice.Currency">
            <summary>
            Ges or sets Currency
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedNonPOInvoice.PONumber">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedNonPOInvoice.BuyerContactEmail">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedNonPOInvoice.HeaderFreight">
            <summary>
            Gets or sets HeaderFreight
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedNonPOInvoice.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedNonPOInvoice.OriginalInvoiceNumber">
            <summary>
            Gets or sets OriginalInvoiceNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedNonPOInvoice.Lines">
            <summary>
            Gets lines
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceCanadaVersion1.InvoiceNumber">
            <summary>
            Gets or sets InvoiceNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceCanadaVersion1.Type">
            <summary>
            Gets or sets Type
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceCanadaVersion1.Currency">
            <summary>
            Ges or sets Currency
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceCanadaVersion1.PONumber">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceCanadaVersion1.BuyerContactEmail">
            <summary>
            Gets or sets BuyerContactEmail
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceCanadaVersion1.HeaderFreight">
            <summary>
            Gets or sets HeaderFreight`
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceCanadaVersion1.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceCanadaVersion1.OriginalInvoiceNumber">
            <summary>
            Gets or sets OriginalInvoiceNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version3.ParsedUploadedNonPOInvoiceCanadaVersion3.OriginalInvoiceNumber">
            <summary>
            Gets or sets OriginalInvoiceNumber
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version3.ParsedUploadedNonPOInvoiceEuropeVersion3">
            <summary>
            Data-transfer entity for parsed uploaded non-po invoice for European countries.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceEuropeVersion2">
            <summary>
            Data-transfer entity for parsed uploaded non-po invoice for European countries.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1">
            <summary>
            Data-transfer entity for parsed uploaded non-po invoice for European countries.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope">
            <summary>
            IParsedUploadedNonPOInvoiceEurope
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope.AddLine(System.Object)">
            <summary>
            Adds a line to the collection
            </summary>
            <param name="line"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope.SupplierVATID">
            <summary>
            Gets or sets Supplier VAT ID
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope.SupplierTaxAgencyCoded">
            <summary>
            Gets or sets Supplier Tax Agency Coded
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope.BuyerVATID">
            <summary>
            Gets or sets Buyer VAT ID
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope.BuyerTaxAgencyCoded">
            <summary>
            Gets or sets Buyer Tax Agency Coded
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope.SIRENNumber">
            <summary>
            Gets or sets SIREN Number
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope.KEYID">
            <summary>
            Gets or sets KEY ID
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope.ExchangeRate">
            <summary>
            Gets or sets Exchange Rate
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.InvoiceNumber">
            <summary>
            Gets or sets InvoiceNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.Type">
            <summary>
            Gets or sets Type
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.Currency">
            <summary>
            Ges or sets Currency
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.SupplierVATID">
            <summary>
            Gets or sets Supplier VAT ID
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.SupplierTaxAgencyCoded">
            <summary>
            Gets or sets Supplier Tax Agency Coded
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.BuyerVATID">
            <summary>
            Gets or sets Buyer VAT ID
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.BuyerTaxAgencyCoded">
            <summary>
            Gets or sets Buyer Tax Agency Coded
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.BuyerContactEmail">
            <summary>
            Gets or sets Buyer contact e-mail
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.HeaderFreight">
            <summary>
            Gets or sets HeaderFreight
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.PONumber">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.SIRENNumber">
            <summary>
            Gets or sets SIREN Number
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.KEYID">
            <summary>
            Gets or sets KEY ID
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.OriginalInvoiceNumber">
            <summary>
            Gets or sets OriginalInvoiceNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceEuropeVersion1.ExchangeRate">
            <summary>
            Gets or sets Exchange Rate
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceEuropeVersion2.ExchangeRate">
            <summary>
            Gets or sets ExchangeRate
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version3.ParsedUploadedNonPOInvoiceEuropeVersion3.OriginalInvoiceNumber">
            <summary>
            Gets or sets OriginalInvoiceNumber
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version3.ParsedUploadedNonPOInvoiceUSAVersion3">
            <summary>
            ParsedUploadedNonPOInvoiceUSAVersion3
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceUSAVersion2">
            <summary>
            ParsedUploadedNonPOInvoiceUSAVersion2
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedNonPOInvoiceUSA">
            <summary>
            IParsedNonPOInvoiceUSA
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceUSAVersion2.InvoiceNumber">
            <summary>
            Gets or sets InvoiceNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceUSAVersion2.Type">
            <summary>
            Gets or sets Type
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceUSAVersion2.Currency">
            <summary>
            Ges or sets Currency
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceUSAVersion2.PONumber">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceUSAVersion2.BuyerContactEmail">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceUSAVersion2.HeaderFreight">
            <summary>
            Gets or sets HeaderFreight
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceUSAVersion2.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceUSAVersion2.OriginalInvoiceNumber">
            <summary>
            Gets or sets OriginalInvoiceNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version3.ParsedUploadedNonPOInvoiceUSAVersion3.OriginalInvoiceNumber">
            <summary>
            Gets or sets OriginalInvoiceNumber
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLine">
            <summary>
            IParsedUploadedNonPOInvoiceLineUSA
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLine.LineNumber">
            <summary>
            Gets or sets LineNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLine.SupplierPartNumber">
            <summary>
            Gets or sets SupplierPartNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLine.ItemDescription">
            <summary>
            Gets or sets ItemDescription
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLine.UnitPrice">
            <summary>
            Gets or sets UnitPrice
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLine.Quantity">
            <summary>
            Gets or sets Quantity
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLine.UOM">
            <summary>
            Gets or sets UOM
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLine.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineCanada">
            <summary>
            IParsedUploadedNonPOInvoiceLineCanada
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineCanada.TaxProvince">
            <summary>
            Gets or sets TaxProvince
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineCanada.TaxType">
            <summary>
            Gets or sets TaxType
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineCanada.TaxPercentPSTHST">
            <summary>
            Gets or sets TaxPercentPSTHST
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineCanada.TaxPercentGST">
            <summary>
            Gets or sets TaxPercentGST
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineCanada.TaxAmountPSTHST">
            <summary>
            Gets or sets TaxAmountPSTHST
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineCanada.TaxAmountGST">
            <summary>
            Gets or sets TaxAmountGST
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineEurope">
            <summary>
            IParsedUploadedNonPOInvoiceLineEurope
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineEurope.DeliveryDate">
            <summary>
            Gets or sets Delivery Date
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineUSA">
            <summary>
            IParsedUploadedNonPOInvoiceLineUSA
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineUSA.TaxAmount">
            <summary>
            Gets or sets TaxAmount
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1">
            <summary>
            ParsedUploadedNonPOInvoiceLineCanadaVersion1
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.LineNumber">
            <summary>
            Gets or sets LineNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.SupplierPartNumber">
            <summary>
            Gets or sets SupplierPartNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.ItemDescription">
            <summary>
            Gets or sets ItemDescription
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.UnitPrice">
            <summary>
            Gets or sets UnitPrice
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.Quantity">
            <summary>
            Gets or sets Quantity
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.UOM">
            <summary>
            Gets or sets UOM
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.TaxProvince">
            <summary>
            Gets or sets TaxProvince
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.TaxType">
            <summary>
            Gets or sets TaxType
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.TaxPercentPSTHST">
            <summary>
            Gets or sets TaxPercentPSTHST
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.TaxPercentGST">
            <summary>
            Gets or sets TaxPercentGST
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.TaxAmountPSTHST">
            <summary>
            Gets or sets TaxAmountPSTHST
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.TaxAmountGST">
            <summary>
            Gets or sets TaxAmountGST
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineCanadaVersion1.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.ParsedUploadedNonPOInvoiceLineDesriptor.EntryType">
            <summary>
            Gets or sets Entry Type (Header or Line)
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1">
            <summary>
            ParsedUploadedNonPOInvoiceLineUSAVersion1
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.LineNumber">
            <summary>
            Gets or sets LineNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.SupplierPartNumber">
            <summary>
            Gets or sets SupplierPartNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.ItemDescription">
            <summary>
            Gets or sets ItemDescription
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.UnitPrice">
            <summary>
            Gets or sets UnitPrice
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.Quantity">
            <summary>
            Gets or sets Quantity
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.UOM">
            <summary>
            Gets or sets UOM
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.TaxCategory">
            <summary>
            Gets or sets TaxCategory
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.TaxPercent">
            <summary>
            Gets or sets TaxPercent
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.TaxAmount">
            <summary>
            Gets or sets TaxAmount
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.TaxType">
            <summary>
            Gets or sets TaxType
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.TaxPaymentMethod">
            <summary>
            Gets or sets TaxPaymentMethod
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.ReasonTaxExempt">
            <summary>
            Gets or sets ReasonTaxExempt
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineUSAVersion1.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceLineUSAVersion2">
            <summary>
            ParsedUploadedNonPOInvoiceLineUSAVersion2
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceLineUSAVersion2.TaxPaymentMethod">
            <summary>
            Gets or sets TaxPaymentMethod
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceLineUSAVersion2.ReasonTaxExempt">
            <summary>
            Gets or sets ReasonTaxExempt
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version2.ParsedUploadedNonPOInvoiceLineUSAVersion2.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceUSAVersion1">
            <summary>
            ParsedUploadedNonPOInvoiceUSAVersion1
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceUSAVersion1.InvoiceNumber">
            <summary>
            Gets or sets InvoiceNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceUSAVersion1.Type">
            <summary>
            Gets or sets Type
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceUSAVersion1.Currency">
            <summary>
            Ges or sets Currency
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceUSAVersion1.PONumber">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceUSAVersion1.BuyerContactEmail">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceUSAVersion1.HeaderFreight">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceUSAVersion1.Notes">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceUSAVersion1.OriginalInvoiceNumber">
            <summary>
            Gets or sets OriginalInvoiceNumber
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.INonPOInvoicesExcelTemplateParsingResultsCombiner">
            <summary>
            INonPOInvoicesExcelTemplateParsingResultsCombiner
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.INonPOInvoicesExcelTemplateParsingResultsCombiner.Combine(System.Collections.IEnumerable)">
            <summary>
            Combines parsing results
            </summary>
            <param name="parsingResults"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BuyerInformationBlockAssembler">
            <summary>
            Encapsulates logic on assembling of BuyerInformationBlock
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BuyerInformationBlockAssembler.CreateBuyerInformationBlock(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings)">
            <summary>
            Creates block
            </summary>
            <param name="buyerSettings"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateFormatter">
            <summary>
            Converts DateTime value into its string representation.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateTimeFormatter">
            <summary>
            Convert DateTime value into it's string representation.
            DateTime.MinValue converts into string.Empty.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateTimeFormatter.DateTimeHelper">
            <summary>
            Helper
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateTimeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateTimeFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateTimeFormatter.Init(TRR.O2I.Common.Core.DateTimeUtil.IDateTimeHelper)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="helper">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateTimeFormatter.#ctor(TRR.O2I.Common.Core.DateTimeUtil.IDateTimeHelper)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="helper"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateTimeFormatter.Parse(System.Object)">
            <summary>
            Provides from-view-to-business-logic directional conversion.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="formattedData">UI (view) value representation.</param>
            <returns>Value ready to be used internally by system (business logic).</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateTimeFormatter.Format(System.Object)">
            <summary>
            Provides from-business-logic-to-view directional conversion.
            </summary>
            <param name="data">System (business logic) value representation.</param>
            <returns>Value ready to be shown on UI (view).</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateFormatter.Format(System.Object)">
            <summary>
            Provides from-business-logic-to-view directional conversion.
            </summary>
            <param name="data">System (business logic) value representation.</param>
            <returns>Value ready to be shown on UI (view).</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateFormatter.Parse(System.Object)">
            <summary>
            Provides from-view-to-business-logic directional conversion.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="formattedData">UI (view) value representation.</param>
            <returns>Value ready to be used internally by system (business logic).</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceLineTaxTotalsItem">
            <summary>
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceLineTaxTotalsItem.Percent">
            <summary>
             Gets or sets percent.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceLineTaxTotalsItem.Amount">
            <summary>
             Get or sets amount.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceLineTaxTotalsFormatter">
            <summary>
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyMultipleFormatter">
            <summary>
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyFormatter">
            <summary>
            Formatter for currency values.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyFormatter.Init(TRR.O2I.Common.Core.ICurrencyHelper)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="helper">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyFormatter.#ctor(TRR.O2I.Common.Core.ICurrencyHelper)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="helper"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyFormatter.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyFormatter.Format(System.Decimal)">
            <summary>
            Formats the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyFormatter.Format(System.Nullable{System.Decimal})">
            <summary>
            Formats the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyFormatter.Parse(System.Object)">
            <summary>
            Restore the string representation of the value using the current culture settings
            </summary>
            <param name="formattedData">The presentation value.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyMultipleFormatter.Format(System.Object)">
            <summary> 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceLineTaxTotalsFormatter.Format(System.Object)">
            <summary> 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.PurchaseOrderRules.IUpdatePOWhileCOMergingRulesRunnerFactory">
            <summary>
            Update PO while CO Merging Rules Runner Factory
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.PurchaseOrderRules.IUpdatePOWhileCOMergingRulesRunnerFactory.GetRunner(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Gets the runner
            </summary>
            <param name="co"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.PurchaseOrderRules.UpdatePOWhileCOMergingRulesRunnerEmptyFactory.GetRunner(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Gets the runner
            </summary>
            <param name="co"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntityUpdateRule`1">
            <summary>
             EntityUpdateRule
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.IEntityUpdateRule`1">
            <summary>
            IEntityStatusUpdateStrategy
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.IEntityUpdateRule`1.Apply(`0)">
            <summary>
            Applies the rule on the entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntityUpdateRule`1.IsUpdateRequired(`0)">
            <summary>
            Gets a value indicating whether it's required to update entity status.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntityUpdateRule`1.UpdateEntity(`0)">
            <summary>
            Updates entity status.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntityUpdateRule`1.Apply(`0)">
            <summary>
            Applies the rule on the entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidationRuleBase`1">
            <summary>
             Entity validation rule
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.IEntityValidationRule`1">
            <summary>
            Encapsulates a validation rule for entities of type specified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.IEntityValidationRule">
            <summary>
            Encapsulates a validation rule for entities.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.IEntityValidationRule.Validate(System.Object,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.IEntityValidationRule`1.Validate(`0,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidationRuleBase`1.Validate(`0,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidationRuleBase`1.Validate(System.Object,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceForOrderNotAvailableForInvoicingInTrip22Exception">
            <summary>
            Exception is thrown if user attempts to create a invoice from order not available for invoicing in TRIP22
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Merging.IMergingContext">
            <summary>
            Entity merging context interface. <br />
            Use it to peform required post-merging actions <br />
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Merging.IMergingContext.Close(DataAccess.Services.IServiceManager)">
            <summary>
            Closes the specified manager.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Merging.GenericMergingContext">
            <summary>
            GenericMergingContext
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Merging.GenericMergingContext.RegisterContactToRemove(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Contact)">
            <summary>
            RegisterContactToRemove
            </summary>
            <param name="contact"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Merging.GenericMergingContext.Close(DataAccess.Services.IServiceManager)">
            <summary>
            Closes the specified manager.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Sending.InvoiceSender">
            <summary>
            Encapsulates logic on Invoice Sending
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Sending.InvoiceSender.#ctor">
            <summary>
            default public constructor
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Sending.InvoiceSender.#ctor(System.Action{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice})">
            <summary>
            public constructor
            </summary>
            <param name="storeInvoiceToOrdersInRelatedDocumentsAction"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Sending.InvoiceSender.SendInvoice(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,DataAccess.Services.IServiceManager)">
            <summary>
            Send the invoice
            </summary>
            <param name="invoice"></param>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Sending.InvoiceSender.GenerateXml(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Generates the invoice XML.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ServiceMasterDataItemsMultipleUploadManager">
            <summary>
            SMD Items Multiple Upload Manager
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ServiceMasterDataItemsMultipleUploadManager.RegisterConflictedItems(System.Collections.Generic.IList{TRR.O2I.DataAccess.Core.Entities.ServiceMasterDataItem})">
            <summary>
            Registers conflicted items in cache.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ServiceMasterDataItemsMultipleUploadManager.RegisterItems(System.Collections.Generic.IList{TRR.O2I.DataAccess.Core.Entities.ServiceMasterDataItem})">
            <summary>
            Registers items in cache.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ServiceMasterDataItemsMultipleUploadManager.ReleaseConflictedItems">
            <summary>
            Removes conflicted items from cache.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ServiceMasterDataItemsMultipleUploadManager.ReleaseItems">
            <summary>
            Removes items from cache.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ServiceMasterDataItemsMultipleUploadManager.GetRegisteredConflictedItems">
            <summary>
            Gets conflicted items registered in cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ServiceMasterDataItemsMultipleUploadManager.GetRegisteredItems">
            <summary>
            Gets items registered in cache.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateLinesTypeValidationRule">
            <summary>
            Updates order lines type
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.IOrderValidationRule">
            <summary>
            Order validation rule.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.IOrderValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Validates the account code.
            </summary>
            <param name="documentGuid">The document guid.</param>
            <param name="order">The order to validate.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateLinesTypeValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Validates the account code.
            </summary>
            <param name="documentGuid">The document guid.</param>
            <param name="order">The order to validate.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.UpdateInvoiceDecisionMaker">
            <summary>
            Encapsulates decision logic on invoice update functionality.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.UpdateInvoiceDecisionMaker.CanUpdateInvoice(TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceStatus,System.Boolean,TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceType)">
            <summary>
            Get a value idicating whether the invoice of a specific type can be updated.
            </summary>
            <param name="invoiceStatus"></param>
            <param name="isConsistent"></param>
            <param name="invoiceType"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.AsnNotCreatedException">
            <summary>
            
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.AsnNotCreatedFromLatestOrderDocumentException">
            <summary>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.AsnNotCreatedFromLatestOrderDocumentException.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.AsnNotCreatedFromLatestOrderDocumentException.Order">
            <summary>
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.AsnNotSentException">
            <summary>
            Exception to break document exception if asn not sent.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.AsnNotSentException.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.AsnNotSentException.Order">
            <summary>
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.BuildInvoiceFromOrderWithTypeEntrySheetEnabledForException">
            <summary>
            Thrown if a user tries to cerate an invoice from order with a type which entry sheet is enabled for.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.NotAllGRsLinkedToInvoiceAreNewException">
            <summary>
            Is thrown when not all GRs related to invoice are new.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.Basket.IRelatedGRsBasketPlacementStrategy">
            <summary>
            Strategy defining workflow of placing related GRs to basket.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.Basket.IRelatedGRsBasketPlacementStrategy.PlaceRelatedGRsToBasket">
            <summary>
            Gets a value indicating whether related GRs should be put to basket.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.Basket.IRelatedGRsBasketPlacementStrategy.EnableGRCategoryFiltering">
            <summary>
            Gets a value indicating whether related GRs should be filtered by category of root GR.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.Basket.PutAllRelatedGRsToBasketStrategy.PlaceRelatedGRsToBasket">
            <summary>
            Gets a value indicating whether related GRs should be put to basket.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.Basket.PutAllRelatedGRsToBasketStrategy.EnableGRCategoryFiltering">
            <summary>
            Gets a value indicating whether related GRs should be filtered by category of root GR.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.InvoiceCreationFromGR.ICheckPendingInvoiceExistanceWhileInvoiceCreationFromGRStrategy">
            <summary>
            CheckPendingInvoiceExistanceWhileInvoiceCreationFromGRStrategy
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.InvoiceCreationFromGR.ICheckPendingInvoiceExistanceWhileInvoiceCreationFromGRStrategy.CheckPendingInvoiceExistance(DataAccess.Services.IServiceManager,System.Collections.Generic.IEnumerable{System.Int32},TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Checks whether a pending invoice exists for GRs
            </summary>
            <param name="serviceManager"></param>
            <param name="grIds"></param>
            <param name="orderTypeKey"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDefinitions.DefaultOrderTypeDefinitionStrategy">
            <summary>
            Default Order Type Definition strategy
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDefinitions.IOrderTypeDefinitionStrategy">
            <summary>
            Base interface for defining order type
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDefinitions.IOrderTypeDefinitionStrategy.Resolve(TRR.O2I.DataAccess.Entities.IOrderComposite,System.Collections.Generic.IList{TRR.O2I.DataAccess.Entities.OrderLine})">
            <summary>
            Resolves the specified order type.
            </summary>
            <param name="order">The order.</param>
            <param name="lines">All order lines and sublines.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDefinitions.DefaultOrderTypeDefinitionStrategy.Resolve(TRR.O2I.DataAccess.Entities.IOrderComposite,System.Collections.Generic.IList{TRR.O2I.DataAccess.Entities.OrderLine})">
            <summary>
            Resolves the specified order type.
            </summary>
            <param name="order">The order.</param>
            <param name="lines">All order lines and sublines.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDefinitions.Trip2OrderTypeDefinitionStrategy">
            <summary>
            Default Order Type Definition Strategy<br/>
            1. Order is Material if OrderTypeCode == "PurchaseOrder"|"CatalogOrder" OR OrderTypeCode == "Other"; OrderTypeCodeOther == "PurchaseOrder"|"CatalogOrder"<br/>
            2. Order is Planned Service if OrderTypeCode == "SupplyOrServiceOrder"; OrderTypeCodeOther == "Planned"<br/>
            3. Order is UnPlanned Service if OrderTypeCode == "SupplyOrServiceOrder"; OrderTypeCodeOther == "UnPlanned"<br/>
            4. Order is Limit Service if OrderTypeCode == "SupplyOrServiceOrder"; OrderTypeCodeOther == "Limit"<br/>
            5. Order is Mixed in all other cases<br/>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDefinitions.Trip2OrderTypeDefinitionStrategy.Resolve(TRR.O2I.DataAccess.Entities.IOrderComposite,System.Collections.Generic.IList{TRR.O2I.DataAccess.Entities.OrderLine})">
            <summary>
            Resolves the specified order type.
            </summary>
            <param name="order">The order.</param>
            <param name="lines">All order lines and sublines.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDefinitions.Trip22OrderTypeDefinitionStrategy">
            <summary>
            Order Type Defintion Strategy for Trip 22<br/>
            1. Order is Material if OrderTypeCode == "PurchaseOrder"<br/>
            2. Order is Service Planned if OrderTypeCode == "SupplyOrServiceOrder" and every lin has sublines<br/>
            3. Order is Service Planned if OrderTypeCode == "SupplyOrServiceOrder" and every line has no sublines<br/>
            4. Order type is Mixed in all other cases.<br/>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDefinitions.Trip22OrderTypeDefinitionStrategy.Resolve(TRR.O2I.DataAccess.Entities.IOrderComposite,System.Collections.Generic.IList{TRR.O2I.DataAccess.Entities.OrderLine})">
            <summary>
            Resolves the specified order type.
            </summary>
            <param name="order">The order.</param>
            <param name="lines">All order lines and sublines.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDependentWorkflowStatusAdjuster.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey,TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDependentWorkflowStatusAdjuster"/> class.
            </summary>
            <param name="buyerSettings">The buyer settings.</param>
            <param name="orderTypeKey">The order type key.</param>
            <param name="supplierCountry">The supplier country.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDependentWorkflowStatusAdjuster.IsInvoiceFromPOAllowed">
            <summary>
            Determines whether [is invoice from po allowed].
            </summary>
            <returns>
            	<c>true</c> if [is invoice from po allowed]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDependentWorkflowStatusAdjuster.IsInvoiceFromGRAllowed">
            <summary>
            Determines whether [is invoice from GR allowed].
            </summary>
            <returns>
            	<c>true</c> if [is invoice from GR allowed]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDependentWorkflowStatusAdjuster.IsEntrySheetFromPOAllowed">
            <summary>
            Determines whether ES creation from PO is allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationCheckResult">
            <summary>
            Indicates result of document creation checks.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationCheckResult.Allowed">
            <summary>
            Allowed
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationCheckResult.DeniedByBuyer">
            <summary>
            Denied by buyer.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationCheckResult.DeniedOrderResponsesNotSent">
            <summary>
            Denied case order responses not sent.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationCheckResult.DeniedAsnNotSent">
            <summary>
            Denied case asn not sent. 
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationCheckResult.DeniedAsnNotCreated">
            <summary>
            Denied case asn not created
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationCheckResult.DeniedAsnNotCreatedFromLatestOrderDocument">
            <summary>
            Denied case asn not created
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DenyIfOrderResponsesNotSentAndAsnSentRule">
            <summary>
            Denies invoice creation if no order response was sent.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule">
            <summary>
            Document creation rule base on documents history sequence
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRule">
            <summary>
            Rule to indicate whether it is allowed to create document.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRule.Check(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Checks if document can be created from  specified orders;
            </summary>
            <param name="orderIds">The order ids.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule.#ctor(TRR.O2I.DataAccess.Services.IServiceManagerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule"/> class.
            </summary>
            <param name="serviceManagerFactory">The service manager factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule.Check(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Checks if document can be created from  specified orders;
            </summary>
            <param name="orderIds">The order ids.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule.CheckSequence(System.Collections.Generic.IList{TRR.O2I.DataAccess.Core.Entities.DocumentSequenceElement})">
            <summary>
            Checks documents the sequence.
            </summary>
            <param name="sequence">The sequence.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule.IsDraftCor(TRR.O2I.DataAccess.Core.Entities.DocumentSequenceElement)">
            <summary>
            Determines whether the specified document is draft cor.
            </summary>
            <param name="document">The document.</param>
            <returns>
            	<c>true</c> if specified document is draft cor; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule.IsSentCor(TRR.O2I.DataAccess.Core.Entities.DocumentSequenceElement)">
            <summary>
            Determines whether the specified document is sent cor.
            </summary>
            <param name="document">The document.</param>
            <returns>
            	<c>true</c> if specified document is sent cor; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule.IsDraftPor(TRR.O2I.DataAccess.Core.Entities.DocumentSequenceElement)">
            <summary>
            Determines whether the specified document is draft por.
            </summary>
            <param name="document">The document.</param>
            <returns>
            	<c>true</c> if specified document is draft por; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule.IsSentAsn(TRR.O2I.DataAccess.Core.Entities.DocumentSequenceElement)">
            <summary>
            Determines whether the specified document is sent asn.
            </summary>
            <param name="document">The document.</param>
            <returns>
            	<c>true</c> if specified document is sent asn; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationSequenceRule.IsAsn(TRR.O2I.DataAccess.Core.Entities.DocumentSequenceElement)">
            <summary>
            Determines whether the specified document is asn.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DenyIfOrderResponsesNotSentAndAsnSentRule.CheckSequence(System.Collections.Generic.IList{TRR.O2I.DataAccess.Core.Entities.DocumentSequenceElement})">
            <summary>
            Checks documents the sequence.
            </summary>
            <param name="sequence">The sequence.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.BuildDocumentFromOrdersWithDifferentControlKeysException">
            <summary>
            Thrown while asn creation from orders with different control keys.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationRuleFactory">
            <summary>
            Factory for document creation rules.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRuleFactory">
            <summary>
            Factory for document creation rules.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRuleFactory.GetDenyIfOrderResponsesNotSentAndAsnSentRule">
            <summary>
            Gets the deny if order responses not sent and asn sent rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRuleFactory.GetDenyIfOrderResponsesNotSent">
            <summary>
            Gets the deny if order responses not sent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRuleFactory.GetAlwaysDenied">
            <summary>
            Gets the always denied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRuleFactory.GetAlwaysAllowed">
            <summary>
            Gets the always allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationRuleFactory.GetDenyIfOrderResponsesNotSentAndAsnSentRule">
            <summary>
            Gets the deny if order responses not sent and asn sent rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationRuleFactory.GetDenyIfOrderResponsesNotSent">
            <summary>
            Gets the deny if order responses not sent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationRuleFactory.GetAlwaysDenied">
            <summary>
            Gets the always denied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DocumentCreationRuleFactory.GetAlwaysAllowed">
            <summary>
            Gets the always allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.FinalInvoiceSentException">
            <summary>
            FinalInvoiceSentException
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.FinalInvoiceSentException.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            public constructor
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.FinalInvoiceSentException.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.PendingSubsequentInvoiceException">
            <summary>
            PendingSubsequentInvoiceException
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.PendingSubsequentInvoiceException.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Descriptors.DocumentGeneralInformation)">
            <summary>
            public constructor
            </summary>
            <param name="pendingSubsequentInvoiceNumber"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.PendingSubsequentInvoiceException.SubsequentInvoiceInfo">
            <summary>
            SubsequentInvoiceInfo
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.NoItemsSelectedForSubsequentInvoiceCreationException">
            <summary>
            Is thrown when no items are selected on sent invoice.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceCanadaVersion0">
            <summary>
            Data-transfer entity for parsed uploaded non-po invoice for Canada.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceCanadaVersion0.InvoiceNumber">
            <summary>
            Gets or sets InvoiceNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceCanadaVersion0.Type">
            <summary>
            Gets or sets Type
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceCanadaVersion0.Currency">
            <summary>
            Ges or sets Currency
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceCanadaVersion0.BuyerContactEmail">
            <summary>
            Gets or sets BuyerContactEmail
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceCanadaVersion0.PONumber">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceCanadaVersion0.HeaderFreight">
            <summary>
            Gets or sets HeaderFreight
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceCanadaVersion0.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceCanadaVersion0.OriginalInvoiceNumber">
            <summary>
            Gets or sets OriginalInvoiceNumber
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1">
            <summary>
            Data-transfer entity for parsed uploaded non-po invoice line for european countries
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.LineNumber">
            <summary>
            Gets or sets LineNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.SupplierPartNumber">
            <summary>
            Gets or sets SupplierPartNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.ItemDescription">
            <summary>
            Gets or sets ItemDescription
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.DeliveryDate">
            <summary>
            Gets or sets Delivery Date
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.UnitPrice">
            <summary>
            Gets or sets UnitPrice
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.Quantity">
            <summary>
            Gets or sets Quantity
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.UOM">
            <summary>
            Gets or sets UOM
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.TaxCategory">
            <summary>
            Gets or sets TaxCategory
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.TaxPercent">
            <summary>
            Gets or sets TaxPercent
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.TaxType">
            <summary>
            Gets or sets TaxType
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.TaxPaymentMethod">
            <summary>
            Gets or sets TaxPaymentMethod
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.ReasonTaxExempt">
            <summary>
            Gets or sets ReasonTaxExempt
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version1.ParsedUploadedNonPOInvoiceLineEuropeVersion1.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceUSAVersion0">
            <summary>
            Data-transfer entity for uploaded non-po invoice for USA
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceUSAVersion0.InvoiceNumber">
            <summary>
            Gets or sets InvoiceNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceUSAVersion0.Type">
            <summary>
            Gets or sets Type
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceUSAVersion0.Currency">
            <summary>
            Ges or sets Currency
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceUSAVersion0.PONumber">
            <summary>
            Gets or sets PONumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceUSAVersion0.BuyerContactEmail">
            <summary>
            Gets or sets BuyerContactEmail
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceUSAVersion0.HeaderFreight">
            <summary>
            Gets or sets HeaderFreight
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceUSAVersion0.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceUSAVersion0.OriginalInvoiceNumber">
            <summary>
            Gets or sets OriginalInvoiceNumber
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Exceptions.CountryInTemplateConfigurationIsNotSupportedException">
            <summary>
            CountryInTemplateConfigurationIsNotSupportedException
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Exceptions.CountryDoesNotMatchException">
            <summary>
            CountryDoesNotMatchException
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Exceptions.MandatoryFieldsEmptyException">
            <summary>
            Is thrown when one of the mandatory fields is empty
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Exceptions.MandatoryFieldsEmptyException.#ctor(System.String)">
            <summary>
            public constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerCanada">
            <summary>
            NonPOInvoicesExcelTemplateParsingResultsCombinerCanada
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2">
            <summary>
             Combine results from excel parsing
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.BusinessSettings">
            <summary>
            Business Settings
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.ServiceManager">
            <summary>
            Service Manager
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,System.Int32,TRR.O2I.Common.Core.TRUEIntegration.FacadeEntities.ITRUECompany,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.Common.Core.SupplierCountry,DataAccess.Services.IServiceManager)">
            <summary>
             Public constructor
            </summary>
            <param name="buyerParty"></param>
            <param name="sellerParty"></param>
            <param name="buyerId"></param>
            <param name="buyerCompany"></param>
            <param name="businessSettings"></param>
            <param name="destinationCountry"></param>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.Combine(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.ExecutePostMappingActions(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,`0)">
            <summary>
            Executes some actions after mapping
            </summary>
            <param name="invoice"></param>
            <param name="parsedUploadedNonPOInvoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.MapHeaderInformation(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,`0)">
            <summary>
            Maps Header Information
            </summary>
            <param name="invoice"></param>
            <param name="parsedUploadedNonPOInvoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.MapInvoiceLine(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ParentInvoiceLine,`1,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Maps Invoice Line
            </summary>
            <param name="line"></param>
            <param name="parsedLine"></param>
            <param name="invoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.MapAndAddTax(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ParentInvoiceLine,`1,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Maps and adds tax to the line
            </summary>
            <param name="line"></param>
            <param name="parsedLine"></param>
            <param name="invoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.TaxIsDefined(`1)">
            <summary>
            Checks whether tax is defined
            </summary>
            <param name="parsedLine"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.ParseDecimal(System.String,System.String,System.Boolean)">
            <summary>
            Parses decimal
            </summary>
            <param name="parsedValue"></param>
            <param name="propertyName"></param>
            <param name="isNullable"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.ParseDecimal(System.String,System.String)">
            <summary>
            Parses decimal
            </summary>
            <param name="parsedValue"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerBase`2.Combine(System.Collections.IEnumerable)">
            <summary>
            Combines parsing results
            </summary>
            <param name="parsingResults"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerCanada.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,System.Int32,TRR.O2I.Common.Core.TRUEIntegration.FacadeEntities.ITRUECompany,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.Common.Core.SupplierCountry,DataAccess.Services.IServiceManager)">
            <summary>
            public constructor
            </summary>
            <param name="buyerParty"></param>
            <param name="sellerParty"></param>
            <param name="buyerId"></param>
            <param name="buyerCompany"></param>
            <param name="businessSettings"></param>
            <param name="destinationCountry"></param>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerCanada.MapAndAddTax(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ParentInvoiceLine,TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineCanada,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Maps and adds tax to the line
            </summary>
            <param name="line"></param>
            <param name="parsedLine"></param>
            <param name="invoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerCanada.TaxIsDefined(TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineCanada)">
            <summary>
            Checks whether tax is defined
            </summary>
            <param name="parsedLine"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerEurope">
            <summary>
            NonPOInvoicesExcelTemplateParsingResultsCombinerEurope
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerEurope.SupplierCountryPercentDelimiter">
            <summary>
            SupplierCountryPercentDelimiter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerEurope.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,System.Int32,TRR.O2I.Common.Core.TRUEIntegration.FacadeEntities.ITRUECompany,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.Common.Core.SupplierCountry,DataAccess.Services.IServiceManager)">
            <summary>
            public constructor
            </summary>
            <param name="buyerParty"></param>
            <param name="sellerParty"></param>
            <param name="buyerId"></param>
            <param name="buyerCompany"></param>
            <param name="businessSettings"></param>
            <param name="destinationCountry"></param>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerEurope.MapHeaderInformation(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope)">
            <summary>
            Maps Header Information
            </summary>
            <param name="invoice"></param>
            <param name="parsedUploadedNonPOInvoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerEurope.ExecutePostMappingActions(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope)">
            <summary>
            Executes some actions after mapping
            </summary>
            <param name="invoice"></param>
            <param name="parsedUploadedNonPOInvoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerEurope.MapAndAddTax(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ParentInvoiceLine,TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineEurope,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Maps and adds tax to the line
            </summary>
            <param name="line"></param>
            <param name="parsedLine"></param>
            <param name="invoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerEurope.MapInvoiceLine(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ParentInvoiceLine,TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineEurope,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Maps Invoice Line
            </summary>
            <param name="line"></param>
            <param name="parsedLine"></param>
            <param name="invoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerEurope.TaxIsDefined(TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineEurope)">
            <summary>
            Checks whether tax is defined
            </summary>
            <param name="parsedLine"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerFrance">
            <summary>
            NonPOInvoicesExcelTemplateParsingResultsCombinerFrance
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerFrance.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,System.Int32,TRR.O2I.Common.Core.TRUEIntegration.FacadeEntities.ITRUECompany,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.Common.Core.SupplierCountry,DataAccess.Services.IServiceManager)">
            <summary>
             public constructor
            </summary>
            <param name="buyerParty"></param>
            <param name="sellerParty"></param>
            <param name="buyerId"></param>
            <param name="buyerCompany"></param>
            <param name="businessSettings"></param>
            <param name="destinationCountry"></param>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerFrance.MapHeaderInformation(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope)">
            <summary>
            Maps Header Information
            </summary>
            <param name="invoice"></param>
            <param name="parsedUploadedNonPOInvoice"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerNorway">
            <summary>
            NonPOInvoicesExcelTemplateParsingResultsCombinerNorway
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerNorway.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,System.Int32,TRR.O2I.Common.Core.TRUEIntegration.FacadeEntities.ITRUECompany,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.Common.Core.SupplierCountry,DataAccess.Services.IServiceManager)">
            <summary>
            public constructor
            </summary>
            <param name="buyerParty"></param>
            <param name="sellerParty"></param>
            <param name="buyerId"></param>
            <param name="buyerCompany"></param>
            <param name="businessSettings"></param>
            <param name="destinationCountry"></param>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerNorway.MapHeaderInformation(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceEurope)">
            <summary>
            Maps Header Information
            </summary>
            <param name="invoice"></param>
            <param name="parsedUploadedNonPOInvoice"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerUSA">
            <summary>
            NonPOInvoicesExcelTemplateParsingResultsCombinerUSA
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerUSA.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party,System.Int32,TRR.O2I.Common.Core.TRUEIntegration.FacadeEntities.ITRUECompany,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.Common.Core.SupplierCountry,DataAccess.Services.IServiceManager)">
            <summary>
            public constructor
            </summary>
            <param name="buyerParty"></param>
            <param name="sellerParty"></param>
            <param name="buyerId"></param>
            <param name="buyerCompany"></param>
            <param name="businessSettings"></param>
            <param name="destinationCountry"></param>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerUSA.MapAndAddTax(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ParentInvoiceLine,TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineUSA,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Maps and adds tax to the line
            </summary>
            <param name="line"></param>
            <param name="parsedLine"></param>
            <param name="invoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.ResultsCombiners.NonPOInvoicesExcelTemplateParsingResultsCombinerUSA.TaxIsDefined(TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Interfaces.IParsedUploadedNonPOInvoiceLineUSA)">
            <summary>
            Checks whether tax is defined
            </summary>
            <param name="parsedLine"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateConfiguration">
            <summary>
            NonPOInvoicesMassUploadTemplateConfiguration
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateConfiguration.#ctor(TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Public constructor
            </summary>
            <param name="supplierCountry"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateConfiguration.Version">
            <summary>
            Gets or sets version of the tempalte
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateConfiguration.Country">
            <summary>
            Gets or sets coutnry of the template
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateParser">
            <summary>
            NonPOInvoicesMassUploadTemplateParser
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateParser.Parse(System.String,TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            
            </summary>
            <param name="filePath"></param>
            <param name="supplierCountry"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateParser.Parse(System.Web.HttpPostedFile,TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            
            </summary>
            <param name="postedFile"></param>
            <param name="supplierCountry"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0">
            <summary>
            ParsedUploadedNonPOInvoiceLineCanadaVersion0
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.LineNumber">
            <summary>
            Gets or sets LineNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.SupplierPartNumber">
            <summary>
            Gets or sets SupplierPartNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.ItemDescription">
            <summary>
            Gets or sets ItemDescription
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.UnitPrice">
            <summary>
            Gets or sets UnitPrice
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.Quantity">
            <summary>
            Gets or sets Quantity
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.UOM">
            <summary>
            Gets or sets UOM
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.TaxProvince">
            <summary>
            Gets or sets TaxProvince
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.TaxType">
            <summary>
            Gets or sets TaxType
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.TaxPercentPSTHST">
            <summary>
            Gets or sets TaxPercentPSTHST
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.TaxPercentGST">
            <summary>
            Gets or sets TaxPercentGST
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.TaxAmountPSTHST">
            <summary>
            Gets or sets TaxAmountPSTHST
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.TaxAmountGST">
            <summary>
            Gets or sets TaxAmountGST
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineCanadaVersion0.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0">
            <summary>
            ParsedUploadedNonPOInvoiceLineUSA
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.LineNumber">
            <summary>
            Gets or sets LineNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.SupplierPartNumber">
            <summary>
            Gets or sets SupplierPartNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.ItemDescription">
            <summary>
            Gets or sets ItemDescription
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.UnitPrice">
            <summary>
            Gets or sets UnitPrice
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.Quantity">
            <summary>
            Gets or sets Quantity
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.UOM">
            <summary>
            Gets or sets UOM
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.TaxCategory">
            <summary>
            Gets or sets TaxCategory
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.TaxPercent">
            <summary>
            Gets or sets TaxPercent
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.TaxAmount">
            <summary>
            Gets or sets TaxAmount
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.TaxType">
            <summary>
            Gets or sets TaxType
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.TaxPaymentMethod">
            <summary>
            Gets or sets TaxPaymentMethod
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.ReasonTaxExempt">
            <summary>
            Gets or sets ReasonTaxExempt
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Entities.Version0.ParsedUploadedNonPOInvoiceLineUSAVersion0.Notes">
            <summary>
            Gets or sets Notes
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateParsingResults">
            <summary>
            NonPOInvoicesMassUploadTemplateParsingResults
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateParsingResults.#ctor(TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Public constructor
            </summary>
            <param name="supplierCountry"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateParsingResults.Invoices">
            <summary>
            Gets or sets parsed Invoices
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateParsingResults.Configuration">
            <summary>
            Gets or sets configuration of the tempalte
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateVersion">
            <summary>
            NonPOInvoicesMassUploadTemplateVersion
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateVersion.Version0">
            <summary>
            Version0
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateVersion.Version1">
            <summary>
            Version1 
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateVersion.Version2">
            <summary>
            Version2
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.NonPOInvoicesMassUploadTemplateVersion.Version3">
            <summary>
            Version3
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Exceptions.VersionNotSupportedException">
            <summary>
            VersionNotSupportedException
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Excel.Strategies.Version0Version1.NonPOInvoicesMassUploadTemplateUSAVersion1ParsingStrategy">
            <summary>
            Strategy for parsing non-PO invoice for USA of version 1
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseInfo">
            <summary>
            Invoice response shredding information
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseInfo"/> class.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseInfo.BuyerParty">
            <summary>
            Gets or sets the buyer party.
            </summary>
            <value>The buyer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseInfo.SellerParty">
            <summary>
            Gets or sets the seller party.
            </summary>
            <value>The seller party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseInfo.InvoiceReference">
            <summary>
            Gets or sets the invoice reference.
            </summary>
            <value>The invoice reference.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseInfo.Response">
            <summary>
            Gets or sets the response.
            </summary>
            <value>The response.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseInfo.Lines">
            <summary>
            Gets or sets the lines.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.IAvailableValueCalculation">
            <summary>
            Encapsulates logic on how to calculate available value.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.IAvailableValueCalculation.Calculate(System.Decimal,System.Decimal)">
            <summary>
            Calculates available value by requested and invoiced values.
            </summary>
            <param name="requested"></param>
            <param name="invoiced"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.EntrySheetCalculator">
            <summary>
             Entry Sheet calculations aggregator
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator">
            <summary>
            Invoicing calculations aggregator
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator.RecalculateTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer,System.Boolean)">
            <summary>
            Recalculates invoicing document data
            </summary>
            <param name="document">The document.</param>
            <param name="preferencesContainer">The order preferences.</param>
            <param name="includeTaxTotalInSubTotal">if set to <c>true</c> [include tax total in sub total].</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator.RecalculateTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer)">
            <summary>
            Recalculates invoicing document data
            </summary>
            <param name="document">The document.</param>
            <param name="preferencesContainer">The preferences container.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator.RecalculateAvailableAmountValues(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderHistory,DataAccess.Services.IServiceManager)">
            <summary>
             Recalculates available 
            </summary>
            <param name="document"></param>
            <param name="lastInboundOrder"></param>
            <param name="manager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator.RecalculateAvailableAmountValues(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLineBase},DataAccess.Services.IServiceManager)">
            <summary>
            </summary>
            <param name="document"></param>
            <param name="parentHistoryLines"></param>
            <param name="manager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator.GetLeftAvailableAmountForLine(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine)">
            <summary>
            Gets available amount which is left for an invoicing document line.
            </summary>
            <param name="parentLine">The invocing document line.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator.RecalculateAvailableQuantityValues(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderHistory,DataAccess.Services.IServiceManager)">
            <summary>
            Recalculates the available quantity values.
            </summary>
            <param name="document">The document.</param>
            <param name="lastInbound">The last inbound.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator.GetHistoricalAvailableQuantityForLine(TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLineHistory,System.Decimal)">
            <summary>
            Gets historical available quantity for line.
            </summary>
            <param name="historySubLine"></param>
            <param name="invoicedQuantity"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator.RecalculateParentLineTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer)">
            <summary>
            Recalculates parent invociing document line totals.
            </summary>
            <param name="parentLine"></param>
            <param name="preferencesContainer"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator.RecalculateParentLineWithoutSublinesTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer)">
            <summary>
            Recalculates totals of invoicing document parent line that has no sub-lines.
            </summary>
            <param name="parentLine">The parent line</param>
            <param name="preferencesContainer">The preferences container.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator.RecalculateLineTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer)">
            <summary>
            Recalculates invoicing document line totals
            </summary>
            <param name="line">The line.</param>
            <param name="preferencesContainer">The preferences container.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoicingDocumentCalculator.GetHistoricalAvailableAmountForLine(System.Decimal,System.Decimal)">
            <summary>
            Gets historical available amount for line
            </summary>
            <param name="historicalLineSubtotal"></param>
            <param name="invoicedAmount"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.EntrySheetCalculator.RecalculateParentLineWithoutSublinesTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer)">
            <summary>
            Recalculates totals of invoicing document parent line that has no sub-lines.
            </summary>
            <param name="parentLine">The parent line</param>
            <param name="preferencesContainer">The preferences container.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.EntrySheetCalculator.RecalculateParentLinesAvailableQuantityValues(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderHistory)">
            <summary>
            Recalculates available quantity Values for Entry Sheet parent lines.
            </summary>
            <param name="entrySheet">The Entry Sheet.</param>
            <param name="serviceManager">Service Manager.</param>
            <param name="orderHistory">Ther Order History.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoiceCalculator">
            <summary>
             Invoice calculations aggregator
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoiceCalculator.GetInstance(TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceType)">
            <summary>
            </summary>
            <param name="invoiceType"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoiceCalculator.InvoiceCalculatorImplementation.RecalculateParentLineWithoutSublinesTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer)">
            <summary>
            Recalculates totals of invoicing document parent line that has no sub-lines.
            </summary>
            <param name="parentLine">The parent line</param>
            <param name="preferencesContainer">The preferences container.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoiceCalculator.SubsequentInvoiceCalculator.RecalculateTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer,System.Boolean)">
            <summary>
            Recalculates invoicing document data
            </summary>
            <param name="document">The document.</param>
            <param name="preferencesContainer">The order preferences.</param>
            <param name="includeTaxTotalInSubTotal">if set to <c>true</c> [include tax total in sub total].</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoiceCalculator.SubsequentInvoiceCalculator.RecalculateParentLineTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer)">
            <summary>
            Recalculates totals of a parent subsequent invoice line.
            </summary>
            <param name="parentLine"></param>
            <param name="preferencesContainer"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoiceCalculator.SubsequentInvoiceCalculator.RecalculateParentLineWithoutSublinesTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer)">
            <summary>
            Recalculates totals of invoicing document parent line that has no sub-lines.
            </summary>
            <param name="parentLine">The parent line</param>
            <param name="preferencesContainer">The preferences container.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoiceCalculator.SubsequentInvoiceCalculator.GetLeftAvailableAmountForLine(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine)">
            <summary>
            Gets available amount which is left for an invoicing document line.
            </summary>
            <param name="parentLine">The invocing document line.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoiceCalculator.SubsequentInvoiceCalculator.RecalculateAvailableAmountValues(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLineBase},DataAccess.Services.IServiceManager)">
            <summary>
            </summary>
            <param name="document"></param>
            <param name="parentHistoryLines"></param>
            <param name="manager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.InvoiceCalculator.SubsequentInvoiceCalculator.RecalculateAvailableQuantityValues(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderHistory,DataAccess.Services.IServiceManager)">
            <summary>
            Recalculates the available quantity values.
            </summary>
            <param name="document">The document.</param>
            <param name="lastInbound">The last inbound.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ChangeOrderLineHelper">
            <summary>
            Encapsulates helping methods for change order lines.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.OrderDocumentLineHelperBase">
            <summary>
            Base class encapsulating methods for order document lines.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderDocumentLineHelperBase.GetFirstServiceStartDate(System.String)">
            <summary>
            Gets the first service start date.
            </summary>
            <param name="lineXML"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderDocumentLineHelperBase.GetFirstServiceEndDate(System.String)">
            <summary>
            Gets the first service end date.
            </summary>
            <param name="lineXML"></param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderDocumentLineHelperBase.ListOfSheduleLineXPath">
            <summary>
            xPath to ListOfSheduleLine
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangeOrderLineHelper.ListOfSheduleLineXPath">
            <summary>
            xPath to ListOfSheduleLine
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.CombinedTax">
            <summary>
            Canadian combined tax
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.CombinedTax.TaxesType">
            <summary>
            Gets or sets the type of the tax (N, G, P, T)
            </summary>
            <value>The type of the tax.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.CombinedTax.Region">
            <summary>
            Gets or sets the Region(int key).
            </summary>
            <value>The province.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.CombinedTax.PstOrHstPercent">
            <summary>
            Gets or sets the PST or HST percent.
            </summary>
            <value>The PST or HST percent.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.CombinedTax.PstOrHstAmount">
            <summary>
            Gets or sets the PST or HST amount.
            </summary>
            <value>The PST or HST amount.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.CombinedTax.GstPercent">
            <summary>
            Gets or sets the GST percent.
            </summary>
            <value>The GST percent.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.CombinedTax.GstAmount">
            <summary>
            Gets or sets the GST amount.
            </summary>
            <value>The GST amount.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.AsnNumberFormatter">
            <summary>
            Formats ASN number (handles blank number in a special manner).
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.BlankNumberFormatter">
            <summary>
            Formats document number (handles blank number in a special manner).
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.BlankNumberFormatter.Format(System.Object)">
            <summary>
            Replaces empty document number with blank (used on search page).
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.BlankNumberFormatter.Parse(System.Object)">
            <summary>
            Parse is not supported.
            </summary>
            <remarks>Throws <see cref="T:System.NotSupportedException"/></remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Throws <see cref="T:System.NotSupportedException"/></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.BlankNumberFormatter.NotEmptyNumberFormatter">
            <summary>
            Formatter used for not blank values
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.AsnNumberFormatter.NotEmptyNumberFormatter">
            <summary>
            Formatter used for not blank values
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.EmptyStringFormatter">
            <summary>
             Formats empty string to n/a
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.EmptyStringFormatter.Format(System.Object)">
            <summary> 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.EmptyStringFormatter.Parse(System.Object)">
            <summary> 
            </summary>
            <param name="formattedData"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.EmptyStringFormatter.Format(System.String)">
            <summary>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.EnumSelectedItemFormatter">
            <summary>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.EnumSelectedItemFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.EnumSelectedItemFormatter.Parse(System.Object)">
            <summary>
            Restore object from formatted data.
            </summary>
            <param name="formattedData">Formatted data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceNumberFormatter">
            <summary>
            StringsTrimmer trims input/output string.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceNumberFormatter.NotEmptyNumberFormatter">
            <summary>
            Formatter used for not blank values
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.MakeUpdatePanelConditional">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.MakeUpdatePanelConditional.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>
            Formatted data.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.MakeUpdatePanelConditional.Parse(System.Object)">
            <summary>
            Restore object from formatted data.
            </summary>
            <param name="formattedData">Formatted data.</param>
            <returns>
            Object.
            </returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.SupplierCountryFormatter">
            <summary>
            Supplier Country Formatter.<br />
            Converts supplier country id into country name.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.EnumFormatter">
            <summary>
            Base class for all enum formatters.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.DataBinding.Formatters.EnumFormatter.enumType">
            <summary>
            Supported DBEnumType.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.EnumFormatter.#ctor(TRR.O2I.DataAccess.Core.DBEnumType)">
            <summary>
            Special constructor.
            </summary>
            <param name="enumType">Supported DBEnumType.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.EnumFormatter.#ctor(TRR.O2I.DataAccess.Core.DBEnumType,DataAccess.Services.IEnumGateway)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.EnumFormatter"/> class.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.EnumFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            If enum code == null (int.MinValue) empty string is being returned.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.EnumFormatter.Parse(System.Object)">
            <summary>
            Restore Enum code from it's name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.SupplierCountryFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.SupplierCountryFormatter"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryMultipleFormatter">
            <summary>
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFormatter">
            <summary>
            Convert Tax Category Code into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryMultipleFormatter.Format(System.Object)">
            <summary> 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.UTCToUserDateFormatter">
            <summary>
            Allows for uniform conversion between date in user local time and UTC. Result is given as string.
            </summary>
            TODO: covert this with UNIT tests and unify with UTCToUserTimeFormatter (there's no time for this for now)
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UTCToUserDateFormatter.Parse(System.Object)">
            <summary>
            Provides from-view-to-business-logic directional conversion.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="formattedData">UI (view) value representation.</param>
            <returns>Value ready to be used internally by system (business logic).</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UTCToUserDateFormatter.Format(System.Object)">
            <summary>
            Provides from-business-logic-to-view directional conversion.
            </summary>
            <param name="data">System (business logic) value representation.</param>
            <returns>Value ready to be shown on UI (view).</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DefaultTax.CombinedTaxStrategy">
            <summary>
            Default combined taxes strategy
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DefaultTax.IDefaultTaxStrategy">
            <summary>
            Strategy to calculate invoice tax
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.IDefaultTaxStrategy.CreateDefaultTax">
            <summary>
            Creates the default taxes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.IDefaultTaxStrategy.ShallDefaultTaxBeApplied(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Gets a value indicating whether default tax should be applied on invoice lines while invoice is being created based on buyer settings.
            </summary>
            <value><c>true</c> if default tax should be applied on invoice lines while invoice is being created; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.CombinedTaxStrategy.CreateDefaultTax">
            <summary>
            Creates the default taxes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.CombinedTaxStrategy.ShallDefaultTaxBeApplied(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Gets a value indicating whether default tax should be applied on invoice lines while invoice is being created based on buyer settings.
            </summary>
            <value><c>true</c> if default tax should be applied on invoice lines while invoice is being created; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DefaultTax.InvoicingDocumentTaxRateApproximator">
            <summary>
            Invoice tax rates approximator
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.InvoicingDocumentTaxRateApproximator.#ctor(TRR.O2I.BusinessLogic.Managers.DefaultTax.TaxRateApproximationMapping,TRR.O2I.BusinessLogic.Managers.DefaultTax.ITaxRatesSource)">
            <summary>
            Public constructor.
            </summary>
            <param name="mapping"></param>
            <param name="supportedRatesSource"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.InvoicingDocumentTaxRateApproximator.UpdateInvoicingDocumentTaxes(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Updates Invoicing document taxes.
            </summary>
            <param name="document">Invoicing document</param>
            <param name="supplierCountry">Supplier Country</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DefaultTax.ITaxRateApproximator">
            <summary>
            Tax Rate Approximatpr
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.ITaxRateApproximator.GetApproximation(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal)">
            <summary>
            Gives an approximation of the specified rate by list of supported rates.
            </summary>
            <param name="supportedRates"></param>
            <param name="rate"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DefaultTax.ITaxRatesSource">
            <summary>
            Tax Rates Source
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.ITaxRatesSource.LoadSupportedRates(TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Loads a list of supported tax rates for a supplier country.
            </summary>
            <param name="country"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DefaultTax.TaxRateApproximator">
            <summary>
            Tax Rate Approximator
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.TaxRateApproximator.GetApproximation(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal)">
            <summary>
            Gives an approximation of the specified rate by list of supported rates.
            </summary>
            <param name="supportedRates"></param>
            <param name="rate"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DefaultTax.TaxRateApproximationMapping">
            <summary>
            Tax Rate Approximation Mapping
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.TaxRateApproximationMapping.#ctor(TRR.O2I.BusinessLogic.Managers.DefaultTax.ITaxRateApproximator,TRR.O2I.BusinessLogic.Managers.DefaultTax.ITaxRatesSource)">
            <summary>
            public constructor.
            </summary>
            <param name="approximator"></param>
            <param name="supportedRatesSource"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.TaxRateApproximationMapping.Map(TRR.O2I.Common.Core.SupplierCountry,System.Decimal)">
            <summary>
            Maps rate for a coutnry
            </summary>
            <param name="country"></param>
            <param name="rate"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DefaultTax.TaxRatesSource">
            <summary>
            Tax Rates Source
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.TaxRatesSource.#ctor(DataAccess.Services.IServiceManager)">
            <summary>
            Public constructor
            </summary>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.TaxRatesSource.LoadSupportedRates(TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Loads a list of supported tax rates for a supplier country.
            </summary>
            <param name="country"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.Strategies.INewDocumentNumberGenerationStrategy">
            <summary>
            Represents concrete next number generation logic for a concrete document
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.Strategies.INewDocumentNumberGenerationStrategy.GetNewDocumentNumber">
            <summary>
            Gets next document number
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentLinesValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.IEntityValidator`1">
            <summary>
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.IEntityValidator">
            <summary>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.IEntityValidator.Validate(System.Object)">
            <summary>
             Performs Entity Validation
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.IEntityValidator.SetUpValidator(System.Object[])">
            <summary>
            Performs validator's setup
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.IEntityValidator`1.Validate(`0)">
            <summary>
             Performs Entity Validation
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.Summary">
            <summary>
            Validation Summary
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.ValidationRules">
            <summary>
            Validation Rules
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.Entity">
            <summary>
            Entity to validate
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.#ctor(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.Managers.EntityValidators.IEntityValidationRule})">
            <summary>
            Constructor with validation rules specified.
            </summary>
            <param name="validationRules"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.Validate(`0)">
            <summary>
            Validates an entity
            </summary>
            <param name="entityToValidate"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.SetUpValidator(System.Object[])">
            <summary>
            initializes validator
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.Validate(System.Object)">
            <summary>
            Validates entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.Validate">
            <summary>
            Validates entity
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.ValidatePrice(System.Decimal,System.String,System.Int32)">
            <summary>
            Validates price
            </summary>
            <param name="price"></param>
            <param name="propertyName"></param>
            <param name="validationMessageId"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.ValidateQuantity(System.Decimal,System.String,System.Int32)">
            <summary>
            Validates quantity
            </summary>
            <param name="quantity"></param>
            <param name="propertyName"></param>
            <param name="validationMessageId"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.IsSelected(System.Int32)">
            <summary>
            return true if selected Index is not IntNull (int.MinValue)
            </summary>
            <param name="selectedIndex"></param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorBase`1.Rules">
            <summary>
            Gets a list of the rules for the validator.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoiceLine.InvoiceLineValidatorsFactory">
            <summary>
            InvoiceLineValidatorsFactory
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoiceLine.InvoiceLineValidatorsFactory.GetValidator(TRR.O2I.Common.Core.SupplierCountry,TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets validator
            </summary>
            <param name="supplierCountry"></param>
            <param name="buyerSettings"></param>
            <param name="order"></param>
            <param name="parentLinesNumbers"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.Invoices.Rules.InvoiceTaxesExistanceBasedOnBuyerSettingsValidationRule">
            <summary>
             Invoice taxes existance based on buyer settings validation rule
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentTaxesExistanceBasedOnBuyerSettingsValidationRule">
            <summary>
             Invoicing document taxes existance based on buyer settings validation rule
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentTaxesExistanceValidationRuleBase`1">
            <summary>
             Invoicing document taxes existance validation rule
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentTaxesExistanceValidationRuleBase`1.Validate(`0,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentTaxesExistanceValidationRuleBase`1.TaxesExistanceShouldBeValidated">
            <summary>
            Gets a value indicating whether [Taxes existance should be validated].
            </summary>
            <returns>
            <c>true</c> if [Taxes existance should be validated]; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentTaxesExistanceValidationRuleBase`1.EveryLineHasTax(`0)">
            <summary>
            Check that every line has tax
            </summary>
            <param name="entity">entity</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentTaxesExistanceBasedOnBuyerSettingsValidationRule.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
             Constructor
            </summary>
            <param name="buyerSettings">BuyerSettings</param>
            <param name="orderType">OrderTypeKey</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentTaxesExistanceBasedOnBuyerSettingsValidationRule.TaxesExistanceShouldBeValidated">
            <summary>
            Gets a value indicating whether [Taxes existance should be validated].
            </summary>
            <returns>
            <c>true</c> if [Taxes existance should be validated]; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.Invoices.Rules.InvoiceTaxesExistanceBasedOnBuyerSettingsValidationRule.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
             Constructor
            </summary>
            <param name="buyerSettings">BuyerSettings</param>
            <param name="orderType">OrderTypeKey</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.Invoices.Rules.InvoiceTaxesExistanceBasedOnBuyerSettingsValidationRule.EveryLineHasTax(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument)">
            <summary>
            Check that every line has tax
            </summary>
            <param name="entity">entity</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.InvoicingDocumentParentLineValidationRuleAdapter`1.Validate(System.Object,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.Invoices.InvoiceValidatorsFactory">
            <summary>
            Creates Entity Validators for invoice.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.Invoices.InvoiceValidatorsFactory.#ctor(TRR.O2I.Common.Core.SupplierCountry,TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,DataAccess.Services.IServiceManager)">
            <summary>
             public constructor
            </summary>
            <param name="supplierCountry"></param>
            <param name="buyerSettings"></param>
            <param name="order"></param>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.Invoices.InvoiceValidatorsFactory.CreateValidator">
            <summary>
            Creates Invoice validator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentCreatedFromPlannedServicePOOrMixedPOWithPlannedItemsSublineAvaialbleQuantityValidationRule">
            <summary>
            InvoicingDocumentCreatedFromPlannedServicePOOrMixedPOWithPlannedItemsSublineAvaialbleQuantityValidationRule
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentCreatedFromPlannedServicePOOrMixedPOWithPlannedItemsSublineAvaialbleQuantityValidationRule.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine)">
            <summary>
            public constructor
            </summary>
            <param name="order"></param>
            <param name="parentLine"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentCreatedFromPlannedServicePOOrMixedPOWithPlannedItemsSublineAvaialbleQuantityValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="line"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentCreatedFromPlannedServicePOOrMixedPOWithPlannedItemsSublineAvaialbleQuantityValidationRule.ShouldBeValidated(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Gets a value indicating whether line should be validated
            </summary>
            <param name="line"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentLineAvailableAmountValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="parentLine"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentLineCanadianTaxValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="line"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentLineDeliveryDateValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="line"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentLineDescriptionValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="line"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentLineNumberValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="line"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentLineQuantityValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="line"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentLineSupplierPartNumberValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="line"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentLineUnitPriceValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="line"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentLineUOMValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="line"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentParentLineInvoicedQuantityValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="parentLine"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentLineOrdinaryTaxValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="line"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentParentLineSublinesExistenceValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="parentLine"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentCreatedFromServiceOrMixedPOParentLineSublinesExistenceValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="parentLine"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentParentLineSublineNumbersValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="parentLine"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentLinesExistanceValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.InvoicingDocumentParentLineNumberValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="parentLine"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocumentLine.Rules.MultipleLines.InvoicingDocumentParentLinesValidationRuleBase.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentDateEndingValidation">
            <summary>
            InvoicingDocumentDateEndingValidation
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentDateEndingValidation.DateSeparator">
            <summary>
            DateSeparator
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentDateEndingValidation.MinDate">
            <summary>
            MinDate
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentDateEndingValidation.MaxDate">
            <summary>
            MaxDate
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentDateEndingValidation.IsNumberTooLong(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets a value indicating whether the number is too long.
            </summary>
            <param name="value"></param>
            <param name="maxInvoicingDocumentNumberLength"></param>
            <param name="enableDateEnding"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentParentLinesNumbersValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="invoice"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.Invoices.Rules.InvoiceBuyerOrderNumberValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.Invoices.Rules.InvoiceTypeValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentNumberValidationRule.#ctor(TRR.O2I.BusinessLogic.Managers.EntityValidators.EntrySheet.IInvoicingDocumentValidationMessagesIDsProvider,System.Func{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,System.Boolean},System.Int32,DataAccess.Services.IServiceManager)">
            <summary>
            public constructor
            </summary>
            <param name="labelIdsProvider"></param>
            <param name="isDuplicateDelegate"></param>
            <param name="maxInvoicingDocumentNumberLength"></param>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentNumberValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentCurrencyValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentPartiesTaxInformationMandatoryValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentPartiesTaxInformationValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentPartiesTaxOtherInformationValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentPartyOrderContactValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Contact,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentPartyOrderContactValidationRuleSwitcher.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentPaymentDetailsKEYIDValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentSIRENNumberValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentTaxesExistanceValidationRule">
            <summary>
             Invoicing document taxes existance validation rule
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentTaxesExistanceValidationRule.TaxesExistanceShouldBeValidated">
            <summary>
            Gets a value indicating whether [Taxes existance should be validated].
            </summary>
            <returns>
            <c>true</c> if [Taxes existance should be validated]; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationValidationMessagesReporter">
            <summary>
            InvoiceCreationValidationMessagesReporter
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.IInvoicingDocumentCreationValidationMessagesReporter`1">
            <summary>
            A set of methods to report error messages related to invoicing document creation.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.IInvoicingDocumentCreationValidationMessagesReporter`1.ReportPendingInvoicingDocumentsException(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary>
            Reports a message about pending documents
            </summary>
            <param name="pendingDocumentsForOrderLines"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.IInvoicingDocumentCreationValidationMessagesReporter`1.ReportNotEnoughAvailableAmountException">
            <summary>
            Reports a message on unsufficient available amount.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.IInvoicingDocumentCreationValidationMessagesReporter`1.ReportAllThePOLinesAreDeletedOrRejectedException">
            <summary>
            Reports a message that all the lines used to create an invoicing document are either rejected or deleted.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationValidationMessagesReporter.ReportPendingInvoicingDocumentsException(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice}})">
            <summary>
            Reports a message about pending documents
            </summary>
            <param name="pendingDocumentsForOrderLines"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationValidationMessagesReporter.ReportNotEnoughAvailableAmountException">
            <summary>
            Reports a message on unsufficient available amount.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationValidationMessagesReporter.ReportAllThePOLinesAreDeletedOrRejectedException">
            <summary>
            Reports a message that all the lines used to create an invoicing document are either rejected or deleted.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.SubsequentInvoiceCreationExceptionCatcher">
            <summary>
             Catches exceptions while subsequent invoice creation
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.SubsequentInvoiceCreationExceptionCatcher.Execute(System.Func{TRR.O2I.Common.Core.IUIAction})">
            <summary>
            
            </summary>
            <param name="executeDelegate"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Defaulting.InvoicingDocumentDefaultValuesProvider">
            <summary>
            Provides default exchange rate
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Defaulting.InvoicingDocumentDefaultValuesProvider.CreateExchangeRate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument)">
            <summary>
            Creates default exchange rate
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Defaulting.InvoicingDocumentDefaultValuesProvider.CreateExchangeRate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,DataAccess.Services.IServiceManager)">
            <summary>
            Creates default exchange rate
            </summary>
            <param name="document"></param>
            <param name="serviceManager"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Defaulting.InvoicingDocumentDefaultValuesProvider.GetVATOriginCurrency(TRR.O2I.Common.Core.SupplierCountry,DataAccess.Services.IServiceManager)">
            <summary>
            Gets VAT Origin country currency
            </summary>
            <param name="supplierCountry"></param>
            <param name="serviceManager"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Defaulting.InvoicingDocumentDefaultValuesProvider.GetDefaultSupplierVATID(TRR.O2I.Common.Core.SupplierCountry,System.Int32,DataAccess.Services.IServiceManager)">
            <summary>
            Gets Default Supplier VAT ID
            </summary>
            <param name="country"></param>
            <param name="supplierId"></param>
            <param name="serviceManager"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceFromGRsWithPendingInvoiceException">
            <summary>
            Is thrown when it's impossible to create invoice from GR due to pending invoice existance.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceFromGRsWithPendingInvoiceException.#ctor(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice})">
            <summary>
            public constructor
            </summary>
            <param name="invoices"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceFromGRsWithPendingInvoiceException.Invoices">
            <summary>
            Gets or sets pending invoice
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableAmountForCreditInvoicingException">
            <summary>
            Thrown during Invoice creation from PO with no lines with available amount for invoicing
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableAmountForCreditInvoicingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableQuantityForDebitInvoicingException"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableQuantityForCreditInvoicingException">
            <summary>
            Thrown during Invoice creation from PO with no lines with available amount for invoicing
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableQuantityForCreditInvoicingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableQuantityForDebitInvoicingException"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableQuantityForInvoicing">
            <summary>
            Thrown during Invoice creation from GR (GR Netting is on) with no lines having available quantity for invoicing
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableQuantityForInvoicing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableQuantityForDebitInvoicingException"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemDescriptor">
            <summary>
            GoodsReceiptItemDescriptor
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemDescriptor.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceiptItem,TRR.O2I.BusinessLogic.BusinessEntity.Enums.GoodsReceiptCategory)">
            <summary>
            public constructor.
            </summary>
            <param name="item"></param>
            <param name="relatedGRCategory"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemDescriptor.Item">
            <summary>
            Actual Item
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemDescriptor.RelatedGRCategory">
            <summary>
            Related GR Category
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemsCategoryDescriptor">
            <summary>
            GoodsReceiptCategoryDescriptor
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemsCategoryDescriptor.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Enums.GoodsReceiptCategory)">
            <summary>
            Public constructor.
            </summary>
            <param name="category"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemsCategoryDescriptor.Category">
            <summary>
            Gets or sets Category.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemsCategoryDescriptor.FilterItems">
            <summary>
            Gets or sets a value indicating whether items should be filtered by category.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GRNetter">
            <summary>
            Encapsulates GR Netting logic.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GRNetter.CalculateInvoiceType(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemDescriptor})">
            <summary>
            Calculates invoice type
            </summary>
            <param name="grItems"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GRNetter.GetNettedValue(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemDescriptor})">
            <summary>
            Gets netted value.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.LinkComposer">
            <summary>
             Link Composer
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.LinkComposer.ComposeLinkToInvoice(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
             Composes a link to the invocie details page.
            </summary>
            <param name="invoice"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.LinkComposer.ComposeLinkToInvoice(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Descriptors.DocumentGeneralInformation)">
            <summary>
             Composes a link to the invocie details page.
            </summary>
            <param name="invoice"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.LinkComposer.ComposeLinkToEntrySheet(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet)">
            <summary>
             Composes a link to the entry sheet details page.
            </summary>
            <param name="entrySheet"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.LinkComposer.ComposeLinkToOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
             Composes a link to the order details page.
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.LinkComposer.ComposeLinkToChangeOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
             Composes a link to the change order details page.
            </summary>
            <param name="changeOrder"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.LinkComposer.ComposeLinkToASNSearch(System.String,System.String,System.Int32)">
            <summary>
             Composes a link to the ASN seach page using some filters.
            </summary>
            <param name="text"></param>
            <param name="poNumber"></param>
            <param name="asnStatusFk"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.LinkComposer.ComposeLink(System.Int32,System.Int32,TRR.O2I.BusinessLogic.BusinessEntity.Enums.DocumentType,System.String)">
            <summary>
             Composes a link to the document details page
            </summary>
            <param name="docId">Document ID</param>
            <param name="buyerId">Buyer ID</param>
            <param name="docType">Document Type</param>
            <param name="innerText">Link Text</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.LinkComposer.GetHrefToNonPOInvoicesMassUploadTemplate(TRR.O2I.Common.Core.SupplierCountry,System.Boolean)">
            <summary>
             Gets a href to non-PO invoices mass-upload template.
            </summary>
            <param name="country"></param>
            <param name="includePrefix"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.LinkComposer.ComposeLinkToNonPOInvoicesMassUploadTemplate(TRR.O2I.Common.Core.SupplierCountry,System.String)">
            <summary>
            Composes a link to non-PO invoices mass-upload template.
            </summary>
            <param name="country"></param>
            <param name="innerText"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.DocumentNumberGeneratorsFactory">
            <summary>
             Factory for Document Number Generators
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.DocumentNumberGeneratorsFactory.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,DataAccess.Services.IServiceManager)">
            <summary>
             Public Constructor
            </summary>
            <param name="buyerSettings"></param>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.DocumentNumberGeneratorsFactory.GetDocumentNumberGenerator(TRR.O2I.BusinessLogic.BusinessEntity.Enums.DocumentType,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
             Gets a number generator
            </summary>
            <param name="documentType">Docuemnt Type</param>
            <param name="orderTypeKey">Order Type Key</param>
            <returns>Number Generator</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.DocumentNumberGeneratorsFactory.GetDocumentNumberGenerator(TRR.O2I.BusinessLogic.BusinessEntity.Enums.DocumentType,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey,System.Nullable{TRR.O2I.Common.Core.SupplierCountry})">
            <summary>
             Gets a number generator
            </summary>
            <param name="documentType">Docuemnt Type</param>
            <param name="orderTypeKey">Order Type Key</param>
            <param name="supplierCountry">Supplier country</param>
            <returns>Number Generator</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.DocumentNumberGeneratorsFactory.GetInvoiceLineNumberGenerator(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
             Gets a invoice line number generator
            </summary>
            <param name="invoice">Invoice</param>
            <returns>Invoice Line Number Generator</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.DocumentNumberGeneratorsFactory.GetInvoiceSublineNumberGenerator(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ParentInvoiceLine)">
            <summary>
             Gets a invoice subline number generator
            </summary>
            <param name="line">Invoice parent line.</param>
            <returns>Invoice Subline Number Generator</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.DocumentNumberGeneratorsFactory.GetEntrySheetSublineNumberGenerator(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Gets a number generator for entry sheet subline.
            </summary>
            <param name="existingNumbers"></param>
            <param name="startingCandidate"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.IDocumentNumberGenerator">
            <summary>
            Represents document number generation logic
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.IDocumentNumberGenerator.GenerateDocumentNumber">
            <summary>
             Gets a new document number
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent">
            <summary>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent.#ctor(System.Nullable{System.Decimal},System.Decimal)">
            <summary>
             Initializes TaxTotalPerPercent instance
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent.#ctor(System.Nullable{System.Decimal},System.Decimal,System.Int32)">
            <summary>
             Initializes TaxTotalPerPercent instance
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent.#ctor(System.Nullable{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent"/> class.
            </summary>
            <param name="percent">The percent.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent.#ctor(System.Nullable{System.Decimal},System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent"/> class.
            </summary>
            <param name="percent">The percent.</param>
            <param name="totalTax">The total tax.</param>
            <param name="taxableAmount">The taxable amount.</param>
            <param name="taxesCount">The count of taxes.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent.TaxableAmount">
            <summary>
            Gets or sets the taxable amount.
            </summary>
            <value>The taxable amount.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent.Percent">
            <summary>
             Gets or sets percent property
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent.TotalTax">
            <summary>
             Gets or sets total tax property
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent.TaxesCount">
            <summary>
             Gets or sets taxes count.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercent.FirstTaxForInvoice">
            <summary>
            Gets or sets the first tax for invoice.
            </summary>
            <value>The first tax for invoice.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercentCalculator">
            <summary>
            Aggregated by percent tax amount calculator
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercentCalculator.CalculateTaxTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument)">
            <summary>
            Calculates tax totals grouped by pecent
            </summary>
            <param name="doc">The invoicing doc.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercentCalculator.CalculateTaxTotals(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,System.Boolean)">
            <summary>
            Calculates tax totals grouped by pecent
            </summary>
            <param name="doc">The invoicing doc.</param>
            <param name="calculateFreightChargeTaxes"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.TaxTotalPerPercentCalculator.CalculateTaxTotals(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine})">
            <summary>
            Calculates the tax totals.
            </summary>
            <param name="lines">The lines.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.IEntrySheetResponseValidationBuilder">
            <summary>
            SesRespinse business entity builder.
            Applies structure validation.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.IEntrySheetResponseValidationBuilder.AddHeader(TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow)">
            <summary>
            Adds the header.
            </summary>
            <param name="xmlRow">The XML row.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.IEntrySheetResponseValidationBuilder.AddXmlIsland(System.String)">
            <summary>
            Adds the XML island.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.IEntrySheetResponseValidationBuilder.AddStructuredNote(TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.StructuredNoteXmlRow)">
            <summary>
            Adds structured note
            </summary>
            <param name="structuredNoteXmlRow"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.IEntrySheetResponseValidationBuilder.AddLine(TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseLineXmlRow)">
            <summary>
            Adds the line.
            </summary>
            <param name="lineXmlRow">The line XML row.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.IEntrySheetResponseValidationBuilder.AddSubline(System.String,TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseLineXmlRow)">
            <summary>
            Adds the subline.
            </summary>
            <param name="parentLineNumber">The parent line number.</param>
            <param name="lineXmlRow">The line XML row.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.IEntrySheetResponseValidationBuilder.GetResponse">
            <summary>
            Gets the response.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.EntrySheetResponseValidationBuilder">
            <summary>
            SesRespinse business entity builder.
            Applies structure validation.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.EntrySheetResponseValidationBuilder.AddHeader(TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow)">
            <summary>
            Adds the header.
            </summary>
            <param name="xmlRow">The XML row.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.EntrySheetResponseValidationBuilder.AddXmlIsland(System.String)">
            <summary>
            Adds the XML island.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.EntrySheetResponseValidationBuilder.AddLine(TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseLineXmlRow)">
            <summary>
            Adds the line.
            </summary>
            <param name="lineXmlRow">The line XML row.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.EntrySheetResponseValidationBuilder.AddStructuredNote(TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.StructuredNoteXmlRow)">
            <summary>
            Adds structured note
            </summary>
            <param name="structuredNoteXmlRow"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.EntrySheetResponseValidationBuilder.AddSubline(System.String,TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseLineXmlRow)">
            <summary>
            Adds the subline.
            </summary>
            <param name="parentLineNumber">The parent line number.</param>
            <param name="lineXmlRow">The line XML row.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.EntrySheetResponseValidationBuilder.GetResponse">
            <summary>
            Gets the response.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.EntrySheetResponseXmlMapper">
            <summary>
            Maps data from xml to Service Entry Sheet Response business entity
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.EntrySheetResponseXmlMapper.#ctor(TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.ISesResponseXmlParser,TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.IEntrySheetResponseValidationBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.EntrySheetResponseXmlMapper"/> class.
            </summary>
            <param name="parser">The parser.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ServiceEntrySheetResponseBusinessLogic.EntrySheetResponseXmlMapper.Parse(System.String)">
            <summary>
            Parses the specified XML.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.BusinessEntitiesCollectionFormatter">
            <summary>
            Convert object with IBusinessEntityCollection interface into 
            object with IList interface.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.BusinessEntitiesCollectionFormatter.Format(System.Object)">
            <summary>
            Convert object with IList interface into 
            object with IBusinessEntityCollection interface.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object with IBusinessEntityCollection interface.</param>
            <returns>Formatted object with IList interface.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.BusinessEntitiesCollectionFormatter.Parse(System.Object)">
            <summary>
            Restore object with IList interface from 
            object with IBusinessEntityCollection interface.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formatted object with IList interface.</param>
            <returns>Object with IBusinessEntityCollection interface.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.BusinessEnumFormatterBase`2">
            <summary>
            Base class for creating formatters that accepts a business entities enumeration 
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <typeparam name="TMapping">The type of the mapping.</typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.BusinessEnumFormatterBase`2.#ctor(TRR.O2I.DataAccess.Core.DBEnumType)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.BusinessEnumFormatterBase`2"/> class.
            </summary>
            <param name="enumType">Type of the enum.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.BusinessEnumFormatterBase`2.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.BusinessEnumFormatterBase`2.Parse(System.Object)">
            <summary>
            Restore object from formatted data.
            </summary>
            <param name="formattedData">Formatted data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.DateTimeMinValueToBoolFormatter">
            <summary>
            Summary description for NullToBoolFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DateTimeMinValueToBoolFormatter.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DateTimeMinValueToBoolFormatter.Parse(System.Object)">
            <summary>
            Restore Decimal object from short date string.
            string.Empty converts into Decimal.MinValue.
            </summary>
            <param name="formattedData">Presentation value to be parsed.</param>
            <returns>Domain value parsed from the user value</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PurposeCodedFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PurposeCodedFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PurposeCodedFormatter"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.RAStatusFormatter">
            <summary>
            Remittance Advice Status formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RAStatusFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeVisibilityFormatter">
            <summary>
            Requested Response Code formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeVisibilityFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeHumanFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeVisibilityFormatter.#ctor(TRR.O2I.Common.Core.Localization.ILocalizationManager,DataAccess.Services.IEnumGateway)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeHumanFormatter"/> class.
            </summary>
            <param name="localizationManager">The localization manager.</param>
            <param name="enumGateway">The enum gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeVisibilityFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeVisibilityFormatter.Parse(System.Object)">
            <summary>
            Restore object from formatted data.
            </summary>
            <param name="formattedData">Formatted data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ESBusinessStatusFormatter">
            <summary>
            Convert Entry Sheet status into status name.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ESStatusFormatter">
            <summary>
            Convert ES status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ESStatusFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ESBusinessStatusFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            If enum code == null (int.MinValue) empty string is being returned.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.SesStatusIsPendingFormatter">
            <summary>
            Convert Invoice sent status into boolean representation.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.SesStatusIsPendingFormatter.Format(System.Object)">
            <summary>
            Convert Invoice sent status into boolean representation.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.SesStatusIsPendingFormatter.Parse(System.Object)">
            <summary>
            bool to Invoice status convertation not supported by formatter.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.SingleNoteFormatter">
            <summary>
            SingleNote formatter. Injects links and line breaks tags.
            Output is safe html.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.SingleNoteFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.Formatters.SingleNoteFormatter.Parse(System.Object)">
            <summary>
            Restore object from formatted data.
            </summary>
            <param name="formattedData">Formatted data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EmptyBankAccountInformationProvider">
            <summary>
            Empty Bank Account Information Provider.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IDefaultBankAccountInformationProvider">
            <summary>
            Default Bank Account Information data provider
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IDefaultBankAccountInformationProvider.SetupDefaultValues(TRR.O2I.BusinessLogic.BusinessEntity.Entities.PaymentInstruction)">
            <summary>
            Setups the default values for Bank Account Information fields.
            </summary>
            <param name="paymentInstruction">The payment instruction.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EmptyBankAccountInformationProvider.SetupDefaultValues(TRR.O2I.BusinessLogic.BusinessEntity.Entities.PaymentInstruction)">
            <summary>
            Setups the default values for Bank Account Information fields.
            Leaves bank account data fields epmty/unchanged
            </summary>
            <param name="paymentInstruction">The payment instruction.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntityUpdateRulesRunner`1">
            <summary>
            EntityUpdateRulesRunner
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntityUpdateRulesRunner`1.#ctor(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.IEntityUpdateRule{`0}})">
            <summary>
            Public constructor.
            </summary>
            <param name="rules"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntityUpdateRulesRunner`1.Run(`0)">
            <summary>
            Runs rules agains the entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntityUpdateRulesRunner`1.Run(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Runs rules against the entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.EntrySheetLinesUpdateRule">
            <summary>
             Encapsulates logic of updating Entry Sheets lines according to some rule.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.EntrySheetLinesUpdateRule.#ctor(TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntityUpdateRule{TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetLine})">
            <summary>
            Public constructor.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.EntrySheetLinesUpdateRule.IsUpdateRequired(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet)">
            <summary>
            Gets a value indicating whether it's required to update entity status.
            </summary>
            <param name="entrySheet"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.EntrySheetLinesUpdateRule.UpdateEntity(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet)">
            <summary>
            Updates entity status.
            </summary>
            <param name="entrySheet"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkDeletedEntrySheetLineRule">
            <summary>
            Encapsulates logic of updating ES line status to Deleted when CO comes with deleted related line.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkDeletedEntrySheetLineRule.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
             Public constructor
            </summary>
            <param name="co">Change Order</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkDeletedEntrySheetLineRule.IsUpdateRequired(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetLine)">
            <summary>
            Gets a value indicating whether it's required to update entity status.
            </summary>
            <param name="entrySheetLine"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkDeletedEntrySheetLineRule.UpdateEntity(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetLine)">
            <summary>
            Updates entity status.
            </summary>
            <param name="entrySheetLine"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkReaddedEntrySheetLineRule">
            <summary>
             Encapsulates logic of updating Entry Sheet line status when CO comes with new lines.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkReaddedEntrySheetLineRule.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
             Public constructor.
            </summary>
            <param name="co"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkReaddedEntrySheetLineRule.IsUpdateRequired(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetLine)">
            <summary>
            Gets a value indicating whether it's required to update entity status.
            </summary>
            <param name="entrySheetLine"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkReaddedEntrySheetLineRule.UpdateEntity(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetLine)">
            <summary>
            Updates entity status.
            </summary>
            <param name="entrySheetLine"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkRejectedEntrySheetLineRule">
            <summary>
            Encapsilates logic of updating entry sheet line status to Rejected when user send POR/COR with rejected related line.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkRejectedEntrySheetLineRule.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
             Public constructor
            </summary>
            <param name="responseDocument">POR/COR</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkRejectedEntrySheetLineRule.IsUpdateRequired(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetLine)">
            <summary>
            Gets a value indicating whether it's required to update entity status.
            </summary>
            <param name="entrySheetLine"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkRejectedEntrySheetLineRule.UpdateEntity(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetLine)">
            <summary>
            Updates entity status.
            </summary>
            <param name="entrySheetLine"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkUnrejectedEntrySheetLineRule">
            <summary>
             Encapsulates logic of updating entry sheet line status when order response line turn un-rejected.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkUnrejectedEntrySheetLineRule.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Public constructor.
            </summary>
            <param name="responseDocument"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkUnrejectedEntrySheetLineRule.IsUpdateRequired(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetLine)">
            <summary>
            Gets a value indicating whether it's required to update entity status.
            </summary>
            <param name="entrySheetLine"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.MarkUnrejectedEntrySheetLineRule.UpdateEntity(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetLine)">
            <summary>
            Updates entity status.
            </summary>
            <param name="entrySheetLine"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.RecalculateEntrySheetLinesAvailableAmountRule">
            <summary>
             Encapsulates logic of updating entry sheet line AvailableAmount when CO comes.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.RecalculateEntrySheetLinesAvailableAmountRule.#ctor(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLineBase},DataAccess.Services.IServiceManager)">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.RecalculateEntrySheetLinesAvailableAmountRule.IsUpdateRequired(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet)">
            <summary>
            Gets a value indicating whether it's required to update entity status.
            </summary>
            <param name="entrySheet"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.EntrySheetRules.RecalculateEntrySheetLinesAvailableAmountRule.UpdateEntity(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet)">
            <summary>
            Updates entity status.
            </summary>
            <param name="entrySheet"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorMessageReporter">
            <summary>
            Represent a helper class for composing structured validation messages.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorMessageReporter.ReportMessage(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,System.Int32,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Reports a validation message for Invoicing document line/sub-line.
            </summary>
            <param name="line"></param>
            <param name="parentLine"></param>
            <param name="messageId"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorMessageReporter.ComposeValidationMessageForLine(System.String,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine)">
            <summary>
            Composes a validation message for invoicing document parent line.
            </summary>
            <param name="message"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorMessageReporter.ComposeValidationMessageForSubLineWithAReferenceToParentLine(System.String,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine)">
            <summary>
            Composes a validation message for invociing document sub-line with a reference to the parent line.
            </summary>
            <param name="message"></param>
            <param name="parentLine"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorMessageReporter.ComposeValidationMessageForSubLine(System.String,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine)">
            <summary>
            Composes a validation message for sub-line.
            </summary>
            <param name="message"></param>
            <param name="subline"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorsFactory">
            <summary>
             Factory for entity validators
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorsFactory.#ctor(DataAccess.Services.IServiceManager,System.Int32,System.Nullable{TRR.O2I.Common.Core.SupplierCountry})">
            <summary>
             Public constructor
             </summary>
             <param name="serviceManager">The service manager.</param>
             <param name="buyerId">The buyer id.</param>
             <param name="supplierCountry">The supplier country.</param>
             <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorsFactory.#ctor(DataAccess.Services.IServiceManager,System.Int32,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings)">
            <summary>
            Public constructor
            </summary>
            <param name="serviceManager"></param>
            <param name="buyerId"></param>
            <param name="businessSettings"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidatorsFactory.EntrySheet">
             <summary>
             Gets Entry Sheet Validators factory
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntrySheet.EntrySheetValidatorsFactory">
            <summary>
             Entry Sheet validators factory
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntrySheet.EntrySheetValidatorsFactory.#ctor(DataAccess.Services.IServiceManager,TRR.O2I.Common.Core.SupplierCountry,TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,System.Int32)">
            <summary>
             Public constructor
            </summary>
            <param name="serviceManager"></param>
            <param name="supplierCountry"></param>
            <param name="buyerSettings"></param>
            <param name="buyerId"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntrySheet.EntrySheetValidatorsFactory.CreateEntrySheetValidator(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetType,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
             Creates validator for Entry Sheet
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntrySheet.EntrySheetValidatorsFactory.CreateEntrySheetParentLineValidator(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetType)">
            <summary>
            Validator for ES parent line
            </summary>
            <param name="entrySheetType"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentTotalsValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.InvoicingDocument.Rules.InvoicingDocumentPaymentInstructionValidationRule.Validate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument,TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary)">
            <summary>
            Performs validation agains the rule.
            </summary>
            <param name="entity"></param>
            <param name="summary"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary">
            <summary> 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary.#ctor(System.Object)">
            <summary>
             Public constructor
            </summary>
            <param name="validatingEntity"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary.CombineValidationMessages">
            <summary>
             Combines all validation messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary.CombineValidationMessagesWithEntities">
            <summary>
            Combines validation messages and validated entites.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary.IsValid">
            <summary>
             Get or sets a value indicating whether the validated entity is valid
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary.ValidatedEntity">
            <summary>
            Gets or sets an entity the summary was created for.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary.InvalidProperties">
            <summary>
             Gets invalid properties.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntityValidators.ValidationSummary.NestedSummaries">
            <summary>
             Gets nested validation summaries
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidationMessagesContainer">
            <summary>
             An entity containing validated entity and validation messages for the entity.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidationMessagesContainer.Entity">
            <summary>
             Entity which was validated
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntityValidators.EntityValidationMessagesContainer.Messages">
            <summary>
             Validation messages for the entity
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DraftInvoiceManager">
            <summary>
            Draft Invoice Manager.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DraftInvoiceManager.RegisterDrafts(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice})">
            <summary>
            Registers the drafts.
            </summary>
            <param name="draftInvoices">The draft invoices.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DraftInvoiceManager.DropAll">
            <summary>
            Drops all draft Invoices.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DraftInvoiceManager.GetDraft(System.Int32)">
            <summary>
            Gets the draft.
            </summary>
            <param name="invoiceId">The invoice id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DraftInvoiceManager.StoreDraft(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Stores the draft.
            </summary>
            <param name="invoice">The invoice.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DraftInvoiceManager.IsDraftPendingInvoice(System.Int32)">
            <summary>
            Determines whether [is pending draft invoice] [the specified invoice id].
            </summary>
            <param name="invoiceId">The invoice id.</param>
            <returns>
            	<c>true</c> if [is pending draft invoice] [the specified invoice id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DraftInvoiceManager.RemoveDraft(System.Int32)">
            <summary>
            Removes the draft.
            </summary>
            <param name="invoiceId">The invoice id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DraftInvoiceManager.GetAllPendingDrafts">
            <summary>
            Gets all peding drafts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DraftInvoiceManager.GetAll">
            <summary>
            Gets all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DraftInvoiceManager.IsDuplicatedWithinUploaded(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocument)">
            <summary>
            Determines whether [is duplicated within uploaded] [the specified invoice].
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
              <c>true</c> if [is duplicated within uploaded] [the specified invoice]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.EntrySheetLineTaxCanadaProcessor">
            <summary>
            Invoice line tax processor for Canada
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.EntrySheetLineTaxProcessor">
            <summary>
            Invoice Line Tax Processor
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.TaxCollectionProcessor">
            <summary>
            Tax collection processor
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.ICollectionProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.ICollectionProcessor.Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.ICollectionProcessor.GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.TaxCollectionProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.TaxCollectionProcessor"/> class.
            </summary>
            <param name="mapName">Name of the map.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.TaxCollectionProcessor.GenerateXml(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip})">
            <summary>
            Generates the XML.
            </summary>
            <param name="taxesFlip">The taxes flip.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.TaxCollectionProcessor.Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.TaxCollectionProcessor.GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EntrySheetLineTaxProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.EntrySheetLineTaxProcessor"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EntrySheetLineTaxProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.EntrySheetLineTaxProcessor"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EntrySheetLineTaxProcessor.Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.EntrySheetLineTaxCanadaProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.EntrySheetLineTaxCanadaProcessor"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.TaxSummaryCanadaProcessor">
            <summary>
            Aggregated by category taxes summary processor for Canada
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.TaxSummaryCanadaProcessor.Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.TaxSummaryCanadaProcessor.GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Merging.EntrySheetMerger.Merge(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet)">
            <summary>
            Overrides all data in destination entry sheet with data from source entre sheet
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCopyingValidationMessagesReporter">
            <summary>
            Entry Sheet Copying Validation Messages Reporter
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCreationValidationMessagesReporter">
            <summary>
             Entry Sheet Creation Validation Messages Reporter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCreationValidationMessagesReporter.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetType)">
            <summary>
             public constructor
            </summary>
            <param name="entrySheetType"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCreationValidationMessagesReporter.ReportPendingInvoicingDocumentsException(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet}})">
            <summary>
             Reports a validation message that there're some pending ES so it's impossible to create a new one.
            </summary>
            <param name="lineNumbersAndESNumbers"></param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCreationValidationMessagesReporter.ReportNotEnoughAvailableAmountException">
            <summary>
             Reports a validation message that there're no lines with a positive available amount for an ES creation.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCreationValidationMessagesReporter.ReportAllThePOLinesAreDeletedOrRejectedException">
            <summary>
             Reports a validation message that it's impossible to create an ES from order as all the lines are rejected or deleted.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCreationValidationMessagesReporter.ReportDuplicateTESException(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet}})">
            <summary>
            Report a validation message that there's a pending TES
            </summary>
            <param name="pendingEntrySheetsForOrderLines"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCreationValidationMessagesReporter.ReportDuplicateSESException(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet}})">
            <summary>
            Report a validation message that there's a pending SES
            </summary>
            <param name="pendingEntrySheetsForOrderLines"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCreationValidationMessagesReporter.ReportDuplicateException(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet}},System.String,System.Int32)">
            <summary>
            Reports a validation messages that there're some pending ES.
            </summary>
            <param name="pendingEntrySheetsForOrderLines"></param>
            <param name="defaultMessage"></param>
            <param name="messageId"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCopyingValidationMessagesReporter.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetType)">
            <summary>
             Public constructor
            </summary>
            <param name="entrySheetType"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCopyingValidationMessagesReporter.ReportDuplicateSESException(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet}})">
            <summary>
            Report a validation message that there's a pending SES
            </summary>
            <param name="pendingEntrySheetsForOrderLines"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.EntrySheetCopyingValidationMessagesReporter.ReportDuplicateTESException(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet}})">
            <summary>
            Report a validation message that there's a pending TES
            </summary>
            <param name="pendingEntrySheetsForOrderLines"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoicingDocumentCreationExceptionCatcher`1">
            <summary>
             Catches exceptions while entry sheet creation
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoicingDocumentCreationExceptionCatcher`1.#ctor(TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.IInvoicingDocumentCreationValidationMessagesReporter{`0})">
            <summary>
             public constructor
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoicingDocumentCreationExceptionCatcher`1.Execute(TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.ExecuteDelegate)">
            <summary>
             Executes the execute delegate specified.
            </summary>
            <param name="executeDelegate"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Exceptions.CantCreateInvoicingdocumentBecauseAllTheLinesAreDeletedOrRejected">
            <summary>
            Indicates that all the po lines are rejected or deleted.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Exceptions.CantCreateEntrySheetBecauseOfPendingChangeOrderException">
            <summary>
            Indicates that there's a pending CO for PO so it's impossible to create an ES from it.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Exceptions.CantCreateEntrySheetBecauseOfPendingChangeOrderException.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
             Public constructor
            </summary>
            <param name="pendingChangeOrder"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Exceptions.CantCreateEntrySheetBecauseOfPendingChangeOrderException.PendingChangeOrder">
            <summary>
             Gets or sets the CO Number
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.NameValuePairProcessor">
            <summary>
            Processes collection of NameValuePairs
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.NameValuePairProcessor.Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.NameValuePairProcessor.GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.NameValueSetProcessor">
            <summary>
            processes collection of NameValueSets
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.NameValueSetProcessor.Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.NameValueSetProcessor.GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.ServiceDateProcessor">
            <summary>
            Flips Service Dates
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.ServiceDateProcessor.Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.ServiceDateProcessor.GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.ExternalProcessors.FITransferOrCardInfoSwitchProcessor">
            <summary>
            Flips Financial Institution data into xml if any, or CardInfo otherwise
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.IExternalProcessor">
            <summary>
            Extenral flipping processor
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.IExternalProcessor.Process(System.Object[])">
            <summary>
            Do processing with the specified parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.ExternalProcessors.FITransferOrCardInfoSwitchProcessor.Process(System.Object[])">
            <summary>
            Do processing with the specified parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity">
            <summary>
             Attachmnet Flipping Entity
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity.#ctor(TRR.O2I.DataAccess.Entities.IAttachmentRowBase)">
            <summary>
             Public constructor
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Attachment)">
            <summary>
            Public constructor
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity.IsInbound">
            <summary>
            Gets or sets a flag indicating whether the attachment is inbound.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity.ID">
            <summary>
            Gets or sets the ID of the attachment
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity.AttachmentFileName">
            <summary>
            Gets or sets attachment file name
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity.AttachmentPurpose">
            <summary>
            Gets or sets attachment purpose
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity.AttachmentDescription">
            <summary>
            Gets or sets attachment description
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity.AttachmentTitle">
            <summary>
            Gets or sets attachment title.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.NameValueSetFlip">
            <summary>
            NameValueSet
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.NameValueSetFlip.NameValueSetName">
            <summary>
            Gets or sets Name Value Set Name
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.NameValueSetFlip.NameValuePairs">
            <summary>
            Gets or sets NameValuePairs
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.ServiceDateFlip">
            <summary>
            Service Date
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.ServiceDateFlip.Date">
            <summary>
            Gets or sets Service Date
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.ServiceDateFlip.DateQualifierCode">
            <summary>
            Gets or sets DateQualifierCode
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxPerCategoryFlip">
            <summary>
            Used for flipping aggregated taxes information for Canada
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMapBuilder.ParserParametersString(System.String)">
            <summary>
            Parsers the parameters string like "paramName1=paramValue1;paramName2=paramValue2"
            </summary>
            <param name="parametersString">The parameters string.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.LineItemTypeCodedOtherFormatter">
            <summary>
            Line Item Type Coded Other Formatter
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.FlippingFormatter">
            <summary>
            Base class for all enum formatters.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.FlippingFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.FlippingFormatter.Parse(System.Object)">
            <summary>
            Restore Enum code from it's name.
            </summary>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.LineItemTypeCodedOtherFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.ParentOrChildItemTypeOtherFormatter">
            <summary>
            Line Item Type Coded Other formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.ParentOrChildItemTypeOtherFormatter.Format(System.Object)">
            <summary>
            Returns "ParentItem" string if line being formatted is Parent line, null otherwise
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.SESNumberFormatter">
            <summary>Returns SES Number based on SES ID</summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.SESNumberFormatter.Format(System.Object)">
            <summary>Returns SES Number based on SES ID</summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.LineItemReferenceNumberConstantFormatter">
            <summary>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.LineItemReferenceNumberConstantFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.LineItemReferenceNumberConstantFormatter.Parse(System.Object)">
            <summary>
            Restore object from formatted data.
            </summary>
            <param name="formattedData">Formatted data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.StringCAFormatter">
            <summary>
            Output of formatter is "CA" string always (CA means Canada)
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.StringCAFormatter.Format(System.Object)">
            <summary>
            Retuns "CA" string
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.StringNAFormatter">
            <summary>
            Output of formatter is "N/A" string always
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.StringNAFormatter.Format(System.Object)">
            <summary>
            Retuns "N/A" string
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.EntrySheetAttachmentsFormatter">
            <summary>
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.AttachmentsFormatterXcbl40">
            <summary>
            
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.AttachmentsFormatter">
            <summary>
            Generates Attachments xml
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.AttachmentsFormatter.StartTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.AttachmentsFormatter.EndTag">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AttachmentsFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AttachmentsFormatter.GetEntitiesToFlip(System.Object)">
            <summary>
            Get attachment flipping entities.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AttachmentsFormatter.GetXml(System.Collections.Generic.ICollection{TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity})">
            <summary>
            Gets the XML.
            </summary>
            <param name="rows">The rows.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AttachmentsFormatter.GenerateXml(System.Text.StringBuilder,TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity)">
            <summary>
            Generates the XML.
            </summary>
            <param name="xmlDoc">The XML doc.</param>
            <param name="attachment">The attachment flipping entity.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AttachmentsFormatterXcbl40.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.AttachmentsFormatterXcbl40"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AttachmentsFormatterXcbl40.GenerateXml(System.Text.StringBuilder,TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity)">
            <summary>
            Generates the XML.
            </summary>
            <param name="xmlDoc">The XML doc.</param>
            <param name="attachment"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EntrySheetAttachmentsFormatter.GetEntitiesToFlip(System.Object)">
            <summary>
            Get attachment flipping entities.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.IMappingParameters">
            <summary>
            Indicator interface.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.MappingType">
            <summary>
            Mapping type enumeration
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Flipping.MappingType.Simple">
            <summary>
            Simple mapping from source to target
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Flipping.MappingType.Collection">
            <summary>
            Mapping of collection
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Flipping.MappingType.External">
            <summary>
            Mapping of output of external processor
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.InvoiceHeaderCreator">
            <summary>
            Invoice header creator
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceHeaderCreator.#ctor(TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.InvoiceHeaderCreator"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceHeaderCreator.Create(TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy)">
            <summary>
            Creates the invoice header and initializes it using specified create strategy
            </summary>
            <param name="createStrategy">The create strategy.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Merging.InvoiceMerger`1">
            <summary>
            Invoice Merger
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Merging.InvoiceMerger`1.Merge(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Overrides all data in destination invoice with data from source invoice
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.InvoiceStateCalculator">
            <summary>
            Invoice state calculator
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceStateCalculator.IsConsistent(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Determines whether the specified invoice is consistent.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is consistent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceStateCalculator.IsExpired(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Determines whether the specified invoice is expired.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is expired; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceStateCalculator.IsInactiveLocked(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Determines whether the specified invoice is locked.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is locked; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceStateCalculator.IsFinalInvoiceSentLocked(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Determines whether [is final invoice sent locked] [the specified invoice].
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if [is final invoice sent locked] [the specified invoice]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceStateCalculator.GetPendingChangeOrders(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Gets the pending change orders.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceStateCalculatorImpl.IsConsistent(TRR.O2I.BusinessLogic.Managers.InvoiceStateInfo)">
            <summary>
            Determines whether the specified invoice is consistent.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is consistent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceStateCalculatorImpl.IsExpired(TRR.O2I.BusinessLogic.Managers.InvoiceStateInfo)">
            <summary>
            Determines whether the specified invoice is expired.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is expired; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceStateCalculatorImpl.IsInactiveLocked(TRR.O2I.BusinessLogic.Managers.InvoiceStateInfo)">
            <summary>
            Determines whether the specified invoice is locked.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is locked; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceStateCalculatorImpl.IsFinalInvoiceSentLocked(TRR.O2I.BusinessLogic.Managers.InvoiceStateInfo)">
            <summary>
            Determines whether [is final invoice sent locked] [the specified invoice].
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if [is final invoice sent locked] [the specified invoice]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceStateCalculatorImpl.GetPendingChangeOrders(TRR.O2I.BusinessLogic.Managers.InvoiceStateInfo)">
            <summary>
            Gets the pending change orders.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategy">
            <summary>
            Goods receipt items to invoice import strategy.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategy.GetReceiptItems(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt},TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemsCategoryDescriptor,DataAccess.Services.IServiceManager)">
            <summary>
            Gets related goods receipt items.
            </summary>
            <param name="goodsReceipts">The goods receipts.</param>
            <param name="categoryDescriptor">The category.</param>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategy.InitLines(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemDescriptor},System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine})">
            <summary>
            Inits the lines.
            </summary>
            <param name="items"></param>
            <param name="orderLines">The purchase order lines.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategy.ExecutePostImportActions(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Executes post-import actions.
            </summary>
            <param name="invoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategy.Check(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine},System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order})">
            <summary>
            Checks the goods receipt.
            </summary>
            <param name="orderLines"></param>
            <param name="orders">The orders.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategy.Check(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Checks invoice.
            </summary>
            <param name="invoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategy.GetResultingInvoiceType(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemDescriptor})">
            <summary>
            Gets the type of the invoice.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.Strategies.GenericItemsImportStrategy.ExecutePostImportActions(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Updates invoice lines.
            </summary>
            <param name="invoice"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.Strategies.GenericItemsImportStrategy.Check(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Checks invoice.
            </summary>
            <param name="invoice"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategyFactory">
            <summary>
            Goods Receipt Items import strategy facotory base interface
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategyFactory.Create(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Enums.GoodsReceiptCategory,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Creates import strategy based on goods receipt category and order type.
            </summary>
            <param name="manager">The manager.</param>
            <param name="category">The category.</param>
            <param name="orderTypeKey">The order type key.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategyFactory.CreateReimportStrategy(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Enums.GoodsReceiptCategory,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Creates the reimport strategy.
            </summary>
            <param name="manager">The manager.</param>
            <param name="category">The category.</param>
            <param name="orderTypeKey">The order type key.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.IOrderLinesImportStrategy">
            <summary>
            Order Lines To Invoice import strategy
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IOrderLinesImportStrategy.Filter(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine},TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.IAvailableValueCalculation,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order})">
            <summary>
            Filters the specified lines to import.
            </summary>
            <param name="linesToImport">The lines to import.</param>
            <param name="availableValueCalculation">Available value calculation.</param>
            <param name="orders"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IOrderLinesImportStrategy.Check(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine},System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order})">
            <summary>
            Checks the specified order lines.
            </summary>
            <param name="orderLines">The filtered lines.</param>
            <param name="orders">The orders related to lines.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IOrderLinesImportStrategy.InitLines(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine})">
            <summary>
            Inits the lines.
            </summary>
            <param name="orderLines">The order line list.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IOrderLinesImportStrategy.UpdateInvoiceLines(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentParentLine},TRR.O2I.BusinessLogic.Managers.BusinessEntity.Invoicing.IAvailableValueCalculation,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Updates the invoice lines.
            </summary>
            <param name="lines">The lines.</param>
            <param name="availableValueCalculation">The available amount calculation.</param>
            <param name="order">The order.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.IOrderLinesImportStrategyFactory">
            <summary>
            Order Lines to Invoice Import strategy factory inteface
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IOrderLinesImportStrategyFactory.Create(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Creates import strategy based on the order type key.
            </summary>
            <param name="manager">The manager.</param>
            <param name="orderTypeKey">The order type key.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.IOrderLinesImportStrategyFactory.CreateReimportStrategy(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Creates the reimport strateg based on ther order type key.
            </summary>
            <param name="manager">The manager.</param>
            <param name="orderTypeKey">The order type key.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.OrderLinesImporting.Strategies.OrderLinesTrip22ImportStrategyFactory">
            <summary>
            Order lines to invoice import strategy factory (Trip22)
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.OrderLinesImporting.Strategies.OrderLinesTrip22ImportStrategyFactory.Create(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Creates the import strategy based on the order type key.
            </summary>
            <param name="manager">The manager.</param>
            <param name="orderTypeKey">The order type key.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.OrderLinesImporting.Strategies.OrderLinesTrip22ImportStrategyFactory.CreateReimportStrategy(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Creates the reimport strateg based on ther order type key.
            </summary>
            <param name="manager">The manager.</param>
            <param name="orderTypeKey">The order type key.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer">
            <summary>
            Order Preferences Container
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOrderPreferencesContainer.SelectFor(System.Int32)">
            <summary>
            Selects preferences for the order.
            </summary>
            <param name="orderId">The order id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IPendingInvoicesAvailableValuesRecalculationStrategy">
            <summary>
            Strategy to handle pending invoices available amount/quantity recalculation
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IPendingInvoicesAvailableValuesRecalculationStrategy.RecalculateValues(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Recalculates the available amount/quantity values.
            </summary>
            <param name="manager">The manager.</param>
            <param name="order">The order.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Locking.ILockNotActiveDocumentStrategy">
            <summary>
            Strategy to decide whether the not active documenthas to bbe locked
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Locking.ILockNotActiveDocumentStrategy.HasToBeLocked(DataAccess.Services.IServiceManager,System.Nullable{System.Int32})">
            <summary>
            Gets a value indicating whether the not active document has to be locked.
            </summary>
            <returns>A value indicating whether the not active document has to be locked.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Locking.DoNotLockNotActiveDocumentStrategy.HasToBeLocked(DataAccess.Services.IServiceManager,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="serviceManager"></param>
            <param name="orderId"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Exceptions.UnableToCreateInvoicingDocumentDueToExistingPendingInvoicingDocumentForOrderLineException`1">
            <summary>
            Indicates, that a line already has pending SES
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Exceptions.UnableToCreateInvoicingDocumentDueToExistingPendingInvoicingDocumentForOrderLineException`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Exceptions.UnableToCreateInvoicingDocumentDueToExistingPendingInvoicingDocumentForOrderLineException`1.PendingInvoicingDocumentsForOrderLines">
            <summary>
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.SesLineProcessor">
            <summary>
            Flips collection of SES lines into xml
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.SesLineProcessor.Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.SesLineProcessor.GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.SesLineTaxProcessor">
            <summary>
            Processor to flip collection of taxes of SES line into xml
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.SesLineTaxProcessor.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.SesLineTaxProcessor.Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.SesSummaryTaxProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.SesSummaryTaxProcessor.Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.CollectionProcessors.SesSummaryTaxProcessor.GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AllowOrChargeFlip">
            <summary>
            Encapsulate data for flipping of AllowOrCharge information
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AllowOrChargeFlip.AllowanceMonetaryAmount">
            <summary>
            Gets or sets the allowance monetary amount.
            </summary>
            <value>The allowance monetary amount.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AllowOrChargeFlip.ChargeMonetaryAmount">
            <summary>
            Gets or sets the charge monetary amount.
            </summary>
            <value>The charge monetary amount.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AllowOrChargeFlip.FreightMonetaryAmount">
            <summary>
            Gets or sets the freight monetary amount.
            </summary>
            <value>The freight monetary amount.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AllowOrChargeFlip.CurrencyID">
            <summary>
            Gets or sets the currency ID.
            </summary>
            <value>The currency ID.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.DiscountDueDateFlip">
            <summary>
            Encapsulates data for flipping of discount due day 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.DiscountDueDateFlip.IssueDate">
            <summary>
            Gets or sets the issue date.
            </summary>
            <value>The issue date.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.DiscountDueDateFlip.DiscountDaysDue">
            <summary>
            Gets or sets the discount days due.
            </summary>
            <value>The discount days due.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.GrossValueFlip">
            <summary>
            Encapsulates data for flipping GrossValue
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.GrossValueFlip.TotalAmount">
            <summary>
            Gets or sets the total amount.
            </summary>
            <value>The total amount.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.GrossValueFlip.SubTotal">
            <summary>
            Gets or sets the sub total.
            </summary>
            <value>The sub total.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.GrossValueFlip.TaxTotal">
            <summary>
            Gets or sets the tax total.
            </summary>
            <value>The tax total.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.EntrySheetLineFlip">
            <summary>
            Encapsulated data for Entry Sheet line flip into xml.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.EntrySheetLineFlip.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.EntrySheetLineFlip.ParentLineItemNum">
            <summary>
            Gets or sets the parent line item num.
            </summary>
            <value>The parent line item num.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.EntrySheetLineFlip.IsParentLine">
            <summary>
            Gets or sets a value indicating whether this instance is parent line.
            </summary>
            <value>
            	<c>true</c> if this instance is parent line; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.EntrySheetLineFlip.BuyerOrderLineReferenceNumber">
            <summary>
            Gets or sets the buyer order line reference number.
            </summary>
            <value>The buyer order line reference number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.EntrySheetLineFlip.Line">
            <summary>
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.EntrySheetLineFlip.OrderLine">
            <summary>
            Gets or sets the order line.
            </summary>
            <value>The order line.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.EntrySheetLineFlip.ServiceDates">
            <summary>
            Gets or sets Service Dates
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip">
            <summary>
            Encapsulates data for Tax flip into xml.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.CategoryOther">
            <summary>
            Gets or sets the category other.
            </summary>
            <value>The category other.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.ReasonTaxExempt">
            <summary>
            Gets or sets the reason tax exempt.
            </summary>
            <value>The reason tax exempt.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.ReasonTaxExemptOther">
            <summary>
            Gets or sets the reason tax exempt other.
            </summary>
            <value>The reason tax exempt other.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.Percent">
            <summary>
            Gets or sets the percent.
            </summary>
            <value>The percent.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
            <value>The amount.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.TaxableAmount">
            <summary>
            Gets or sets the taxable amount.
            </summary>
            <value>The taxable amount.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.TypeOther">
            <summary>
            Gets or sets the type other.
            </summary>
            <value>The type other.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.PaymentMethod">
            <summary>
            Gets or sets the payment method.
            </summary>
            <value>The payment method.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.PaymentMethodOther">
            <summary>
            Gets or sets the payment method other.
            </summary>
            <value>The payment method other.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.FunctionQualifierCodedOther">
            <summary>
            Gets or sets the tax function qualifier coded other.
            </summary>
            <value>The tax function qualifier coded other.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxFlip.Region">
            <summary>
            Gets or sets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxPerPercentFlip">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxPerPercentFlip.TaxableAmount">
            <summary>
            Gets or sets the taxable amount.
            </summary>
            <value>The taxable amount.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxPerPercentFlip.Percent">
            <summary>
             Gets or sets percent property
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.TaxPerPercentFlip.TotalTax">
            <summary>
             Gets or sets total tax property
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.POtoSESFlipper">
            <summary>
            PO to SES Flipper
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.POtoSESFlipper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.POtoSESFlipper"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.POtoSESFlipper.Flip(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet)">
            <summary>
            Flips the specified entry sheet.
            </summary>
            <param name="entrySheet">The entry sheet.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.InvoiceTypeFormatter">
            <summary>
            Invoice Type flipping formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.InvoiceTypeFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.ParentOrChildItemTypeFormatter">
            <summary>
            Line Item Type Coded Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.ParentOrChildItemTypeFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.TaxFunctionQualifierCodedOtherFormatter">
            <summary>
            Used to display tax percent value in the aggregated tax summary section
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TaxFunctionQualifierCodedOtherFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.xCBL40.XCBL40InvoicePurposeFormatter">
            <summary>
            InvoicePurpose formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.xCBL40.XCBL40InvoicePurposeFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IPendingAsnsProcessingStrategy">
            <summary>
             Strategy to handle pending Asns while shredding change orders.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IPendingAsnsProcessingStrategy.MarkPendingAsn(DataAccess.Services.IServiceManager,System.Int32)">
            <summary>
            Marks the pending asn.
            </summary>
            <param name="manager">The manager.</param>
            <param name="orderCompositeId">The order composite id.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IPendingInvoicesProcessingStrategy">
            <summary>
            Strategy to handle pending invoices while shredding change orders.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IPendingInvoicesProcessingStrategy.MarkPendingInvoicesForDeletion(DataAccess.Services.IServiceManager,System.Int32)">
            <summary>
            Marks the pending invoices for deletion.
            </summary>
            <param name="manager">The manager.</param>
            <param name="orderCompositeId">The order composite id.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Merging.UpdateInvoiceMergingContext">
            <summary>
             UpdateInvoiceContext
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Merging.UpdateInvoiceMergingContext.Close(DataAccess.Services.IServiceManager)">
            <summary>
            Closes the specified manager.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.OldToNewBusinessObjectsMapping">
            <summary>
            Maps old-style business objects to new
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OldToNewBusinessObjectsMapping.GetParty(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Party)">
            <summary>
            Converts party
            </summary>
            <param name="party"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OldToNewBusinessObjectsMapping.GetOtherContacts(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Contact})">
            <summary>
            Converts other contact collection
            </summary>
            <param name="contacts"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OldToNewBusinessObjectsMapping.GetOtherContact(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Contact)">
            <summary>
            Converts other contact
            </summary>
            <param name="contactToCopy"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OldToNewBusinessObjectsMapping.CreateContact(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Contact)">
            <summary>
            Converts contact
            </summary>
            <param name="contactToCopy"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.OrderDocumentLineHelperFactory">
            <summary>
            Creates OrderDocumentLineHelper
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderDocumentLineHelperFactory.Create(TRR.O2I.BusinessLogic.BusinessEntity.Enums.DocumentType)">
            <summary>
            Creates OrderDocumentLineHelper depending on docType.
            </summary>
            <param name="documentType"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.OrderLineHelper">
            <summary>
            Encapsulates helping methods for order lines.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineHelper.ListOfSheduleLineXPath">
            <summary>
            xPath to ListOfSheduleLine
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.OrderPreferencesCachingContainer">
            <summary>
            Order Preferences container.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderPreferencesCachingContainer.#ctor(DataAccess.Services.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.OrderPreferencesCachingContainer"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderPreferencesCachingContainer.SelectFor(System.Int32)">
            <summary>
            Selects preferences for the order.
            </summary>
            <param name="orderId">The order id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.OrderSettings.IOrderPreferencesBuildStrategy">
            <summary>
            Strategy to build order preferences (which are immutable)
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderSettings.IOrderPreferencesBuildStrategy.CreatePreferences(System.Int32,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Creates the preferences.
            </summary>
            <param name="orderId">The order id.</param>
            <param name="orderTypeKey">The order type key.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IgnorePendingInvoicesAvailableValuesRecalculationStrategy">
            <summary>
            This strategy ignores any pending invoices
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.PendingInvoicesAvailableValuesRecalculationTrip2Strategy">
            <summary>
            Recalculation strategy for Trip2
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.PendingInvoicesAvailableValuesRecalculationTrip22Strategy">
            <summary>
            Recalculation strategy for Trip22
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RecalculationStrategyHelper.LoadSingleActivePendingInvoice(System.Int32)">
            <summary>
            Loads the single active pending invoice (built from PO).
            </summary>
            <param name="orderId">The order id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.PredefinedBankAccountInformationProvider">
            <summary>
            Fill in predefined Bank Account details.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PredefinedBankAccountInformationProvider.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.SupplierSettingsBusinessLogic.BankAccountInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.PredefinedBankAccountInformationProvider"/> class.
            </summary>
            <param name="information">The information.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PredefinedBankAccountInformationProvider.SetupDefaultValues(TRR.O2I.BusinessLogic.BusinessEntity.Entities.PaymentInstruction)">
            <summary>
            Setups the default values for Bank Account Information fields.
            </summary>
            <param name="paymentInstruction">The payment instruction.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntrySheetBuilder">
            <summary>
            Builds Entry Sheet from varios source types.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntrySheetBuilder.CreateFromOrderLines(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.ParentOrderLine},TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetType,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Builds Entry Sheet from order line
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntrySheetBuilder.CopyFromEntrySheet(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,DataAccess.Services.IServiceManager)">
            <summary>
            Creates a copy of the entry sheet specified.
            </summary>
            <param name="entrySheetToCopyFrom"></param>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntrySheetBuilder.RecreateEntrySheet(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,TRR.O2I.Common.Core.SupplierCountry,DataAccess.Services.IServiceManager)">
            <summary>
            Recreates the entry sheet.
            Applies target supplier country customization during recreation process
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="supplierCountry">The supplier country.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntrySheetBuilder.RecreateEntrySheet(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Recreates the entry sheet.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="supplierCountry">The supplier country.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IESStateCalculator">
            <summary>
            Invoice state calculator interface
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IESStateCalculator.IsConsistent(TRR.O2I.DataAccess.Core.Entities.EntrySheetRow)">
            <summary>
            Determines whether the specified sesRow is consistent.
            </summary>
            <param name="sesRow">The sesRow.</param>
            <returns>
            	<c>true</c> if the specified sesRow is consistent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IESStateCalculator.GetPendingChangeOrders(TRR.O2I.DataAccess.Core.Entities.EntrySheetRow)">
            <summary>
            Gets the pending change orders.
            </summary>
            <param name="sesRow">The sesRow.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ESStateCalculator">
            <summary>
            Invoice state calculator
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ESStateCalculator.IsConsistent(TRR.O2I.DataAccess.Core.Entities.EntrySheetRow)">
            <summary>
            Determines whether the specified sesRow is consistent.
            </summary>
            <param name="sesRow">The sesRow.</param>
            <returns>
            	<c>true</c> if the specified sesRow is consistent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ESStateCalculator.IsConsistentES(TRR.O2I.DataAccess.Core.Entities.EntrySheetRow)">
            <summary>
            Determines whether the specified sesRow is consistent.
            </summary>
            <param name="sesRow">The sesRow.</param>
            <returns>
            	<c>true</c> if the specified sesRow is consistent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ESStateCalculator.IsConsistent(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
             Determines whether the specified sesRow is consistent.
            </summary>
            <param name="entrySheet">SES entity</param>
            <param name="businessSettings">Current BusinessSettings</param>
            <param name="order">Corresponding order</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ESStateCalculator.IsConsistent(TRR.O2I.BusinessLogic.Core.Workflow.TripName,TRR.O2I.Common.Core.SupplierCountry,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Determines whether the specified sesRow is consistent.
            </summary>
            <param name="tripCreated"></param>
            <param name="countryCreated"></param>
            <param name="businessSettings"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ESStateCalculator.GetPendingChangeOrders(TRR.O2I.DataAccess.Core.Entities.EntrySheetRow)">
            <summary>
            Gets the pending change orders.
            </summary>
            <param name="sesRow">The sesRow.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters">
            <summary>
             Parameters for SES creation
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters.Validate">
            <summary>
            Validates the fullfilment of SES creation parameters
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters.Order">
            <summary>
            Order from which header-level SES data will be taken
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters.OrderHistory">
            <summary>
             Gets or sets Order History
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters.ParentOrderLines">
            <summary>
            The lines, based on which ES lines will be created
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters.Buyer">
            <summary>
            Buyer company information
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters.BuyerSettings">
            <summary>
             Settings for current buyer
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters.ServiceEntrySheetNumber">
            <summary>
            The number for newly created SES
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters.BusinessSettings">
            <summary>
             Business settings
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters.OrderSettings">
            <summary>
             Settings for Order
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters.EntrySheetType">
            <summary>
            Gets or sets EntrySheetType
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.EntrySheetBuildingParameters.SelectedOrderSubLinesIds">
            <summary>
            Gets or sets selected order sublines ids
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntrySheetLinesStatusUpdateManager">
            <summary>
            Lock/Unlock pending entry sheets
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntrySheetLinesStatusUpdateManager.OnOutgoingOrderResponse(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,DataAccess.Services.IServiceManager,System.Int32)">
            <summary>
             Updates ES lines status when POR/COR is being sent.
            </summary>
            <param name="responseDocument"></param>
            <param name="serviceManager"></param>
            <param name="orderId"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntrySheetLinesStatusUpdateManager.OnIncomingCO(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
             Updates ES lines status when CO comes.
            </summary>
            <param name="serviceManager"></param>
            <param name="co"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.ISesResponseXmlParser">
            <summary>
            Parser for a service entry sheet response
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.ISesResponseXmlParser.Parse(System.String)">
            <summary>
            Parses the specified XML.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.EntrySheetResponseXmlParser">
            <summary>
            Parser for a service entry sheet response
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.EntrySheetResponseXmlParser.Parse(System.String)">
            <summary>
            Parses the specified XML.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseLineXmlRow">
            <summary>
            Represents a single row for a line in Service Entry Sheet Response XML
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseLineXmlRow.BuyerLineItemNum">
            <summary>
            Gets or sets the buyer line item number.
            </summary>
            <value>The buyer line item number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseLineXmlRow.ParentLineItemNumber">
            <summary>
            Gets or sets the parent line item number.
            </summary>
            <value>The parent line item number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseLineXmlRow.ResponseCoded">
            <summary>
            Gets or sets the invoice response coded.
            </summary>
            <value>The invoice response coded.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseLineXmlRow.ResponseCodedOther">
            <summary>
            Gets or sets the invoice response coded other.
            </summary>
            <value>The invoice response coded other.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow">
            <summary>
            Service Entry Sheet Response xml row
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow"/> class.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow.ResponseNumber">
            <summary>
            Gets or sets the buyer invoice number.
            </summary>
            <value>The buyer invoice number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow.ResponseIssueDate">
            <summary>
            Gets or sets the invoice response issue date.
            </summary>
            <value>The invoice response issue date.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow.SesReferenceNumber">
            <summary>
            Gets or sets the invoice reference number.
            </summary>
            <value>The invoice reference number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow.BuyerPartyIdent">
            <summary>
            Gets or sets the buyer party ident.
            </summary>
            <value>The buyer party ident.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow.SellerPartyIdent">
            <summary>
            Gets or sets the invoicing party ident.
            </summary>
            <value>The invoicing party ident.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow.ResponseCoded">
            <summary>
            Gets or sets the invoice response coded.
            </summary>
            <value>The invoice response coded.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow.ResponseCodedOther">
            <summary>
            Gets or sets the invoice response coded other.
            </summary>
            <value>The invoice response coded other.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow.BuyerPartyName">
            <summary>
            Gets or sets the name of the buyer party.
            </summary>
            <value>The name of the buyer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow.Lines">
            <summary>
            Gets or sets the lines.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.SesResponseXmlRow.StructuredNotes">
            <summary>
            Gets or sets Structured Notes
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.EntrySheetResponseShredder">
            <summary>
            Entry Sheet Response shredder
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.EntrySheetResponseShredder.#ctor(TRR.O2I.DataAccess.Services.IServiceManagerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.EntrySheetResponseShredder"/> class.
            </summary>
            <param name="managerFactory">The service manager factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.EntrySheetResponseShredder.Shred(TRR.O2I.Common.Core.XMLDocumentParser,System.String)">
            <summary>
            Shreds the specified parser.
            </summary>
            <param name="parser">The parser.</param>
            <param name="uniqueIdentifier">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.StructuredNoteXmlRow">
            <summary>
            Structured Note XML Row
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.StructuredNoteXmlRow.GeneralNote">
            <summary>
            Gets or sets General Note
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CAAccountCodeUpdateRule">
            <summary>
            Apply tie and security logic to CA lines
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DataValidationRuleBase`1">
            <summary>
            Abstract validation rule base class.
            Designed to support DataBase access
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.IValidationRule`1">
            <summary>
            Rule should be applied to the document to validate it against one use-case statement. Full document validation should be implemented
            as a set of validation rules performed one-by-one.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.IValidationRule`1.ApplyToDocument(`0,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DataValidationRuleBase`1.daService">
            <summary>
            DataAccessService object.
            Use it if you need to access database
            while applying validation rule to document
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DataValidationRuleBase`1.ApplyToDocument(`0,System.String)">
            <summary>
            Validate Document
            </summary>
            <param name="document">Document to validate</param>
            <param name="documentGuid">document guid</param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DataValidationRuleBase`1.DataService">
            <summary>
            DataAccessService property.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CAAccountCodeUpdateRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CALineValidationRule"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CAAccountCodeUpdateRule.#ctor(TRR.O2I.DataAccess.Services.IServiceManagerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CALineValidationRule"/> class.
            </summary>
            <param name="serviceManagerFactory">The service manager factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CAAccountCodeUpdateRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.CreditAdvice,System.String)">
            <summary>
            Apply tie and security logic to CA lines
            </summary>
            <param name="document">CreditAdvice document</param>
            <param name="documentGuid">document guid</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.GoodsReceiptLockPendingInvoicesWhenGRNettingIsOnRule">
            <summary>
            Lovks pending invoices related to corresponding PO for buyers on TRIP2 when GR Netting is on for correspondng order.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.GoodsReceiptLockPendingInvoicesWhenGRNettingIsOnRule.#ctor(DataAccess.Services.IServiceManager)">
            <summary>
            Public constructor
            </summary>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.GoodsReceiptLockPendingInvoicesWhenGRNettingIsOnRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.GoodsReceipt)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IOQueue.ItemValidationFailureException">
            <summary>
            Throws by QueueItemProcessor in case the item does not valid 
            and can't be processed.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IOQueue.QueueItemProcessingException">
            <summary>
            This exception throws by QueueCOntroleer when item processing failed.
            	
            The InnerException field containes additional infprmation about failure. It
            can be ItemValidationException, ItemProcessingException or 
            InternalRuntimeException.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IOQueue.QueueItemProcessingException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IOQueue.QueueItemProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
            <param name="innerException">Reference to inner exception to be enveloped.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IOQueue.ItemValidationFailureException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Exceptions.DocumentSenderGeneralException">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Exceptions.DocumentSenderGeneralException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Exceptions.DocumentSenderGeneralException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMapConfiguration">
            <summary>
            Class keep Maps objects for all document types.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMapConfiguration.GetInstance">
            <summary>
            Creates object of this class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMapConfiguration.#ctor">
            <summary>
            Initializes this class. 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMapConfiguration.GetTREPMappings(TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Returns interface IList for access to TREPMapEntryCollection object.
            </summary>
            <param name="documentType">Document type.</param>
            <returns>Interface IList.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMapConfiguration.GetTREPMappings(System.String)">
            <summary>
            Gets the TREP mappings.
            </summary>
            <param name="documentType">Type of the document.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMapConfiguration.GetMap(TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Returns XmlDocument object for map.
            </summary>
            <param name="documentType">Document type.</param>
            <returns>XmlDocument</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMapConfiguration.GetMap(System.String)">
            <summary>
            Returns XmlDocument object for map.
            @TODO: used for test only remove it!
            </summary>
            <param name="documentType">Document type.</param>
            <returns>XmlDocument</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.ChangeOrderFlipAdapter">
            <summary>
            Flip adapter for change order.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip">
            <summary>
            Change order flip entity
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.Attachments">
            <summary>
            Gets the attachments.
            </summary>
            <value>The attachments.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.ResponseTotalAmount">
            <summary>
            Gets the response total amount.
            </summary>
            <value>The response total amount.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.ResponseIssueDate">
            <summary>
            Gets the response issue date.
            </summary>
            <value>The response issue date.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.OrderHeaderNote">
            <summary>
            Gets the order header note.
            </summary>
            <value>The order header note.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.ResponseHeaderNote">
            <summary>
            Gets the order header note.
            </summary>
            <value>The order header note.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.BuyerOrderNumber">
            <summary>
            Gets the buyer order number.
            </summary>
            <value>The buyer order number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.OrderIssueDate">
            <summary>
            Gets or sets the order issue date.
            </summary>
            <value>The order issue date.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.ResponseSellerNumber">
            <summary>
            Gets the response seller number.
            </summary>
            <value>The response seller number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.RequestedDeliverByDate">
            <summary>
            Gets the requested deliver by date.
            </summary>
            <value>The requested deliver by date.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.Lines">
            <summary>
            Order lines.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.XmlIsland">
            <summary>
            Gets the XML island.
            </summary>
            <value>The XML island.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.PaymentInstruction">
            <summary>
            Gets the payment instruction.
            </summary>
            <value>The payment instruction.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IChangeOrderFlip.LinesCount">
            <summary>
            Gets the lines count.
            </summary>
            <value>The lines count.</value>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.ChangeOrderFlipAdapter.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.ChangeOrderFlipAdapter"/> class.
            </summary>
            <param name="changeOrder">The change order.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.ChangeOrderHistoryFlipAdapter">
            <summary>
            Change order history flip adapter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.ChangeOrderHistoryFlipAdapter.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrderHistory,TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.ChangeOrderHistoryFlipAdapter"/> class.
            </summary>
            <param name="changeOrderHistory">The change order history.</param>
            <param name="changeOrder">The change order.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip">
            <summary>
            Order flip entity.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.ResponseTotalAmount">
            <summary>
            Gets the response total amount.
            </summary>
            <value>The response total amount.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.Attachments">
            <summary>
            Gets the attachments.
            </summary>
            <value>The attachments.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.ResponseSellerNumber">
            <summary>
            Gets the response seller number.
            </summary>
            <value>The response seller number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.BuyerOrderNumber">
            <summary>
            Gets the buyer order number.
            </summary>
            <value>The buyer order number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.ResponseHeaderNote">
            <summary>
            Gets the response header note.
            </summary>
            <value>The response header note.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.ResponseIssueDate">
            <summary>
            Gets the response issue date.
            </summary>
            <value>The response issue date.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.RequestedDeliverByDate">
            <summary>
            Gets the requested deliver by date.
            </summary>
            <value>The requested deliver by date.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.Lines">
            <summary>
            Order lines.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.XmlIsland">
            <summary>
            Gets the XML island.
            </summary>
            <value>The XML island.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.PaymentInstruction">
            <summary>
            Gets the payment instruction.
            </summary>
            <value>The payment instruction.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderFlip.LinesCount">
            <summary>
            Gets the lines count.
            </summary>
            <value>The lines count.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip">
            <summary>
            Order line flip entity.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.BuyerLineItemNum">
            <summary>
            Gets the buyer line item num.
            </summary>
            <value>The buyer line item num.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.ResponseSubTotal">
            <summary>
            Gets the response sub total.
            </summary>
            <value>The response sub total.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.Attachments">
            <summary>
            Gets the attachments.
            </summary>
            <value>The attachments.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.ResponseTotalQuantityValue">
            <summary>
            Gets the response total quantity value.
            </summary>
            <value>The response total quantity value.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.ResponseUOMCodeFK">
            <summary>
            Gets the response UOM code FK.
            </summary>
            <value>The response UOM code FK.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.LineItemType">
            <summary>
            Gets or sets the type of the line item.
            </summary>
            <value>The type of the line item.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.ResponsePBQQuantityValue">
            <summary>
            Gets the response PBQ quantity value.
            </summary>
            <value>The response PBQ quantity value.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.UOMCodeFK">
            <summary>
            Gets the UOM code FK.
            </summary>
            <value>The UOM code FK.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.UnitPriceCurrencyCodedFK">
            <summary>
            Gets the unit price currency coded FK.
            </summary>
            <value>The unit price currency coded FK.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.UnitPriceValue">
            <summary>
            Gets the unit price value.
            </summary>
            <value>The unit price value.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.ResponseUnitPriceValue">
            <summary>
            Gets the response unit price value.
            </summary>
            <value>The response unit price value.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.TotalQuantityValue">
            <summary>
            Gets the total quantity value.
            </summary>
            <value>The total quantity value.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.Shipments">
            <summary>
            Gets the shipments.
            </summary>
            <value>The shipments.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip.XmlIsland">
            <summary>
            Gets the XML island.
            </summary>
            <value>The XML island.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IShipmentFlip">
            <summary>
            Shipment flipping entity.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IShipmentFlip.QuantityValue">
            <summary>
            Gets the quantity value.
            </summary>
            <value>The quantity value.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IShipmentFlip.TransportNote">
            <summary>
            Gets the transport note.
            </summary>
            <value>The transport note.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IShipmentFlip.SupplierDeliveryDate">
            <summary>
            Gets the supplier delivery date.
            </summary>
            <value>The supplier delivery date.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IShipmentFlip.LineItemType">
            <summary>
            Gets the type of the line item.
            </summary>
            <value>The type of the line item.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IShipmentFlip.ServiceStartDate">
            <summary>
            Gets the service start date.
            </summary>
            <value>The service start date.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IShipmentFlip.ServiceEndDate">
            <summary>
            Gets the service end date.
            </summary>
            <value>The service end date.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IShipmentFlip.RequestedDeliveryDate">
            <summary>
            Gets or sets RequestedDeliveryDate
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.AttachmentEntityFormatter">
            <summary>
            Flipping formatter for attachment business entity.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.AttachmentEntityFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.OrderStatusEnumFormatter">
            <summary>
            Formatter for order status enum.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Formatters.Common.OrderStatusEnumFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.PaymentCardTypeEnumFormatter">
            <summary>
            Card type enum formatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.PaymentCardTypeEnumFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Foundation.NextNumberAccessor">
            <summary>
            Accessor to generate numbers for documents
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Foundation.NextNumberAccessor.#ctor(DataAccess.Services.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Foundation.NextNumberAccessor"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Foundation.NextNumberAccessor.GetNextNumberForAsn(System.Int32)">
            <summary>
            Gets the next number for asn.
            </summary>
            <param name="supplierId">The supplier id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Foundation.NextNumberAccessor.GetNextNumberForInvoice(System.Int32)">
            <summary>
            Gets the next number for invoice.
            </summary>
            <param name="supplierId">The supplier id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Foundation.NextNumberGenerator">
            <summary>
            Generates new number using counter and saves counter into db
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Foundation.NextNumberGenerator.#ctor(TRR.O2I.DataAccess.Core.Helpers.INumberCounterAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Foundation.NextNumberGenerator"/> class.
            </summary>
            <param name="accessor">The accessor.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Foundation.NextNumberGenerator.GetNewNumber(System.Int32)">
            <summary>
            Gets the new number.
            </summary>
            <param name="supplierId">The supplier ID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IBasketManager">
            <summary>
            Basket management facade
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.AddOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Adds the purchase order into basket.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.AddGoodsReceipt(TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.Basket.IRelatedGRsBasketPlacementStrategy)">
            <summary>
            Adds the goods receipt.
            </summary>
            <param name="gr">The gr.</param>
            <param name="relatedGRsBasketPlacementStrategy"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.AddOrderLine(TRR.O2I.DataAccess.Entities.OrderLine)">
            <summary>
            Adds the order line.
            </summary>
            <param name="line">The order line</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.SelectProcessedGoodsReceipts(TRR.O2I.DataAccess.Services.Core.PaginationCriteria)">
            <summary>
            Selects the processed goods receipts.
            </summary>
            <param name="paginationCriteria">The pagination criteria.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.SelectOriginalGoodsReceipts(TRR.O2I.DataAccess.Services.Core.PaginationCriteria)">
            <summary>
            Selects the original goods receipts.
            </summary>
            <param name="paginationCriteria">The pagination criteria.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.SelectReturnedGoodsReceipts(TRR.O2I.DataAccess.Services.Core.PaginationCriteria)">
            <summary>
            Selects the returned goods receipts.
            </summary>
            <param name="paginationCriteria">The pagination criteria.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.GetParentOrderLineBasketItems(TRR.O2I.DataAccess.Services.Core.PaginationCriteria)">
            <summary>
            Gets the order lines.
            </summary>
            <param name="paginationCriteria">The order lines settings.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.GetOrderBasketItems(TRR.O2I.DataAccess.Services.Core.PaginationCriteria)">
            <summary>
            Gets the orders.
            </summary>
            <param name="criteria">The orders settings.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.GetOrderLineSubItems(System.Int32)">
            <summary>
            Gets the order line sub items.
            </summary>
            <param name="lineId">The document id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.GetOrderLines">
            <summary>
            Gets the order lines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.GetOrders">
            <summary>
            Gets the orders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.GetOriginalGoodsReceipts">
            <summary>
            Gets the goods receipts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.DeleteOrderLines">
            <summary>
            Deletes the order lines.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.DeleteOrders">
            <summary>
            Deletes the orders.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.DeleteAllGoodsReceipts">
            <summary>
            Deletes the goods receipts.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.DeleteGoodsReceipt(System.Int32)">
            <summary>
            Deletes the gooods receipt.
            </summary>
            <param name="basketId">The item id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.DeleteOrder(System.Int32)">
            <summary>
            Deletes the order.
            </summary>
            <param name="basketId">The item id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.DeleteOrderLine(System.Int32)">
            <summary>
            Deletes the order line.
            </summary>
            <param name="basketId">The item id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IBasketManager.GetReturnedGoodsReceipts">
            <summary>
            Gets the returned goods receipts.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IInvoiceRowStateCalculator">
            <summary>
            Invoice state calculator interface
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IInvoiceRowStateCalculator.IsConsistent(TRR.O2I.DataAccess.Entities.IInvoiceRow)">
            <summary>
            Determines whether the specified invoice is consistent.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is consistent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IInvoiceRowStateCalculator.IsExpired(TRR.O2I.DataAccess.Entities.IInvoiceRow)">
            <summary>
            Determines whether the specified invoice is expired.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is expired; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IInvoiceRowStateCalculator.IsInactiveLocked(TRR.O2I.DataAccess.Entities.IInvoiceRow)">
            <summary>
            Determines whether the specified invoice is locked.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is locked; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IInvoiceRowStateCalculator.IsFinalInvoiceSentLocked(TRR.O2I.DataAccess.Entities.IInvoiceRow)">
            <summary>
            Determines whether [is final invoice sent locked] [the specified invoice].
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if [is final invoice sent locked] [the specified invoice]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IInvoiceRowStateCalculator.GetPendingChangeOrders(TRR.O2I.DataAccess.Entities.IInvoiceRow)">
            <summary>
            Gets the pending change orders.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.InvoiceRowStateCalculator">
            <summary>
            Invoice state calculator
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceRowStateCalculator.IsConsistent(TRR.O2I.DataAccess.Entities.IInvoiceRow)">
            <summary>
            Determines whether the specified invoice is consistent.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is consistent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceRowStateCalculator.IsExpired(TRR.O2I.DataAccess.Entities.IInvoiceRow)">
            <summary>
            Determines whether the specified invoice is expired.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is expired; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceRowStateCalculator.IsInactiveLocked(TRR.O2I.DataAccess.Entities.IInvoiceRow)">
            <summary>
            Determines whether the specified invoice is locked.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if the specified invoice is locked; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceRowStateCalculator.IsFinalInvoiceSentLocked(TRR.O2I.DataAccess.Entities.IInvoiceRow)">
            <summary>
            Determines whether [is final invoice sent locked] [the specified invoice].
            </summary>
            <param name="invoice">The invoice.</param>
            <returns>
            	<c>true</c> if [is final invoice sent locked] [the specified invoice]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceRowStateCalculator.GetPendingChangeOrders(TRR.O2I.DataAccess.Entities.IInvoiceRow)">
            <summary>
            Gets the pending change orders.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceForOrderWithFinalInvoicesException">
            <summary>
            Exception to throw while attempt to create invoice from order with pending final invoices.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceForOrderWithFinalInvoicesException.#ctor(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order},TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceForOrderWithFinalInvoicesException"/> class.
            </summary>
            <param name="ordersWithFinalInvoice">The orders numbers.</param>
            <param name="finalInvoice"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceForOrderWithFinalInvoicesException.FinalInvoice">
            <summary>
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceForOrderWithFinalInvoicesException.OrdersWithFinalInvoice">
            <summary>
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceForOrderWithPendingChangeException">
            <summary>
             Exception to throw while attempt to create invoice for order with pending change (change order).
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceFromNonMaterialOrderException">
            <summary>
            Thrown while invoice creationfron non material order
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.ExecuteDelegate">
            <summary>
            Type for routine for executing.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionCatcher">
            <summary>
            Catches exceptions while invoice creation
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionCatcher.#ctor(TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionCatcher"/> class.
            </summary>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionCatcher.Execute(TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.ExecuteDelegate)">
            <summary>
            Executes the specified execute delegate.
            </summary>
            <param name="executeDelegate">The execute delegate.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages">
            <summary>
            Invoice creation errors messages
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.GetMessagesForOrders">
            <summary>
            Gets the messages for orders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.GetMessagesForLines">
            <summary>
            Gets the messages for lines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.#ctor(System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages"/> class.
            </summary>
            <param name="buildInvoiceFromMultiplyOrdersException">The build invoice from multiply orders exception.</param>
            <param name="buildInvoiceFromNonServiceOrMixedOrderException">The build invoice from non service order exception.</param>
            <param name="documentCreationDeniedException">The document creation denied exception.</param>
            <param name="orderResponsesNotSentException">The order responses not sent exception.</param>
            <param name="asnNotSentException">The asn not sent exception.</param>
            <param name="buildDocumentFromOrdersWithDifferentControlKeysException">The build document from orders with different control keys exception.</param>
            <param name="buildInvoiceForOrderWithFinalInvoicesException">The build invoice for order with final invoices exception.</param>
            <param name="buildInvoiceForOrderWithPendingChangeException">The build invoice for order with pending change exception.</param>
            <param name="buildInvoiceFromOrdersWithDifferentTypesException">The build invoice from orders with different types exception.</param>
            <param name="buildInvoiceFromOrdersWithTypeEntrySheetEnabledFor">The build invoice from orders with type entry sheet enabled for exception.</param>
            <param name="buildCreditInvoiceFromOrderForTrip22Exception">The build credit invoice from order for TRIP22 exception.</param>
            <param name="asnIsNotCreatedMessage"></param>
            <param name="asnCreatedNotFromLatestOrderDocument"></param>
            <param name="buildInvoiceForOrderNotAvailableForInvoicingInTrip22Exception"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.BuildInvoiceFromMultiplyOrdersException">
            <summary>
            Gets the build invoice from multiply orders exception message.
            </summary>
            <value>The build invoice from multiply orders exception.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.BuildInvoiceFromNonServiceOrMixedOrderException">
            <summary>
            Gets the build invoice from non service order exception message.
            </summary>
            <value>The build invoice from non service order exception.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.DocumentCreationDeniedException">
            <summary>
            Gets the document creation denied exception.
            </summary>
            <value>The document creation denied exception.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.OrderResponsesNotSentException">
            <summary>
            Gets the order responses not sent exception.
            </summary>
            <value>The order responses not sent exception.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.AsnNotSentException">
            <summary>
            Gets the asn not sent exception.
            </summary>
            <value>The asn not sent exception.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.AsnNotCreatedException">
            <summary>
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.BuildDocumentFromOrdersWithDifferentControlKeysException">
            <summary>
            Gets the build document from orders with different control keys exception.
            </summary>
            <value>
            The build document from orders with different control keys exception.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.AsnCreatedNotFromLatestOrderDocument">
            <summary>
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionsMessages.BuildInvoiceForOrderWithFinalInvoicesException">
            <summary>
            Gets the build invoice for order with final invoices exception.
            </summary>
            <value>The build invoice for order with final invoices exception.</value>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceFromGoodsReceiptCreationExceptionCatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceCreationExceptionCatcher"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceFromGoodsReceiptCreationExceptionCatcher.Execute(TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.ExecuteDelegate,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt})">
            <summary>
            Executes the specified execute delegate.
            </summary>
            <param name="executeDelegate">The execute delegate.</param>
            <param name="goodsReceipts">The goods receipts.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ExceptionCatchers.InvoiceFromGoodsReceiptCreationExceptionsMessages.GetMessages">
            <summary>
            Gets the messages for goods receipts.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceFromOrdersWithDifferentTypesException">
            <summary>
            Exception is thrown when user tries to create invoice from POs of different types (Service Planned and Unplanned or Service and Material)
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesReferencedByGoodsReceiptItemsException">
            <summary>
            Exception to throw while attempt to create invoice from empty goods receipts items (referenced order lines) collection.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableQuantityForDebitInvoicingException">
            <summary>
            Thrown during Invoice creation from PO with no lines with available amount for invoicing
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableQuantityForDebitInvoicingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableQuantityForDebitInvoicingException"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoNewGoodsReceiptsForInvoicingException">
            <summary>
            Exception to throw when there are no gr items to invoice
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoNewGoodsReceiptsForInvoicingException.#ctor(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoNewGoodsReceiptsForInvoicingException"/> class.
            </summary>
            <param name="goodsReceipts">The goods receipts.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoNewGoodsReceiptsForInvoicingException.GoodsReceiptNumbers">
            <summary>
            Gets the goods receipt numbers.
            </summary>
            <value>The goods receipt numbers.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ValueSourceDelegate`1">
            <summary>
            Populate value delegate
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IValueSource`1">
            <summary>
            Value Source Interface
            </summary>
            <typeparam name="TValueType">The type of the alue type.</typeparam>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.IValueSource`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ValueSource`1">
            <summary>
            Call and load value
            </summary>
            <typeparam name="TValueType">The type of the alue type.</typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ValueSource`1.#ctor(TRR.O2I.BusinessLogic.Managers.ValueSourceDelegate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.ValueSource`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ValueSource`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.PreloadedValue`1">
            <summary>
            Preloaded value
            </summary>
            <typeparam name="TValue">The type of the alue type.</typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PreloadedValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.PreloadedValue`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.PreloadedValue`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.LinesAndOrdersPack">
            <summary>
            Lines and Orders pack for document creation
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.LinesAndOrdersPack.Order">
            <summary>
            Gets or sets the orders.
            </summary>
            <value>The orders.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.LinesAndOrdersPack.Lines">
            <summary>
            Gets or sets the lines.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.LinesAndOrdersPack.BuyerId">
            <summary>
            Gets or sets the buyer id.
            </summary>
            <value>The buyer id.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.LinesAndOrdersPack.ControlKey">
            <summary>
            Gets or sets the control key.
            </summary>
            <value>The control key.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.OrderLinesAndSubLinesPack">
            <summary>
            Order lines and sublines pack.
            Holds parent line -> list of sublines relation
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLinesAndSubLinesPack.CreateFromLinesCollection(System.Collections.Generic.IEnumerable{TRR.O2I.DataAccess.Entities.OrderLine})">
            <summary>
            Creates pack from lines collection.
            </summary>
            <param name="orderLines">The order lines.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLinesAndSubLinesPack.CreateFromLinesCollection(System.Collections.IList)">
            <summary>
            Creates pack from lines collection.
            </summary>
            <param name="orderLines">The order lines.</param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLinesAndSubLinesPack.ParentLines">
            <summary>
            Gets the paren lines.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLinesAndSubLinesPack.SubLines">
            <summary>
            Gets the sub lines.
            </summary>
            <value>The sub lines.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLinesAndSubLinesPack.EveryLineHasSublines">
            <summary>
            Check if any line in pack has sublines.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLinesAndSubLinesPack.EveryLineHasNoSublines">
            <summary>
            Gets a value indicating whether every line has no sub-lines.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.OrdersAndLinesPack">
            <summary>
            Orders and Lines Pack for invoice craetion
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.OrdersAndLinesPack.Orders">
            <summary>
            Orders collection
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.OrdersAndLinesPack.Lines">
            <summary>
            Lines Collection
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersAndLinesPack.GetPackFromOrders(System.Collections.Generic.IEnumerable{System.Int32},DataAccess.Services.IServiceManager)">
            <summary>
            Gets the pack from orders.
            </summary>
            <param name="orderIdCollection">The order id collection.</param>
            <param name="serviceManager">The service manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersAndLinesPack.GetPackFromOrderLines(DataAccess.Services.IServiceManager,System.Collections.Generic.IEnumerable{TRR.O2I.DataAccess.Entities.OrderLine})">
            <summary>
            Gets the pack from order lines.
            </summary>
            <param name="manager">The manager.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersAndLinesPack.GetPackFromGoodsReceiptItems(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceiptItem},DataAccess.Services.IServiceManager)">
            <summary>
            Gets the pack from goods receipt items.
            </summary>
            <param name="goodsReceiptItems">The goods receipt items.</param>
            <param name="serviceManager">The service manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersAndLinesPack.GetPackFromInvoice(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,DataAccess.Services.IServiceManager)">
            <summary>
            Gets the pack from invoice.
            </summary>
            <param name="invoice">The invoice.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.PartyPack">
            <summary>
            Pack for parties.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.PartyPack.BuyerParty">
            <summary>
            Gets or sets the buyer party.
            </summary>
            <value>The buyer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.PartyPack.ShipFromParty">
            <summary>
            Gets or sets the ship from party.
            </summary>
            <value>The ship from party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.PartyPack.ShipToParty">
            <summary>
            Gets or sets the ship to party.
            </summary>
            <value>The ship to party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.PartyPack.SellerParty">
            <summary>
            Gets or sets the seller party.
            </summary>
            <value>The seller party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.PartyPack.BillToParty">
            <summary>
            Gets or sets the bill to party.
            </summary>
            <value>The bill to party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.PartyPack.RemitToParty">
            <summary>
            Gets or sets the remit to party.
            </summary>
            <value>The remit to party.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.PartyPackFactory">
            <summary>
            Factory to create party pack.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PartyPackFactory.GetPartyPackFromASN(TRR.O2I.DataAccess.Entities.IAdvanceShipmentNoticeRow,DataAccess.Services.IServiceManager)">
            <summary>
            Gets the party pack from ASN.
            </summary>
            <param name="asnRow">The asn row.</param>
            <param name="serviceManager">The service manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PartyPackFactory.GetPartyPackFromGoodsReceipt(TRR.O2I.DataAccess.Entities.GoodsReceipt,DataAccess.Services.IServiceManager)">
            <summary>
            Gets the party information.
            </summary>
            <param name="goodsReceipt">The goods receipt.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PartyPackFactory.GetPartyPackFromCA(TRR.O2I.DataAccess.Entities.ICreditAdvice,DataAccess.Services.IServiceManager)">
            <summary>
            Gets the party pack from CA.
            </summary>
            <param name="creditAdvice">The credit advice.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PartyPackFactory.GetPartyPackFromPurchaseOrder(TRR.O2I.DataAccess.Entities.IOrderComposite,DataAccess.Services.IServiceManager)">
            <summary>
            Gets the party pack from order.
            </summary>
            <param name="order">The order.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Pdf.IPdfService">
            <summary>
            Pdf service.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.IPdfService.SaveLogo(System.Int32,System.String,System.Byte[])">
            <summary>
            Saves logo into DB
            </summary>
            <param name="companyId"></param>
            <param name="title"></param>
            <param name="picture"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.IPdfService.GetLogoPathByCompanyId(System.Int32)">
            <summary>
            Gets Local path to the logo.
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.IPdfService.GetPdfStyle(System.Int32,TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Gets pdf style for the document type mentioned.
            </summary>
            <param name="companyId">Creator company Id.</param>
            <param name="docType">Document type.</param>
            <returns>Loaded pdf syle.</returns>
            <exception cref="T:TRR.O2I.Common.Exceptions.PresentationLogicException">Throws when document style is not loaded.</exception>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService">
            <summary>
            PDFConfigurationService
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.#ctor">
            <summary>
            private constructor
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.InitFromConfigFile">
            <summary>
            Inits instance from configuration file
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.EnsureStringEnding(System.String,System.String)">
            <summary>
            Replaces end of the string by ending, if it is doesnt exists here.
            </summary>
            <param name="str">string to ensure.</param>
            <param name="ending">Ending to check.</param>
            <returns>Ensured string.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.GetDefaultLogoLocalPath">
            <summary>
            Gets local path to the default logo
            </summary>
            <returns>Local path to the default logo.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.GetDefaultLogoVirtualPath">
            <summary>
            Gets virtual path to the default logo
            </summary>
            <returns>Virtual path to the default logo.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.GetPdfStyle(TRR.O2I.Common.Core.DocumentType,TRR.O2I.Common.Core.StyleType)">
            <summary>
            Gets view info for document, style
            </summary>
            <param name="docType">DocumentType</param>
            <param name="styleType">StyleType</param>
            <returns>Loaded pdf style.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.GetCustomLogoVirtualPath">
            <summary>
            Gets custom logo virtual path.
            </summary>
            <returns>Virtual path to the custom logo directory.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.GetCustomLogoLocalPath">
            <summary>
            Gets custom logo local path.
            </summary>
            <returns>Local path to the custom logo directory.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.GetCustomViewVirtualPath">
            <summary>
            Gets custom view virtual path.
            </summary>
            <returns>Virtual path to the custom view directory.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.GetCustomViewLocalPath">
            <summary>
            Gets custom view local path.
            </summary>
            <returns>Local path to the custom view directory.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.GetCreatorCompanyId(System.Int32,System.Int32,TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Chooses company id between supplier and buyer, case some types of the documents 
            can be created by suppliers, and another - by buyers.
            </summary>
            <param name="supplierId">Current supplier id.</param>
            <param name="buyerId">Buyer id.</param>
            <param name="docType">Document type.</param>
            <returns>Id of the company - creator ot the document.</returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.Instance">
            <summary>
            static member, to return the same instance of this class
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.PdfStyleKey">
            <summary>
            This class represents key in styles hashtable
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.PdfStyleKey.Equals(TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.PdfStyleKey)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.PdfStyleKey.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.PdfStyleKey.DocType">
            <summary>
            Document type
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Pdf.PDFConfigurationService.PdfStyleKey.StyleType">
            <summary>
            StyleType
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Pdf.PDFService">
            <summary>
            PDFService 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFService.#ctor(DataAccess.Services.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Pdf.PDFService"/> class.
            </summary>
            <param name="serviceManager">The service manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFService.SaveLogo(System.Int32,System.String,System.Byte[])">
            <summary>
            Saves logo into DB
            </summary>
            <param name="companyId"></param>
            <param name="title"></param>
            <param name="picture"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFService.GetLogoPathByCompanyId(System.Int32)">
            <summary>
            Gets Local path to the logo.
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFService.GetPdfStyle(System.Int32,TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Gets <c>pdf</c> style for the document type mentioned.
            </summary>
            <param name="companyId">Creator company Id.</param>
            <param name="docType">Document type.</param>
            <returns>Loaded <c>pdf</c> syle.</returns>
            <exception cref="T:TRR.O2I.Common.Exceptions.PresentationLogicException">Throws when document style is not loaded.</exception>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFService.GetDefaultPdfStyle(TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Returns default (O2I) style for the document
            </summary>
            <param name="docType"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PDFService.FindCodecInfo(System.String)">
            <summary>
            find the image encoder
            </summary>
            <param name="description">Codec name.</param>
            <returns>Codec</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Pdf.PdfStyle">
            <summary>
            PdfStyle
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PdfStyle.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DocumentViewInfo class.
            </summary>
            <param name="name">View canonical name</param>
            <param name="fileName">View file name</param>
            <param name="bindingMapName">Binding schema definition name.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Pdf.PdfStyle.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the DocumentViewInfo class.
            </summary>
            <param name="name">View canonical name</param>
            <param name="fileName">View file name</param>
            <param name="bindingMapName">Binding schema definition name.</param>
            <param name="isCustom">Indicates that this style is custom.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Pdf.PdfStyle.Name">
            <summary>
            Gets view canonical name.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Pdf.PdfStyle.FileName">
            <summary>
            Gets or Sets view file name.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Pdf.PdfStyle.IsCustom">
            <summary>
            Gets or sets a value indicating whether this instance is custom.
            </summary>
            <value><c>true</c> if this instance is custom; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Pdf.PdfStyle.BindingMap">
            <summary>
            Gets view binding map name.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Pdf.PdfStyle.PrintName">
            <summary>
            Gets or sets the name of the print.
            </summary>
            <value>The name of the print.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.POStatus">
            <summary>
            Represents OMT PO status to be updated.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.POStatus.Accepted">
            <summary>Accepted</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.POStatus.AcceptedWithChanges">
            <summary>AcceptedWithChanges</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.POStatus.Rejected">
            <summary>Rejected</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.POStatus.New">
            <summary>New</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.POStatus.ASNProcessed">
            <summary>ASN processed</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.POStatus.INVProcessed">
            <summary>INV processed</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.POStatus.CAProcessed">
            <summary>CA processed</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.POStatus.GRProcessed">
            <summary>GR processed</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.POStatus.ManualDone">
            <summary>Manual done</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.POStatus.Processing">
            <summary>Processing</summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.PropertyComparer.IOrderPropertyComparer`1">
            <summary>
            Compare Order Property 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PropertyComparer.IOrderPropertyComparer`1.RememberValueToCompare(`0)">
            <summary>
            Remembers the value to compare.
            </summary>
            <param name="order">The order.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PropertyComparer.IOrderPropertyComparer`1.Compare(`0)">
            <summary>
            Compares the specified order.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PropertyComparer.ControlKeyPurchaseOrderPropertyComparer.RememberValueToCompare(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Remembers the value to compare.
            </summary>
            <param name="order">The order.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PropertyComparer.ControlKeyPurchaseOrderPropertyComparer.Compare(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Compares the specified order.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.PropertyComparer.ControlKeyOrderPropertyComparer">
            <summary>
            Compare orders by ControlKey property value
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PropertyComparer.ControlKeyOrderPropertyComparer.RememberValueToCompare(TRR.O2I.DataAccess.Entities.IOrderComposite)">
            <summary>
            Remembers the value to compare.
            </summary>
            <param name="order">The order.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PropertyComparer.ControlKeyOrderPropertyComparer.Compare(TRR.O2I.DataAccess.Entities.IOrderComposite)">
            <summary>
            Compares the specified order.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.PropertyComparer.AccountCodeOrderPropertyComparer">
            <summary>
            Compare orders by AccountCode property value
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PropertyComparer.AccountCodeOrderPropertyComparer.RememberValueToCompare(TRR.O2I.DataAccess.Entities.IOrderComposite)">
            <summary>
            Remembers the value to compare.
            </summary>
            <param name="order">The order.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PropertyComparer.AccountCodeOrderPropertyComparer.Compare(TRR.O2I.DataAccess.Entities.IOrderComposite)">
            <summary>
            Compares the specified order.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.AlertSender">
            <summary>
            Alert sender
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IAlertSender">
            <summary>
            Sends alerts.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAlertSender.SendDocumentSuccessfulCompletionAlert(TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the document successful completion alert.
            </summary>
            <param name="documentInfo">The document info.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAlertSender.SendGRWithoutPOAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the GR without PO alert.
            </summary>
            <param name="documentInfo">The document info.</param>
            <param name="details">The details.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAlertSender.SendCOWithoutPOAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the CO without PO alert.
            </summary>
            <param name="details">The details.</param>
            <param name="documentInfo">The document info.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAlertSender.SendDuplicatePOAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the duplicate PO alert.
            </summary>
            <param name="details">The details.</param>
            <param name="documentInfo">The document info.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAlertSender.SendDuplicateGRAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the duplicate GR alert.
            </summary>
            <param name="details">The details.</param>
            <param name="documentInfo">The document info.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAlertSender.SendXsdValidationAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the XSD validation alert.
            </summary>
            <param name="details"></param>
            <param name="documentInfo">The document info.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAlertSender.SendDuplicateRAAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the duplicate RA alert.
            </summary>
            <param name="details">The details.</param>
            <param name="documentInfo">The info.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAlertSender.SendESRorINVRAlert(TRR.O2I.Common.Core.Logging.DocumentInfo,System.String)">
            <summary>
            Sends the Invoice Reponse or Entry Sheet Response Aler
            </summary>
            <param name="documentInfo"></param>
            <param name="responseCode"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AlertSender.#ctor(TRR.O2I.Common.Core.Logging.ITRLog,TRR.O2I.Common.Core.Localization.LocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.AlertSender"/> class.
            </summary>
            <param name="log">The log.</param>
            <param name="localizationManager">The localization manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AlertSender.SendDocumentSuccessfulCompletionAlert(TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the document successful completion alert.
            </summary>
            <param name="documentInfo">The document info.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AlertSender.SendGRWithoutPOAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the GR without PO alert.
            </summary>
            <param name="documentInfo">The document info.</param>
            <param name="details">The details.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AlertSender.SendCOWithoutPOAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the CO without PO alert.
            </summary>
            <param name="details">The details.</param>
            <param name="documentInfo"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AlertSender.SendDuplicatePOAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the duplicate PO alert.
            </summary>
            <param name="details">The details.</param>
            <param name="documentInfo"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AlertSender.SendDuplicateGRAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the duplicate GR alert.
            </summary>
            <param name="details">The details.</param>
            <param name="documentInfo"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AlertSender.SendXsdValidationAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the XSD validation alert.
            </summary>
            <param name="details"></param>
            <param name="documentInfo"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AlertSender.SendDuplicateRAAlert(System.String,TRR.O2I.Common.Core.Logging.DocumentInfo)">
            <summary>
            Sends the duplicate RA alert.
            </summary>
            <param name="details">The details.</param>
            <param name="documentInfo">The document info.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AlertSender.SendESRorINVRAlert(TRR.O2I.Common.Core.Logging.DocumentInfo,System.String)">
            <summary>
             Sends alert for processed ESR and INVR
            </summary>
            <param name="documentInfo"></param>
            <param name="responseCode"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.AlertSenderFactory">
            <summary>
            Factory for alerts sender
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AlertSenderFactory.Create">
            <summary>
            Creates new instance of alerts sender.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.AsnFactory">
            <summary>
            Factory to create asn.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnFactory.CreateASNFromOrderLines(System.Collections.Generic.IList{TRR.O2I.DataAccess.Entities.OrderLine})">
            <summary>
            Creates ASN from order lines.
            </summary>
            <param name="orderLines">Order lines list to create from.</param>
            <returns>Created ASN.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnFactory.CreateFromScratch(System.Int32,System.String)">
            <summary>
            Creates empty ASN using provided buyer company id.
            </summary>
            <param name="buyerCompanyId">Company ID.</param>
            <param name="accountCode">Account code.</param>
            <returns>Created ASN.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnFactory.AddOrderLines(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,TRR.O2I.BusinessLogic.Managers.LinesAndOrdersPack,System.Collections.Generic.IEnumerable{TRR.O2I.DataAccess.Entities.ShippedQuantityCounter})">
            <summary>
            Adds the order lines.
            </summary>
            <param name="asn">The asn.</param>
            <param name="pack">The temp object.</param>
            <param name="shippedQuantityList">The shipped quantity list.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnFactory.Insert(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,DataAccess.Services.IServiceManager)">
            <summary>
            Updates current asn in db.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnFactory.AddOrderLine(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,TRR.O2I.DataAccess.Entities.IOrderLineLite,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,System.Collections.Generic.IEnumerable{TRR.O2I.DataAccess.Entities.ShippedQuantityCounter})">
            <summary>
            Adds the order line.
            </summary>
            <param name="asn">The asn.</param>
            <param name="orderLine">The order line.</param>
            <param name="order">The order.</param>
            <param name="shippedQuantityList">The shipped quantity list.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnFactory.GetNewNumber(System.Int32)">
            <summary>
            Gets next free asn number.
            </summary>
            <param name="supplierId">Supplier Id for ASN number area selection.</param>
            <returns>Free asn number.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnFactory.UpdateRelatedOrderStatus(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Updates related ASN orders with status POStatus.ASNProcessed
            </summary>
            <param name="order">The order.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ASNManager">
            <summary>
            Summary description for ASNManager.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IAsnManager">
            <summary>
            Base interface for ASNManager
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAsnManager.IsAsnSent(TRR.O2I.DataAccess.Core.Entities.IAdvanceShipmentNoticeBase)">
            <summary>
            Determines whether ASN is sent.
            </summary>
            <param name="asnToCheck">The asn.</param>
            <returns>
            	<c>true</c> if ASN is sent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAsnManager.IsAsnSent(System.Int32)">
            <summary>
            Determines whether [is asn sent] [the specified asn id].
            </summary>
            <param name="asnId">The asn id.</param>
            <returns>
            	<c>true</c> if [is asn sent] [the specified asn id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAsnManager.GetAsnPurposeList">
            <summary>
            Gets the asn purpose list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAsnManager.GetAsnTermsOfDeliveryList">
            <summary>
            Gets the asn terms of delivery list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IASNManagerEngine">
            <summary>
            Base interface fro ASNManagerEngine
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNManager.GetOrdersList(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Gets orders list connected with current asn.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNManager.Send(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Sends current asn.
            </summary>
            <returns>true - if sent; false - otherwise.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNManager.AddShippedQuantity(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,TRR.O2I.DataAccess.Services.IShippedQuantityCounterGateway)">
            <summary>
            Adds the shipped quantity.
            </summary>
            <param name="asnToCheck">The asn to check.</param>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNManager.GetOrderLineIds``1(TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine})">
            <summary>
            Gets the order line ids list.
            </summary>
            <param name="lines">The lines.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNManager.Load(System.Int32)">
            <summary>
            Loads ASN object with given id.
            </summary>
            <param name="asnId">ASN id to load.</param>
            <returns>Loaded ASN object or null if failure.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNManager.IsAllPackagesContainItems(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Checks whether all packages contains packed line.
            </summary>
            <returns>true - if all packed contain items; false - otherwise.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNManager.IsAllLinesHaveOrderItemNumber(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Checks whether all items have filled Order Item Number.
            </summary>
            <returns>true - if all items have filled Order Item Number.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager">
            <summary>
            Encapsulates the party-related business logic.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IAsnOrderLineManager">
            <summary>
            Base interface for ASNOrderLineManager
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IAsnOrderLineManager.RetrieveDefaults(System.Int32)">
            <summary>
            Retrieves defaults for asn line with provided id.
            </summary>
            <param name="itemId">ASN Line Id to retrieve defaults for.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager.RetrieveDefaults(System.Int32)">
            <summary>
            Retrieves defaults for <c>asn</c> line with provided id.
            </summary>
            <param name="itemId">ASN Line Id to retrieve defaults for.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager.CheckLine(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine,DataAccess.Services.IServiceManager)">
            <summary>
            Saves the item.
            </summary>
            <param name="asnLine">The line.</param>
            <param name="serviceManager">The service manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager.RemoveItemInPackagesRecord(System.Int32,System.Int32)">
            <summary>
            Removes item in packages record.
            </summary>
            <param name="itemId"><see cref="T:TRR.O2I.DataAccess.Entities.ASNOrderLine"/> id.</param>
            <param name="packageId">Package ID.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager.IsShippedQuantityValid(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine,DataAccess.Services.IServiceManager)">
            <summary>
            Checks if quantity value for provided asn line is valid.
            </summary>
            <param name="asnLine">ASN Line to perform check on.</param>
            <param name="serviceManager">The service manager.</param>
            <returns>true - if valid; false - otherwise.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager.GetTotalPackedQuantity(TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.DataAccess.Entities.ASNItemPackageDescriptor})">
            <summary>
            Gets total packed quantity value for provided asn line. 
            </summary>
            <returns>Total packed quantity value for provided asn line.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager.GetTotalPackedQuantity(TRR.O2I.DataAccess.Entities.ASNOrderLine,TRR.O2I.DataAccess.Core.Entities.Interfaces.IBusinessEntityCollection)">
            <summary>
            Gets total packed quantity value for provided asn line. 
            </summary>
            <param name="itemsInPackages">All items in packages data.</param>
            <param name="asnLine"></param>
            <returns>Total packed quantity value for provided asn line.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager.IsTotalPackedQuantityLessThanAvailable(TRR.O2I.DataAccess.Entities.IAsnOrderLineBase,TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.DataAccess.Entities.ASNItemPackageDescriptor})">
            <summary>
            Checks if total packed quantity is less than total available.
            </summary>
            <param name="asnLine">ASN Order line to perform check on.</param>
            <param name="items">The items.</param>
            <returns>true - if less; false - otherwise.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager.GetTotalPackedQuantity(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,System.Int32)">
            <summary>
            Gets the total packed quantity.
            </summary>
            <param name="asn">The asn.</param>
            <param name="asnLineId">The asn line id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager.IsLineAssociatedWithOtherPackages(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,System.Int32,TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage)">
            <summary>
            Determines whether line is associated with other packages
            </summary>
            <param name="asn">The asn.</param>
            <param name="lineId">The line id.</param>
            <param name="package">The package.</param>
            <returns>
            	<c>true</c> if [is line associated with other packages] [the specified asn]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager.GetAsnLineById(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,System.Int32)">
            <summary>
            Gets the asn line by id.
            </summary>
            <param name="asn">The asn.</param>
            <param name="lineId">The line id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ASNOrderLineManager.IsUnpackedLinesExist(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Determines whether [is unpacked lines exist] [the specified asn].
            </summary>
            <param name="asn">The asn.</param>
            <returns>
            	<c>true</c> if [is unpacked lines exist] [the specified asn]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.AttachmentSerialization">
            <summary>
            Helper class for the attachment serialization
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AttachmentSerialization.BuildLineItemAttachmentXml(System.Collections.Generic.IList{TRR.O2I.DataAccess.Entities.IAttachmentRow})">
            <summary>
            Returns the attachments XML part for a line item. Currently is used only for ASN
            </summary>
            <param name="attachmentList">The attachment list.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AttachmentSerialization.AddAttachmentRef(TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity,System.Text.StringBuilder)">
            <summary>
            Add to the reference attachment XML part this attachment
            </summary>
            <param name="oneAttachment"></param>
            <param name="xmlDoc"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AttachmentSerialization.AddAttachmentXcbl4Ref(TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.AttachmentFlippingEntity,System.Text.StringBuilder)">
            <summary>
            Add to the reference attachment XML part this attachment for xCBL 4.0 format
            </summary>
            <param name="oneAttachment"></param>
            <param name="xmlDoc"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AttachmentSerialization.GetAttachmentsXmlForPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Gets the attachments XML for purchase order.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AttachmentSerialization.GetAttachmentsXmlForChangeOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Gets the attachments XML for change order.
            </summary>
            <param name="changeOrder">The change order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AttachmentSerialization.GetAttachmentsXmlForInvoice(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Gets the attachments XML for invoice.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AttachmentSerialization.GetAttachmentsXmlForSes(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet)">
            <summary>
            Gets the attachments XML for SES.
            </summary>
            <param name="ses">The SES.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AttachmentSerialization.GetASNAttachments(System.Int32,System.Boolean,TRR.O2I.BusinessLogic.Services.BuildOption)">
            <summary>
            Build the attachments XML for the ASN
            </summary>
            <param name="asnId"></param>
            <param name="attachmentReferenceXML"></param>
            <param name="buildOption"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BasketManagement.BasketEntityConfig">
            <summary>
            It's a bean class which hold information for a single document type.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.BasketEntityConfig.#ctor(TRR.O2I.Common.Core.DocumentType,System.Type)">
            <summary>
            Initializes a new instance of BasketEntityConfig class.
            </summary>
            <param name="documentType">Document type.</param>
            <param name="adapterType">Document adapter type.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BasketManagement.BasketEntityConfig.DocumentType">
            <summary>
            Gets document type.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BasketManagement.BasketEntityConfig.AdapterType">
            <summary>
            Gets adapter type.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter">
            <summary>
            GR basket entity adapter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter.#ctor(TRR.O2I.Common.Core.IContextInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter.GetOriginalGoodsReceipts(DataAccess.Services.IServiceManager)">
            <summary>
            Retrives real documents from db.
            </summary>
            <param name="manager">The manager.</param>
            <returns>Documents.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter.GetReturnedGoodsReceipts(DataAccess.Services.IServiceManager)">
            <summary>
            Gets the returned goods receipts.
            </summary>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter.Add(TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt,DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.Basket.IRelatedGRsBasketPlacementStrategy)">
            <summary>
            Adds document sensitive information into basket entity.
            </summary>
            <param name="goodsReceipt">The goods receipt.</param>
            <param name="manager">The manager.</param>
            <param name="relatedGRsBasketPlacementStrategy"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter.DeleteAll(DataAccess.Services.IServiceManager)">
            <summary>
            Deletes all goods receipts from basket.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter.Delete(System.Int32,DataAccess.Services.IServiceManager)">
            <summary>
            Deletes basket entity with provided id.
            </summary>
            <param name="basketId">Basket entity to be deleted.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter.SearchOriginalGoodsReceipt(TRR.O2I.DataAccess.Services.Core.PaginationCriteria,DataAccess.Services.IServiceManager)">
            <summary>
            Searches the new goods receipt.
            </summary>
            <param name="paginationCriteria">The pagination criteria.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter.SearchReturnedGoodsReceipt(TRR.O2I.DataAccess.Services.Core.PaginationCriteria,DataAccess.Services.IServiceManager)">
            <summary>
            Searches the new goods receipt.
            </summary>
            <param name="paginationCriteria">The pagination criteria.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter.SearchProcessedGoodsReceipt(TRR.O2I.DataAccess.Services.Core.PaginationCriteria,DataAccess.Services.IServiceManager)">
            <summary>
            Searches the processed goods receipt.
            </summary>
            <param name="paginationCriteria">The pagination criteria.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.GRBasketEntityAdapter.RemoveGoodsReceipts(DataAccess.Services.IServiceManager,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt})">
            <summary>
            Removes the goods receipts.
            </summary>
            <param name="manager">The manager.</param>
            <param name="receipts">The receipts.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BasketManagement.POBasketEntityAdapter">
            <summary>
            PO basket entity adapter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POBasketEntityAdapter.#ctor(TRR.O2I.Common.Core.IContextInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BasketManagement.POBasketEntityAdapter"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POBasketEntityAdapter.RetrieveDocuments(DataAccess.Services.IServiceManager)">
            <summary>
            Retrives real documents from db.
            </summary>
            <param name="manager">The manager.</param>
            <returns>Documents.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POBasketEntityAdapter.Add(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,DataAccess.Services.IServiceManager)">
            <summary>
            Adds document sensitive information into basket entity.
            </summary>
            <param name="order">Document containing sensitive data.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POBasketEntityAdapter.DeleteAll(DataAccess.Services.IServiceManager)">
            <summary>
            Deletes all orders from basket.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POBasketEntityAdapter.GetBasketItems(TRR.O2I.DataAccess.Services.Core.PaginationCriteria,DataAccess.Services.IServiceManager)">
            <summary>
            Gets the basket items.
            </summary>
            <param name="paginationCriteria">The pagination criteria.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POBasketEntityAdapter.Delete(System.Int32,DataAccess.Services.IServiceManager)">
            <summary>
            Deletes basket entity with provided id.
            </summary>
            <param name="basketId">Basket entity to be deleted.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POBasketEntityAdapter.DeleteBasket(System.Int32,DataAccess.Services.IServiceManager)">
            <summary>
            Deletes the basket.
            </summary>
            <param name="basketId">The basket id.</param>
            <param name="service">The service.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BasketManagement.POLBasketEntityAdapter">
            <summary>
            Summary description for POLBasketEntityAdapter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POLBasketEntityAdapter.#ctor(TRR.O2I.Common.Core.IContextInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BasketManagement.POLBasketEntityAdapter"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POLBasketEntityAdapter.RetrieveDocuments(DataAccess.Services.IServiceManager)">
            <summary>
            Retrives real documents from db.
            </summary>
            <param name="manager">The manager.</param>
            <returns>Documents.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POLBasketEntityAdapter.Add(TRR.O2I.DataAccess.Entities.OrderLine,DataAccess.Services.IServiceManager)">
            <summary>
            Adds document sensitive information into basket entity.
            </summary>
            <param name="line">The order line.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POLBasketEntityAdapter.Delete(System.Int32,DataAccess.Services.IServiceManager)">
            <summary>
            Deletes basket entity from db.
            </summary>
            <param name="basketId">Basket entity id to be deleted.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POLBasketEntityAdapter.DeleteAll(DataAccess.Services.IServiceManager)">
            <summary>
            Deletes all lines from basket.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POLBasketEntityAdapter.GetParentOrderLineBasketItems(TRR.O2I.DataAccess.Services.Core.PaginationCriteria,DataAccess.Services.IServiceManager)">
            <summary>
            Gets the order lines basket items int.
            </summary>
            <param name="paginationCriteria">The pagination criteria.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManagement.POLBasketEntityAdapter.GetOrderLineSubItems(System.Int32,DataAccess.Services.IServiceManager)">
            <summary>
            Gets the order line sub items int.
            </summary>
            <param name="parentLineId">The parent order line id.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BasketManager">
            <summary>
            Encapsulates the party-related business logic.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.#ctor(DataAccess.Services.IServiceManager,TRR.O2I.Common.Core.IContextInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BasketManager"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.AddOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Adds the purchase order into basket.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.AddGoodsReceipt(TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.Basket.IRelatedGRsBasketPlacementStrategy)">
            <summary>
            Adds the goods receipt.
            </summary>
            <param name="gr">The gr.</param>
            <param name="relatedGRsBasketPlacementStrategy"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.AddOrderLine(TRR.O2I.DataAccess.Entities.OrderLine)">
            <summary>
            Adds the order line.
            </summary>
            <param name="line">The order line</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.SelectOriginalGoodsReceipts(TRR.O2I.DataAccess.Services.Core.PaginationCriteria)">
            <summary>
            Selects the new goods receipts.
            </summary>
            <param name="paginationCriteria">The pagination criteria.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.SelectReturnedGoodsReceipts(TRR.O2I.DataAccess.Services.Core.PaginationCriteria)">
            <summary>
            Selects the new goods receipts.
            </summary>
            <param name="paginationCriteria">The pagination criteria.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.SelectProcessedGoodsReceipts(TRR.O2I.DataAccess.Services.Core.PaginationCriteria)">
            <summary>
            Selects the processed goods receipts.
            </summary>
            <param name="paginationCriteria">The pagination criteria.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.GetParentOrderLineBasketItems(TRR.O2I.DataAccess.Services.Core.PaginationCriteria)">
            <summary>
            Gets the order lines.
            </summary>
            <param name="paginationCriteria">The order lines settings.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.GetOrderLineSubItems(System.Int32)">
            <summary>
            Gets the order line sub items.
            </summary>
            <param name="lineId">The document id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.GetOrderBasketItems(TRR.O2I.DataAccess.Services.Core.PaginationCriteria)">
            <summary>
            Gets the orders.
            </summary>
            <param name="criteria">The orders settings.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.GetOrderLines">
            <summary>
            Gets the order lines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.GetOrders">
            <summary>
            Gets the orders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.GetOriginalGoodsReceipts">
            <summary>
            Gets the goods receipts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.DeleteOrderLines">
            <summary>
            Deletes the order lines.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.DeleteOrders">
            <summary>
            Deletes the orders.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.DeleteAllGoodsReceipts">
            <summary>
            Deletes the goods receipts.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.DeleteGoodsReceipt(System.Int32)">
            <summary>
            Deletes the gooods receipt.
            </summary>
            <param name="basketId">The item id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.DeleteOrder(System.Int32)">
            <summary>
            Deletes the order.
            </summary>
            <param name="basketId">The item id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.DeleteOrderLine(System.Int32)">
            <summary>
            Deletes the order line.
            </summary>
            <param name="basketId">The item id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.GetReturnedGoodsReceipts">
            <summary>
            Gets the returned goods receipts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BasketManager.RemoveGoodsReceiptsFromBasket(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt})">
            <summary>
            Deletes the goods receipts from basket.
            </summary>
            <param name="receipts">The receipts.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Exceptions.BuildAsnFromMultiplyBuyersException">
            <summary>
            Thrown while asn creating from different buyers
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.BuildOption">
            <summary>
            BuildOption enumeration.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.BuildOption.HeaderAttachments">
            <summary>
            HeaderAttachments BuildOption
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.BuildOption.LineItemAttachments">
            <summary>
            LineItemAttachments BuildOption
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.BuildOption.AllAttachments">
            <summary>
            AllAttachments BuildOption
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder">
            <summary>
            Builder for business settings
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.InitMergingKey">
            <summary>
            Inits the merging key.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.InitDefaultBuyerSettings(TRR.O2I.BusinessLogic.Core.Workflow.TripName)">
            <summary>
            Inits the default buyer settings.
            </summary>
            <param name="tripName">Name of the trip.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.GetBusinessSettings">
            <summary>
            Gets the business settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.GetMergingKey">
            <summary>
            Gets the merging key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.AddPreSendInvoiceAction(TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.PreSendActions.IPreSendInvoiceAction)">
            <summary>
            Adds pre-send invoice action
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.AllowedInvoiceFromScratch">
            <summary>
            Sets a value indicating whether [allowed invoice from scratch].
            </summary>
            <value>
            	<c>true</c> if [allowed invoice from scratch]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.AllowedAsnFromScratch">
            <summary>
            Sets a value indicating whether [allowed asn from scratch].
            </summary>
            <value>
            	<c>true</c> if [allowed asn from scratch]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.OrderLinesImportStrategyFactory">
            <summary>
            Gets or sets the order lines import strategy factory.
            </summary>
            <value>The order lines import strategy factory.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.ReceiptItemsImportStrategyFactory">
            <summary>
            Gets or sets the receipt items import strategy factory.
            </summary>
            <value>The receipt items import strategy factory.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.Country">
            <summary>
            Sets the country.
            </summary>
            <value>The country.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.PendingInvoicesProcessingStrategy">
            <summary>
            Sets the pending invoices processing strategy.
            </summary>
            <value>The pending invoices processing strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.PendingInvoicesRecalculationStrategy">
            <summary>
            Gets or sets the pending invoices recalculation strategy.
            </summary>
            <value>The pending invoices recalculation strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.NonexistentLineChangeTypeCoded">
            <summary>
            Sets the unexisted line change type coded.
            </summary>
            <value>The unexisted line change type coded.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.DefaultTaxStrategy">
            <summary>
            Sets the invoice default tax strategy.
            </summary>
            <value>The invoice default tax strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.LockNotActiveInvoiceStrategy">
            <summary>
            Sets a value indicating whether [lock not active invoice].
            </summary>
            <value>
            	<c>true</c> if [lock not active invoice]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.PendingAsnProcessingStrategy">
            <summary>
            Sets the pending asns processing strategy.
            </summary>
            <value>The pending asns processing strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.LockNotActiveAsnStrategy">
            <summary>
            Sets a value indicating whether [lock not active asn].
            </summary>
            <value><c>true</c> if [lock not active asn]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.OrderTypeDefinitionStrategy">
            <summary>
            Sets the order type definition strategy.
            </summary>
            <value>The order type definition strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.OrderPreferencesBuildStrategy">
            <summary>
            Sets the order preferences build strategy.
            </summary>
            <value>The order preferences build strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.DefaultBankAccountInformationProvider">
            <summary>
            Sets the default bank account information provider.
            </summary>
            <value>The default bank account information provider.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.ConfigurableParameters">
            <summary>
            Sets the configurable parameters.
            </summary>
            <value>The configurable parameters.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.IncludedTrips">
            <summary>
            Sets the included TRIPs.
            </summary>
            <value>The included TRI ps.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.Roles">
            <summary>
            Sets the roles.
            </summary>
            <value>The roles.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.BuyerSettings">
            <summary>
             Inits the buyer settings
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.CheckPendingInvoiceExistanceWhileInvoiceCreationFromGRStrategy">
            <summary>
            Gets or sets CheckPendingInvoiceExistanceWhileInvoiceCreationFromGRStrategy
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.RelatedGRsBasketPlacementStrategy">
            <summary>
            Gets or sets RelatedGRsBasketPlacementStrategy
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.PreSendInvoiceActions">
            <summary>
            Gets or sets a list of action which should be executed before invoice sending
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.SubsequentInvoiceTaxApplier">
            <summary>
            Gets or sets SINV tax applier.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.UpdateInvoiceStrategyFactory">
            <summary>
            Gets or set UpdateInvoiceStrategyFactory
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.OrderLineTypeDefinitionStrategyFactory">
            <summary>
            Gets or sets OrderLineTypeDefinitionStrategyFactory
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.UpdatePOWhileCOMergingRulesRunnerFactory">
            <summary>
            Gets or sets UpdatePOWhileCOMergingRulesRunnerFactory
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsBuilder.ChangeOrderShreddingLineTypeResolver">
            <summary>
            Gets ChangeOrderShreddingLineTypeResolver
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsFactory">
            <summary>
            Factory for business settings
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsFactory.Load(System.Nullable{System.Int32},System.Int32,System.Nullable{TRR.O2I.Common.Core.SupplierCountry},DataAccess.Services.IServiceManager)">
            <summary>
            Loads the business settings
            </summary>
            <param name="buyerId">The buyer id.</param>
            <param name="supplierId">The supplier id.</param>
            <param name="supplierCountry">The supplier country.</param>
            <param name="serviceManager">The service manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsFactory.GetCurrentBusinessSettings(System.Int32,System.Nullable{TRR.O2I.Common.Core.SupplierCountry})">
            <summary>
            Gets the current business settings.
            </summary>
            <param name="buyerId">The buyer id.</param>
            <param name="supplierCountry">The supplier country.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsFactory.GetDocumentSpecificSettings(System.Int32,System.Nullable{TRR.O2I.BusinessLogic.BusinessEntity.Enums.ControlKey},TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey,System.Nullable{TRR.O2I.Common.Core.SupplierCountry})">
            <summary>
            Gets the document specific settings.
            </summary>
            <param name="buyerId">The buyer id.</param>
            <param name="controlKey">The control key.</param>
            <param name="orderTypeKey">The order type key.</param>
            <param name="supplierCountry">The supplier country.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsFactory.GetWorkflowMergingKey(System.Nullable{System.Int32},System.Nullable{TRR.O2I.Common.Core.SupplierCountry})">
            <summary>
            Gets the workflow merging key.
            </summary>
            <param name="buyerId">The buyer id.</param>
            <param name="supplierCountry">The supplier country.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsFactory.GetDocumentNumberGenerator(DataAccess.Services.IServiceManager,System.Int32,TRR.O2I.BusinessLogic.BusinessEntity.Enums.DocumentType,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Gets a Document Number Generator
            </summary>
            <param name="manager">Service Maanger</param>
            <param name="buyerId">Buyer Id</param>
            <param name="documentType">Corresponding Document Type</param>
            <param name="orderTypeKey">Order Type Key ("null" in case of document from scratch)</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsFactory.GetDocumentNumberGenerator(DataAccess.Services.IServiceManager,System.Int32,TRR.O2I.BusinessLogic.BusinessEntity.Enums.DocumentType,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey,System.Nullable{TRR.O2I.Common.Core.SupplierCountry})">
            <summary>
            Gets a Document Number Generator
            </summary>
            <param name="manager">Service Maanger</param>
            <param name="buyerId">Buyer Id</param>
            <param name="documentType">Corresponding Document Type</param>
            <param name="orderTypeKey">Order Type Key ("null" in case of document from scratch)</param>
            <param name="supplierCountry">Supplier country</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsFactory.GetInvoiceNumberGenerator(DataAccess.Services.IServiceManager,System.Nullable{TRR.O2I.Common.Core.SupplierCountry})">
            <summary>
            Gets a Invoice Number Generator
            </summary>
            <param name="manager">Service Maanger</param>
            <param name="supplierCountry">Supplier country</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DenyIfOrderResponsesNotSentRule">
            <summary>
            Denies invoice creation if no order response was sent.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.DenyIfOrderResponsesNotSentRule.CheckSequence(System.Collections.Generic.IList{TRR.O2I.DataAccess.Core.Entities.DocumentSequenceElement})">
            <summary>
            Checks documents the sequence.
            </summary>
            <param name="sequence">The sequence.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.AlwaysAllowedRule">
            <summary>
            This rule alway allows document creation
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.AlwaysAllowedRule.Check(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Checks if document can be created from  specified orders;
            </summary>
            <param name="orderIds">The order ids.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.AlwaysDeniedRule">
            <summary>
            This rule always denies document creation
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.AlwaysDeniedRule.Check(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Checks if document can be created from  specified orders;
            </summary>
            <param name="orderIds">The order ids.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster">
            <summary>
            Manages document creation.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.IDocumentCreationAdjuster">
            <summary>
            Manages document creation.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.IDocumentCreationAdjuster.CheckInvoiceFromPurchaseOrder(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order},TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceType)">
            <summary>
            Checks whether it is allowed to create invoice from purchase order.
            </summary>
            <param name="orders">The order ids.</param>
            <param name="businessSettings"></param>
            <param name="invoiceType">The invoice type.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.IDocumentCreationAdjuster.CheckInvoiceFromGoodsReceipt(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order})">
            <summary>
            Checks whether it is allowed to create invoice from goods receipt.
            </summary>
            <param name="orders">The order ids.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.IDocumentCreationAdjuster.AllowedInvoiceFromGoodsReceipt(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order[])">
            <summary>
            Indicates whether it is allowed to create invoice from goods receipt.
            </summary>
            <param name="orders">The orders.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.IDocumentCreationAdjuster.CheckAsnFromPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Checks whether it is allowed to create asn from purchase order.
            </summary>
            <param name="order">The order ids.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.IDocumentCreationAdjuster.AllowedAsnFromPurchaseOrder(System.Int32)">
            <summary>
            Indicates whether it is allowed to create asn from purchase order.
            </summary>
            <param name="orderId">The order id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.IDocumentCreationAdjuster.AllowedInvoiceFromPurchaseOrder(System.Int32)">
            <summary>
            Indicates whether it is allowed to create invoice from purchase order.
            </summary>
            <param name="orderId">The order id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.IDocumentCreationAdjuster.AllowedEntrySheetFromPurchaseOrder(System.Int32)">
            <summary>
             Indicates whether it is allowed to create an entry sheet from purchase order.
            </summary>
            <param name="orderId"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.#ctor(TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRule,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRule,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRule,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRule)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster"/> class.
            </summary>
            <param name="invoiceFromPurchaseOrderRule">The invoice from purchase order rule.</param>
            <param name="invoiceFromGoodsReceiptRule">The invoice from goods receipt rule.</param>
            <param name="asnFromPurchaseOrderRule">The asn from purchase order rule.</param>
            <param name="entrySheetFromOrderRule">The entry sheet from order rule.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.CheckInvoiceFromPurchaseOrder(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order},TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceType)">
            <summary>
            Indicates whether it is allowed to create invoice from purchase order.
            </summary>
            <param name="orders">The orders.</param>
            <param name="businessSettings"></param>
            <param name="invoiceType">The invoice type.</param>
            <value>
            	<c>true</c> if allowed to create invoice from purchase order; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.AllowedInvoiceFromPurchaseOrder(System.Int32)">
            <summary>
            Indicates whether it is allowed to create invoice from purchase order.
            </summary>
            <param name="orderId"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.AllowedEntrySheetFromPurchaseOrder(System.Int32)">
            <summary>
             Indicates whether it is allowed to create an entry sheet from purchase order.
            </summary>
            <param name="orderId"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.CheckInvoiceFromGoodsReceipt(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order})">
            <summary>
            Indicates whether it is allowed to create invoice from goods receipt.
            </summary>
            <param name="orders">The order ids.</param>
            <value>
            	<c>true</c> if allowed to create invoice from goods receipt; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.AllowedInvoiceFromGoodsReceipt(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order[])">
            <summary>
            Check wether it allowed to create invoice from goods receipt.
            </summary>
            <param name="orders">The orders.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.CheckAsnFromPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Indicates whether it is allowed to create invoice from purchase order.
            </summary>
            <param name="order">The order ids.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.AllowedAsnFromPurchaseOrder(System.Int32)">
            <summary>
            Indicates whether it is allowed to create asn from purchase order.
            </summary>
            <param name="orderId"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.CheckEntrySheetFromOrderLinesCreationAbility(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderHistory)">
            <summary>
            Checks whether it's allowed to create an Entry Sheet.
            </summary>
            <param name="entrySheet"></param>
            <param name="serviceManager"></param>
            <param name="orderHistory"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.CheckEntrySheetRecreationAbility(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderHistory)">
            <summary>
            Checks the entry sheet recreation ability.
            </summary>
            <param name="entrySheet">The entry sheet.</param>
            <param name="serviceManager">The service manager.</param>
            <param name="orderHistory">The order history.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.CheckEntrySheetCopyCreationAbility(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderHistory)">
            <summary>
            Checks whether it's allowed to create a copy of an Entry Sheet
            </summary>
            <param name="entrySheet"></param>
            <param name="serviceManager"></param>
            <param name="orderHistory"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.OrderLineStatusMatches(TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine)">
            <summary>
             Checks whether it's possible to create a ES line from a po line with the status specified in it.
            </summary>
            <param name="subLine"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationAdjuster.CheckSebsequentInvoiceCreationAbility(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,DataAccess.Services.IServiceManager,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Checks whether it's possible to create a subsequent invoice.
            </summary>
            <param name="originalInvoice"></param>
            <param name="order"></param>
            <param name="serviceManager"></param>
            <param name="selectedLineIds"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.DocumentCreationDeniedException">
            <summary>
            Thrown if document creation is denied
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.OrderResponsesNotSentException">
            <summary>
            Thrown if document creation denied in case if no order response sent
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.OrderResponsesNotSentException.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
             Public constructor
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Exceptions.OrderResponsesNotSentException.Order">
            <summary>
             Pending Order
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice">
            <summary>
            TODO: This businessEntity is not yet fully implemented. 
            AdvanceShipmentNotice
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.Copy(TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.IDocumentNumberGenerator)">
            <summary>
            Copies ASN using the specified generator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.GetAsnPackageById(System.Int32)">
            <summary>
            Gets the asn package by id.
            </summary>
            <param name="packageId">The package id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.GetLineById(System.Int32)">
            <summary>
            Gets the line by id.
            </summary>
            <param name="lineId">The fk.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.GetStructuredNoteById(System.Int32)">
            <summary>
            Gets the structured notes by id.
            </summary>
            <param name="structuredNoteID">The structured note ID.</param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.BuyerParty">
            <summary>
            Gets or sets the buyer party.
            </summary>
            <value>The buyer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.SellerParty">
            <summary>
            Gets or sets the seller party.
            </summary>
            <value>The buyer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.ShipToParty">
            <summary>
            Gets or sets the ShipTo party.
            </summary>
            <value>The buyer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.TermsOfDelivery">
            <summary>
            Gets or sets the terms of delivery.
            </summary>
            <value>The terms of delivery.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.PaymentInstruction">
            <summary>
            Gets or sets the payment instruction.
            </summary>
            <value>The payment instruction.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.DataObject">
            <summary>
            Gets the data object.
            </summary>
            <value>The data object.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.Attachments">
            <summary>
            Gets or sets the attachments.
            </summary>
            <value>The attachments.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.Packages">
            <summary>
            Gets or sets the packages.
            </summary>
            <value>The packages.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.Lines">
            <summary>
            Gets or sets the lines.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.StructuredNotes">
            <summary>
            Gets or sets the structured notes.
            </summary>
            <value>The structured notes.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.TransportRoutings">
            <summary>
            Gets or sets the transport routings.
            </summary>
            <value>The transport routings.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.IsSaved">
            <summary>
            Gets or sets a value indicating whether this instance is saved.
            </summary>
            <value><c>true</c> if this instance is saved; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice.OrderCompositeFK">
            <summary>
            Gets or sets the OrderCompositeFK the ASN has been created from.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.#ctor(TRR.O2I.DataAccess.Entities.IAdvanceShipmentNoticeRow)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice"/> class.
            </summary>
            <param name="asnRow">The asn row.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.#ctor(TRR.O2I.DataAccess.Entities.IAdvanceShipmentNoticeRow,TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment},TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage},TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine},TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.DataAccess.Entities.IStructuredNote},TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.DataAccess.Entities.ITransportRouting})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice"/> class.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="attachments">The attachments.</param>
            <param name="packages">The packages.</param>
            <param name="lines">The lines.</param>
            <param name="structuredNotes">The structured notes.</param>
            <param name="transportRoutings">The transport routings.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.Copy(TRR.O2I.BusinessLogic.Managers.DocumentNumberGenerators.IDocumentNumberGenerator)">
            <summary>
            Copies ASN using the specified generator.
            </summary>
            <param name="generator">The generator.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.GetAsnPackageById(System.Int32)">
            <summary>
            Gets the asn package by id.
            </summary>
            <param name="packageId">The package id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.GetLineById(System.Int32)">
            <summary>
            Gets the line by id.
            </summary>
            <param name="lineId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.GetStructuredNoteById(System.Int32)">
            <summary>
            Gets the structured notes by id.
            </summary>
            <param name="structuredNoteID">The structured note ID.</param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ASNId">
            <summary>
            The primary key for the ASN.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ASNNumber">
            <summary>
            Gets or sets ASN number.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ASNIssueDate">
            <summary>
            Gets or sets ASN issue date.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.TrackingNumber">
            <summary>
            Gets or sets ASN tracking number.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ASNPurposeCodeFK">
            <summary>
            Gets or sets ASN purpose code foreign key.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.DeliveryDate">
            <summary>
            Gets or sets ASN delivery date.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ShippedDate">
            <summary>
            Gets or sets ASN shipped date.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.SellerPartyFK">
            <summary>
            Gets or sets foreign key to ASN seller party.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.BuyerPartyFK">
            <summary>
            Gets or sets foreign key to ASN buyer party.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ShipToPartyFK">
            <summary>
            Gets or sets foreign key to ASN ShipTo party.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.TermsOfDeliveryFK">
            <summary>
            Gets or sets ASN terms of delivery foreign key.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.PaymentInstructionFK">
            <summary>
            Gets or sets ASN payment instruction foreign key.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ASNHeaderNote">
            <summary>
            Gets or sets ASN payment instruction foreign key.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ASNTypeCodedFK">
            <summary>
            Gets or sets ASN type foreign key.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ASNStatusCodedFK">
            <summary>
            Gets or sets ASN status foreign key.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.CreateDate">
            <summary>
            Gets or sets creation date.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.EarliestDeliveryDate">
            <summary>
            Gets or sets EarliestDeliveryDate date.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.LatestDeliveryDate">
            <summary>
            Gets or sets LatestDeliveryDate date.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.CollectionDateOfCargo">
            <summary>
            Gets or sets CollectionDateOfCargo date.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ScheduleDeliveryDateBefore">
            <summary>
            Gets or sets ScheduleDeliveryDateBefore date.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ScheduleDeliveryDateAfter">
            <summary>
            Gets or sets ScheduleDeliveryDateAfter date.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.DeliveryNoteNumber">
            <summary>
            Gets or sets DeliveryNoteNumber.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.CreatedFromScratch">
            <summary>
            Represents the CreatedFromScratch onvoice flag
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.PlantID">
            <summary>
            Gets or Sets Plant ID
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.BuyerAgencyName">
            <summary>
            Buyer agency name 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.SellerAgencyName">
            <summary>
            Seller agency name 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ShipToAgencyName">
            <summary>
            Buyer agency name 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.BuyerParty">
            <summary>
            Gets or sets the buyer party.
            </summary>
            <value>The buyer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.SellerParty">
            <summary>
            Gets or sets the seller party.
            </summary>
            <value>The buyer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.ShipToParty">
            <summary>
            Gets or sets the ShipTo party.
            </summary>
            <value>The buyer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.TermsOfDelivery">
            <summary>
            Gets or sets the terms of delivery.
            </summary>
            <value>The terms of delivery.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.PaymentInstruction">
            <summary>
            Gets or sets the payment instruction.
            </summary>
            <value>The payment instruction.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.BuyerID">
            <summary>
            Gets/sets buyer id.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.SupplierID">
            <summary>
            Defines the SupplierID
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.AccountCode">
            <summary>
            Defines the AccountCode 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.DataObject">
            <summary>
            Gets the data object.
            </summary>
            <value>The data object.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.Attachments">
            <summary>
            Gets or sets the attachments.
            </summary>
            <value>The attachments.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.Packages">
            <summary>
            Gets or sets the packages.
            </summary>
            <value>The packages.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.Lines">
            <summary>
            Gets or sets the lines.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.StructuredNotes">
            <summary>
            Gets or sets the structured notes.
            </summary>
            <value>The structured notes.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.TransportRoutings">
            <summary>
            Gets or sets the transport routings.
            </summary>
            <value>The transport routings.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.IsSaved">
            <summary>
            Gets or sets a value indicating whether this instance is saved.
            </summary>
            <value><c>true</c> if this instance is saved; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AdvanceShipmentNotice.OrderCompositeFK">
            <summary>
            Gets or sets the OrderCompositeFK the ASN has been created from.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnMapper">
            <summary>
            Mapper for loading/saving asn entities
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnMapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnMapper.Select(System.Int32)">
            <summary>
            Selects the specified asn id.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnMapper.LazySelect(System.Int32)">
            <summary>
            Selects the specified asn id.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnMapper.Update(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Updates the specified asn.
            </summary>
            <param name="asn">The asn.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnMapper.Insert(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Inserts the specified asn.
            </summary>
            <param name="asn">The asn.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnMapper.DeleteAsn(System.Int32)">
            <summary>
            Deletes the asn.
            </summary>
            <param name="asnId">The asn id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnMapper.GetPendingAsns(System.Int32)">
            <summary>
            Gets the pending asns.
            </summary>
            <param name="orderCompositeId">The order composite id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnMapper.#ctor(DataAccess.Services.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnMapper"/> class.
            </summary>
            <param name="serviceManager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnMapper.Select(System.Int32,TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnLoadStrategy)">
            <summary>
            Selects the specified asn by id using corresponding strategy.
            </summary>
            <param name="asnId">The asn id.</param>
            <param name="strategy">The strategy.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnMapper.Select(System.Int32)">
            <summary>
            Selects the specified asn id.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnMapper.LazySelect(System.Int32)">
            <summary>
            Selects the specified asn id.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnMapper.Update(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Updates the specified asn.
            </summary>
            <param name="asn">The asn.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnMapper.Insert(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Inserts the specified asn.
            </summary>
            <param name="asn">The asn.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnMapper.DeleteAsn(System.Int32)">
            <summary>
            Deletes the asn.
            </summary>
            <param name="asnId">The asn id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnMapper.GetPendingAsns(System.Int32)">
            <summary>
            Gets the pending asns.
            </summary>
            <param name="orderCompositeId">The order composite id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnMapper.SaveRelatedEntities(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Saves all related entities with sub entities.
            </summary>
            <param name="asn">The asn.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine">
            <summary>
            
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine.DataObject">
            <summary>
            Gets the data object.
            </summary>
            <value>The data object.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine.Attachments">
            <summary>
            Gets or sets the attachments.
            </summary>
            <value>The attachments.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine.StructuredNotes">
            <summary>
            Gets or sets the structured notes.
            </summary>
            <value>The structured notes.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine.Packages">
            <summary>
            Gets or sets the packages.
            </summary>
            <value>The packages.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine.ShippedPreviouslyQuantityValue">
            <summary>
            Gets or sets the shipped previously quantity value.
            </summary>
            <value>The shipped previously quantity value.</value>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.#ctor(TRR.O2I.DataAccess.Entities.IAsnOrderLineRow)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine"/> class.
            </summary>
            <param name="dataObject">The data object.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.#ctor(TRR.O2I.DataAccess.Entities.IAsnOrderLineRow,TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment},TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.DataAccess.Entities.IASNLineStructuredNote},TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.DataAccess.Entities.ASNItemPackageDescriptor},System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine"/> class.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="attachments">The attachments.</param>
            <param name="structuredNotes">The structured notes.</param>
            <param name="packages">The packages.</param>
            <param name="shippedPreviouslyQuantityValue">The shipped previously quantity value.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.DataObject">
            <summary>
            Gets the data object.
            </summary>
            <value>The data object.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.Attachments">
            <summary>
            Gets or sets the attachments.
            </summary>
            <value>The attachments.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.StructuredNotes">
            <summary>
            Gets or sets the structured notes.
            </summary>
            <value>The structured notes.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.Packages">
            <summary>
            Gets or sets the packages.
            </summary>
            <value>The packages.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.ASNOrderLineId">
            <summary>
            The primary key for the ASN order line.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.ASNFK">
            <summary>
            Gets or sets ASN foreign key.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.OrderLineFK">
            <summary>
            Gets or sets order line foreign key.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.OrderCompositeFK">
            <summary>
            Gets or sets purchase order foreign key.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.BuyerID">
            <summary>
            Gets/sets the BuyerID
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.BuyerLineItemNum">
            <summary>
            Gets or sets buyer line item number.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.SellerLineItemNum">
            <summary>
            Gets or sets Seller line item number.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.QuantityValue">
            <summary>
            Gets or sets quantity value.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.UOMCodeFK">
            <summary>
            Gets or sets UOMCode foreaign key.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.UOMCodedOther">
            <summary>
            Gets or sets UOMCode other.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.ItemDescription">
            <summary>
            Gets or sets item description.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.ItemNote">
            <summary>
            Gets or sets item note.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.SupplierPartNumber">
            <summary>
            Gets or sets SupplierPartNumber.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.BuyerPartNumber">
            <summary>
            Gets or sets BuyerPartNumber.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.HazardCode">
            <summary>
            Gets or sets HazardCode.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.HazardousRegulationsCodeFK">
            <summary>
            Gets or sets HazardousRegulationsCodeFK foreign key.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.OrderedQuantityValue">
            <summary>
            Gets or sets ordered quantity value.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.BuyerOrderNumber">
            <summary>
            Gets or sets buyer order number.
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.hasAttachments">
            <summary>
            Indicates that we have attachments in the order + in the orderlines
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.SupplierID">
            <summary>
            Defines the SupplierID
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.AccountCode">
            <summary>
            Defines the AccountCode
            </summary>
            <value></value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLine.ShippedPreviouslyQuantityValue">
            <summary>
            Gets shipped previously quantity value for this asn line.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLineFullLoadStrategy">
            <summary>
            Strategy to fully load asn order line
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLineLoadStrategy">
            <summary>
            Load strategy for asn order lines.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLineLazyLoadStrategy">
            <summary>
            Strategy to lazy load asn order line.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLineMapper">
            <summary>
            Asn order line mapper.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLineMapper">
            <summary>
            Asn order line mapper.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLineMapper.SelectById(System.Int32)">
            <summary>
            Selects the by id.
            </summary>
            <param name="lineId">The line id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLineMapper.Delete(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine)">
            <summary>
            Deletes the specified line.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLineMapper.Save(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine,TRR.O2I.DataAccess.Core.SaveOptions)">
            <summary>
            Saves the specified line.
            </summary>
            <param name="line">The line.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLineMapper.GetForAsn(System.Int32)">
            <summary>
            Gets the asn order lines.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLineMapper.CreateAsnOrderLine">
            <summary>
            Creates the asn order line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLineMapper.GetLazyForAsn(System.Int32)">
            <summary>
            Gets the lazy for asn.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLineMapper.#ctor(DataAccess.Services.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLineMapper"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLineMapper.SelectById(System.Int32)">
            <summary>
            Selects the by id.
            </summary>
            <param name="lineId">The line id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLineMapper.Save(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine,TRR.O2I.DataAccess.Core.SaveOptions)">
            <summary>
            Saves the specified line.
            </summary>
            <param name="line">The line.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLineMapper.GetForAsn(System.Int32)">
            <summary>
            Gets the asn order lines.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLineMapper.GetLazyForAsn(System.Int32)">
            <summary>
            Gets the lazy loaded asn lines.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLineMapper.CreateAsnOrderLine">
            <summary>
            Creates the asn order line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnOrderLineMapper.Delete(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnOrderLine)">
            <summary>
            Deletes the specified line.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage">
            <summary>
            AsnPackage business entity
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.Copy">
            <summary>
            Copies all the fields, does not copy lines. For ProperCopying of lines use CopyEngine.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.Lines">
            <summary>
            Gets or sets the lines.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.DataObject">
            <summary>
            Gets the data object.
            </summary>
            <value>The data object.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.GrossWeightValue">
            <summary>
            Gets or sets GrossWeightValue.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.NetWeightValue">
            <summary>
            Gets or sets NetWeightValue.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.DepthValue">
            <summary>
            Gets or sets DepthValue.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.LengthValue">
            <summary>
            Gets or sets LengthValue.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.WidthValue">
            <summary>
            Gets or sets WidthValue.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.NetWeightUOMFK">
            <summary>
            Gets or sets NetWeightUOMFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.DepthUOMFK">
            <summary>
            Gets or sets DepthUOMFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.LengthUOMFK">
            <summary>
            Gets or sets LengthUOMFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.GrossWeightUOMFK">
            <summary>
            Gets or sets GrossWeightUOMFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage.WidthUOMFK">
            <summary>
            Gets or sets WidthUOMFK.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.#ctor(TRR.O2I.DataAccess.Entities.IAsnPackageRow,TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.DataAccess.Entities.IASNPackageASNOrderLine})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage"/> class.
            </summary>
            <param name="packageRow">The package row.</param>
            <param name="packageLines">The package lines.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.#ctor(TRR.O2I.DataAccess.Entities.IAsnPackageRow)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.Copy">
            <summary>
            Copies all the fields, does not copy lines. For ProperCopying of lines use CopyEngine.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.ASNPackageId">
            <summary>
            The primary key for the ASNPackage.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.ASNFK">
            <summary>
            Gets or sets ASNFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.Lines">
            <summary>
            Gets or sets the lines.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.DataObject">
            <summary>
            Gets the data object.
            </summary>
            <value>The data object.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.ASNPackageTypeOther">
            <summary>
            Gets or sets ASNPackageTypeFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.ASNPackageTypeFK">
            <summary>
            Gets or sets ASNPackageTypeFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.NetWeightUOMFK">
            <summary>
            Gets or sets NetWeightUOMFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.NetWeightUOMOther">
            <summary>
            Gets or sets NetWeightUOMOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.GrossWeightUOMOther">
            <summary>
            Gets or sets GrossWeightUOMOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.GrossWeightValue">
            <summary>
            Gets or sets GrossWeightValue.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.SpecialHandlingCodeFK">
            <summary>
            Gets or sets SpecialHandlingCodeFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.DepthUOMFK">
            <summary>
            Gets or sets DepthUOMFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.NetWeightValue">
            <summary>
            Gets or sets NetWeightValue.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.LengthUOMFK">
            <summary>
            Gets or sets LengthUOMFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.GrossWeightUOMFK">
            <summary>
            Gets or sets GrossWeightUOMFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.DepthValue">
            <summary>
            Gets or sets DepthValue.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.LengthUOMOther">
            <summary>
            Gets or sets LengthUOMOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.WidthUOMFK">
            <summary>
            Gets or sets WidthUOMFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.LengthValue">
            <summary>
            Gets or sets LengthValue.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.WidthUOMOther">
            <summary>
            Gets or sets WidthUOMOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.WidthValue">
            <summary>
            Gets or sets WidthValue.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.DepthUOMOther">
            <summary>
            Gets or sets DepthUOMOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.PackageMarker">
            <summary>
            Gets or sets PackageMarker.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.ShippingInstruction">
            <summary>
            Gets or sets ShippingInstruction.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.PackageID">
            <summary>
            Gets or sets PackageID.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.HazardCode">
            <summary>
            Gets or sets HazardCode.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.SupplierID">
            <summary>
            Defines the SupplierID
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackage.AccountCode">
            <summary>
            Defines the AccountCode 
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackageMapper">
            <summary>
            Mapper for loading/saving asn packages
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackageMapper">
            <summary>
            Mapper for loading/saving asn packages
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackageMapper.SelectById(System.Int32)">
            <summary>
            Selects the by id.
            </summary>
            <param name="packageId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackageMapper.Update(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage)">
            <summary>
            Saves the specified package.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackageMapper.Insert(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage)">
            <summary>
            Inserts the specified package.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackageMapper.SelectByAsnId(System.Int32)">
            <summary>
            Selects the by asn id.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackageMapper.Delete(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage)">
            <summary>
            Deletes the specified package.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackageMapper.#ctor(DataAccess.Services.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackageMapper"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackageMapper.SelectById(System.Int32)">
            <summary>
            Selects the by id.
            </summary>
            <param name="packageId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackageMapper.Update(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage)">
            <summary>
            Saves the specified package.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackageMapper.Insert(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage)">
            <summary>
            Inserts the specified package.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackageMapper.SelectByAsnId(System.Int32)">
            <summary>
            Selects the by asn id.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.AsnPackageMapper.Delete(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnPackage)">
            <summary>
            Deletes the specified package.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.CopyEngine">
            <summary>
            Copy Engine implementation
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.ICopyEngine">
            <summary>
            Base interface for Copy engine 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.ICopyEngine.CopyPackagesAndLines(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice@)">
            <summary>
            Copies the packages and lines.
            </summary>
            <param name="asn">The asn.</param>
            <param name="copied">The copied.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.CopyEngine.CopyPackagesAndLines(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice@)">
            <summary>
            Copies the packages and lines.
            </summary>
            <param name="asn">The asn.</param>
            <param name="copied">The copied.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.CopyEngine.CopyPackageLineReferences(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Copies the package - line references.
            </summary>
            <param name="asn">The asn.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.CopyEngine.CopyPackages(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice@)">
            <summary>
            Copies the packages.
            </summary>
            <param name="asn">The asn.</param>
            <param name="copied">The copied.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.FullAsnLoadStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnLoadStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnLoadStrategy.LoadAsnLines(System.Int32)">
            <summary>
            Loads the asn lines.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnLoadStrategy.LoadAsnStructuredNotes(System.Int32)">
            <summary>
            Loads the asn structured notes.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnLoadStrategy.LoadTransportRoutings(System.Int32)">
            <summary>
            Loads the transport routings.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnLoadStrategy.LoadAsnAttachments(System.Int32)">
            <summary>
            Loads the asn attachments.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAsnLoadStrategy.LoadPackages(System.Int32)">
            <summary>
            Loads the packages.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.FullAsnLoadStrategy.#ctor(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.FullAsnLoadStrategy"/> class.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.FullAsnLoadStrategy.LoadAsnLines(System.Int32)">
            <summary>
            Loads the asn lines.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.FullAsnLoadStrategy.LoadAsnStructuredNotes(System.Int32)">
            <summary>
            Loads the asn structured notes.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.FullAsnLoadStrategy.LoadTransportRoutings(System.Int32)">
            <summary>
            Loads the transport routings.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.FullAsnLoadStrategy.LoadAsnAttachments(System.Int32)">
            <summary>
            Loads the asn attachments.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.FullAsnLoadStrategy.LoadPackages(System.Int32)">
            <summary>
            Loads the packages.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.LazyAsnLoadStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.LazyAsnLoadStrategy.#ctor(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.FullAsnLoadStrategy"/> class.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.LazyAsnLoadStrategy.LoadAsnLines(System.Int32)">
            <summary>
            Loads the asn lines.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.LazyAsnLoadStrategy.LoadAsnStructuredNotes(System.Int32)">
            <summary>
            Loads the asn structured notes.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.LazyAsnLoadStrategy.LoadTransportRoutings(System.Int32)">
            <summary>
            Loads the transport routings.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.LazyAsnLoadStrategy.LoadAsnAttachments(System.Int32)">
            <summary>
            Loads the asn attachments.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.LazyAsnLoadStrategy.LoadPackages(System.Int32)">
            <summary>
            Loads the packages.
            </summary>
            <param name="asnId">The id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment">
            <summary>
            Attachment bean.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment">
            <summary>
            IAttachment
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.DataObject">
            <summary>
            Gets the data object.
            </summary>
            <value>The data object.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.ParentFK">
            <summary>
            Gets or sets the parent FK.
            </summary>
            <value>The parent FK.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.AttachmentId">
            <summary>
            The primary key of the attachment
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.AttachmentPurpose">
            <summary>
            Get/Set for attachment purpose
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.AttachmentFileName">
            <summary>
            Get/Set for attachment filename
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.AttachmentTitle">
            <summary>
            Get/Set for attachment title
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.AttachmentDescription">
            <summary>
            Get/Set for attachment description
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.AttachmentLocation">
            <summary>
            Get/Set for attachment location
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.AttachmentData">
            <summary>
            Get set for the attachment data
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.Id">
            <summary>
            Maps to ID field
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.CID">
            <summary>
            Maps to CID field
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.Protected">
            <summary>
            Maps to IsInbound field
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment.ContentType">
            <summary>
            Gets or sets the ContentType.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.#ctor(TRR.O2I.DataAccess.Entities.IAttachmentRow)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment"/> class.
            </summary>
            <param name="dataObject">The data object.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.DataObject">
            <summary>
            Gets the data object.
            </summary>
            <value>The data object.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.ParentFK">
            <summary>
            Gets or sets the parent FK.
            </summary>
            <value>The parent FK.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.AttachmentId">
            <summary>
            The primary key of the attachment
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.AttachmentPurpose">
            <summary>
            Get/Set for attachment purpose
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.AttachmentFileName">
            <summary>
            Get/Set for attachment filename
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.AttachmentTitle">
            <summary>
            Get/Set for attachment title
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.AttachmentDescription">
            <summary>
            Get/Set for attachment description
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.AttachmentLocation">
            <summary>
            Get/Set for attachment location
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.AttachmentData">
            <summary>
            Get set for the attachment data
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.Id">
            <summary>
            Maps to ID field
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.CID">
            <summary>
            Maps to CID field
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.Protected">
            <summary>
            Maps to IsInbound field
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.SupplierID">
            <summary>
            Defines the SupplierID
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.AccountCode">
            <summary>
            Defines the AccountCode 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.Attachment.ContentType">
            <summary>
            Gets or sets the ContentType.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper">
            <summary>
            
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.GetInvoiceAttachments(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the attachments for invoice.
            </summary>
            <param name="invoiceId">The invoice id.</param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.GetAllOrderLineAttachmentsForOrder(System.Int32)">
            <summary>
            Gets the order line attachments.
            </summary>
            <param name="orderId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.GetAttachmentsForLine(System.Int32)">
            <summary>
            Gets attachments for line.
            </summary>
            <param name="orderLineId">Order line id.</param>
            <returns>Attachments for line.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.Insert(TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment)">
            <summary>
            Inserts attachment for line.
            </summary>
            <param name="attachment"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.Insert(TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment,System.Boolean)">
            <summary>
            Inserts attachment for line
            </summary>
            <param name="attachment"></param>
            <param name="checkAccountCode"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.Update(TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment)">
            <summary>
            Updates attachment for line.
            </summary>
            <param name="attachment"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.Delete(TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment)">
            <summary>
            Deletes attachment from line.
            </summary>
            <param name="attachment"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.GetAttachmentsForOrder(System.Int32)">
            <summary>
            Gets order attachments by order id.
            </summary>
            <param name="orderId">Order id.</param>
            <returns>Order attachments.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.CreateInvoiceAttachment">
            <summary>
            Creates the invoice attachment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.GetAttachmentsForInvoice(System.Int32)">
            <summary>
            Gets the attachments for invoice.
            </summary>
            <param name="invoiceId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.GetAttachmentsForAsn(System.Int32)">
            <summary>
            Gets the attachments for asn.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachmentMapper.GetAllAsnLineAttachments(System.Int32)">
            <summary>
            Gets all asn line attachments.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.#ctor(DataAccess.Services.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper"/> class.
            </summary>
            <param name="serviceManager">The service manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.GetInvoiceAttachments(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the attachments for invoice.
            </summary>
            <param name="invoiceId">The invoice id.</param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.GetAttachmentsForLine(System.Int32)">
            <summary>
            Gets attachments for line.
            </summary>
            <param name="orderLineId">Order line id.</param>
            <returns>Attachments for line.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.GetAttachmentsForOrder(System.Int32)">
            <summary>
            Gets order attachments by order id.
            </summary>
            <param name="orderId">Order id.</param>
            <returns>Order attachments.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.CreateInvoiceAttachment">
            <summary>
            Creates the invoice attachment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.GetAttachmentsForInvoice(System.Int32)">
            <summary>
            Gets the attachments for invoice.
            </summary>
            <param name="invoiceId">The id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.GetAttachmentsForAsn(System.Int32)">
            <summary>
            Gets the attachments for asn.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.GetAllAsnLineAttachments(System.Int32)">
            <summary>
            Gets all asn line attachments.
            </summary>
            <param name="asnId">The asn id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.Insert(TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment,System.Boolean)">
            <summary>
            Inserts attachment for line.
            </summary>
            <param name="attachment"></param>
            <param name="checkAccountCode"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.Insert(TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment)">
            <summary>
            Inserts attachment for line.
            </summary>
            <param name="attachment"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.Update(TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment)">
            <summary>
            Updates attachment for line.
            </summary>
            <param name="attachment"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.AttachmentMapper.Delete(TRR.O2I.BusinessLogic.Managers.BusinessEntity.IAttachment)">
            <summary>
            Deletes attachment from line.
            </summary>
            <param name="attachment"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings">
            <summary>
            Business settings for current buyer and supplier
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.#ctor(System.Boolean,TRR.O2I.BusinessLogic.Managers.IPendingInvoicesProcessingStrategy,TRR.O2I.BusinessLogic.Managers.IPendingInvoicesAvailableValuesRecalculationStrategy,TRR.O2I.BusinessLogic.Managers.DefaultTax.IDefaultTaxStrategy,TRR.O2I.BusinessLogic.Managers.Invoicing.IOrderLinesImportStrategyFactory,TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategyFactory,TRR.O2I.BusinessLogic.BusinessEntity.Enums.ChangeTypeCode,TRR.O2I.Common.Core.SupplierCountry,TRR.O2I.BusinessLogic.Core.Workflow.TripName,TRR.O2I.BusinessLogic.Managers.Locking.ILockNotActiveDocumentStrategy,System.Boolean,TRR.O2I.BusinessLogic.Managers.IPendingAsnsProcessingStrategy,TRR.O2I.BusinessLogic.Managers.Locking.ILockNotActiveDocumentStrategy,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderTypeDefinitions.IOrderTypeDefinitionStrategy,TRR.O2I.BusinessLogic.Managers.OrderSettings.IOrderPreferencesBuildStrategy,TRR.O2I.BusinessLogic.Managers.IDefaultBankAccountInformationProvider,TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.InvoiceCreationFromGR.ICheckPendingInvoiceExistanceWhileInvoiceCreationFromGRStrategy,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.Basket.IRelatedGRsBasketPlacementStrategy,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.PreSendActions.IPreSendInvoiceAction},TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.ISubsequentInvoiceTaxApplier,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.Invoicing.Updating.IUpdateInvoicingDocumentStrategyFactory{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice},TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IOrderLineTypeDefinitionStrategyFactory,TRR.O2I.BusinessLogic.Managers.EntityUpdateRules.PurchaseOrderRules.IUpdatePOWhileCOMergingRulesRunnerFactory,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.OrderLineTypeDefinitions.IChangeOrderShreddingLineTypeResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings"/> class.
            </summary>
            <param name="allowedInvoiceFromScratch">if set to <c>true</c> [allowed invoice from scratch].</param>
            <param name="pendingInvoicesProcessingStrategy">The pending invoices processing strategy.</param>
            <param name="pendingInvoicesRecalculationStrategy">The pending invoices recalculation strategy.</param>
            <param name="defaultTaxStrategy">The invoice default tax strategy.</param>
            <param name="invoiceImportStrategyFactory">The invoice import strategy.</param>
            <param name="receiptItemsImportStrategyFactory">The goods receipt items to invoice import strategy.</param>
            <param name="nonexistentLineChangeTypeCoded">The unexisted line change type coded.</param>
            <param name="supplierCountry">The supplier country.</param>
            <param name="buyerTrip">The buyer trip.</param>
            <param name="lockNotActiveInvoiceStrategy">if set to <c>true</c> [lock not active invoice].</param>
            <param name="allowedAsnFromScratch">if set to <c>true</c> [allowed asn from scratch].</param>
            <param name="pendingAsnProcessingStrategy">The pending asn processing strategy.</param>
            <param name="lockNotActiveAsnStrategy">if set to <c>true</c> [lock not active asn].</param>
            <param name="orderTypeDefinitionStrategy">The order type definition strategy.</param>
            <param name="orderPreferencesBuildStrategy">The order preferences build strategy.</param>
            <param name="defaultBankInformationProvider">The default bank information provider.</param>
            <param name="buyerSettings">The Buyer Settings</param>
            <param name="checkPendingInvoiceExistanceWhileInvoiceCreationFromGRStrategy"></param>
            <param name="relatedGRsBasketPlacementStrategy"></param>
            <param name="preSendInvoiceActions"></param>
            <param name="subsequentInvoiceTaxApplier"></param>
            <param name="updateInvoiceStrategyFactory"></param>
            <param name="orderLineTypeDefinitionStrategyFactory"></param>
            <param name="updatePOWhileCOMergingRulesRunnerFactory"></param>
            <param name="changeOrderShreddingLineTypeResolver"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.GetCreateInvoiceFromOrderStrategy(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,System.String,TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceType,DataAccess.Services.IServiceManager)">
            <summary>
            Gets CreateInvoiceFromOrderStrategy
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.GetCreateInvoiceFromScratchStrategy(System.String,DataAccess.Services.IServiceManager)">
            <summary>
            Gets the create invoice from scratch strategy.
            </summary>
            <param name="invoiceNumber">The invoice number.</param>
            <param name="serviceManager"></param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.AllowedInvoiceFromScratch">
            <summary>
            Indicates whether it is allowed to create invoice from scratch.
            </summary>
            <value>
            	<c>true</c> if allowed to create invoice from scratch; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.AllowedAsnFromScratch">
            <summary>
            Indicates whether it is allowed to create invoice from scratch.
            </summary>
            <value>
            	<c>true</c> if allowed to create invoice from scratch; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.PendingInvoicesProcessingStrategy">
            <summary>
            Gets the pending invoices processing strategy.
            </summary>
            <value>The pending invoices processing strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.PendingInvoicesRecalculationStrategy">
            <summary>
            Gets the pending invoices recalculation strategy.
            </summary>
            <value>The pending invoices recalculation strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.DefaultTaxStrategy">
            <summary>
            Gets the invoice default tax strategy.
            </summary>
            <value>The invoice default tax strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.InvoiceImportStrategyFactory">
            <summary>
            Gets the invoice import strategy.
            </summary>
            <value>The invoice import strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.ReceiptItemsImportStrategyFactory">
            <summary>
            Gets the goods receipt items to invoice import strategy.
            </summary>
            <value>The goods receipt items to invoice import strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.NonexistentLineChangeTypeCoded">
            <summary>
            Gets the unexisted line change type coded.
            </summary>
            <value>The unexisted line change type coded.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.SupplierCountry">
            <summary>
            Gets the customization country.
            </summary>
            <value>The customization country.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.BuyerTrip">
            <summary>
            Gets the current trip.
            </summary>
            <value>The current trip.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.LockNotActiveInvoiceStrategy">
            <summary>
            Gets a value indicating whether [lock not active invoice].
            </summary>
            <value>
            	<c>true</c> if [lock not active invoice]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.PendingAsnProcessingStrategy">
            <summary>
            Gets the pending asn processing strategy.
            </summary>
            <value>The pending asn processing strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.LockNotActiveAsnStrategy">
            <summary>
            Gets a value indicating whether [lock not active asn].
            </summary>
            <value><c>true</c> if [lock not active asn]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.OrderTypeDefinitionStrategy">
            <summary>
            Gets the order type definition strategy.
            </summary>
            <value>The order type definition strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.OrderPreferencesBuildStrategy">
            <summary>
            Gets the order preferences build strategy.
            </summary>
            <value>The order preferences build strategy.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.DefaultBankInformationProvider">
            <summary>
            Gets the default bank information provider.
            </summary>
            <value>The default bank information provider.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.BuyerSettings">
            <summary>
             Gets or sets Buyer Settings
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.CheckPendingInvoiceExistanceWhileInvoiceCreationFromGRStrategy">
            <summary>
            Gets CheckPendingInvoiceExistanceWhileInvoiceCreationFromGRStrategy
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.RelatedGRsBasketPlacementStrategy">
            <summary>
            Gets RelatedGRsBasketPlacementStrategy
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.PreSendInvoiceActions">
            <summary>
            Gets a list of actions which should be executed before invoice sending.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.SubsequentInvoiceTaxApplier">
            <summary>
            Gets SINV tax applier
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.UpdateInvoiceStrategyFactory">
            <summary>
            Gets Update Invoice Strategy Factory
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.OrderLineTypeDefinitionStrategyFactory">
            <summary>
            Gets order line type definition strategy
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.UpdatePOWhileCOMergingRulesRunnerFactory">
            <summary>
            Gets update PO while CO merging rules runner factory
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings.ChangeOrderShreddingLineTypeResolver">
            <summary>
            Gets change order line type resolver
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsAssembler">
            <summary>
            Builds business settings.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsAssembler.#ctor(TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowStrategies.DocumentCreationRule.IDocumentCreationRuleFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsAssembler"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsAssembler.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsAssembler.Load(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.SupplierSettingsBusinessLogic.SupplierCompanySettings,System.Nullable{TRR.O2I.Common.Core.SupplierCountry})">
            <summary>
            Loads the specified buyer settings.
            </summary>
            <param name="buyerSettings">The buyer settings.</param>
            <param name="supplierCompanySettings">The supplier company settings.</param>
            <param name="supplierCountry">The supplier country.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsAssembler.GetWorkflowMergingKey(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.SupplierSettingsBusinessLogic.SupplierCompanySettings,TRR.O2I.Common.Core.TRUEIntegration.UserRoleSettings,System.Nullable{TRR.O2I.Common.Core.SupplierCountry})">
            <summary>
            Gets the workflow merging key.
            </summary>
            <param name="buyerSettings">The buyer settings.</param>
            <param name="supplierCompanySettings">The supplier company settings.</param>
            <param name="userRoleSettings">The user role settings.</param>
            <param name="supplierCountry">The supplier country.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettingsAssembler.LoadDocumentSpecificSettings(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,System.Nullable{TRR.O2I.BusinessLogic.BusinessEntity.Enums.ControlKey},TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey,TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Loads the document specific settings.
            </summary>
            <param name="buyerSettings">The buyer settings.</param>
            <param name="controlKey">The control key.</param>
            <param name="orderTypeKey">The order type key.</param>
            <param name="supplierCountry">The supplier country</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowMergingKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowMergingKey.#ctor(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.WorkflowConfiguration.TripCustomizationsEnum},System.Collections.Generic.IEnumerable{TRR.O2I.Common.Core.TRUEIntegration.RoleName},System.Collections.Generic.IList{TRR.O2I.BusinessLogic.WorkflowConfiguration.ConfigurableParameters},System.Nullable{TRR.O2I.Common.Core.SupplierCountry})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowMergingKey"/> class.
            </summary>
            <param name="includedTrips">The included TRI ps.</param>
            <param name="reversedRoles">The reversed roles.</param>
            <param name="buyerParameters">The buyer parameters.</param>
            <param name="supplierCountry">The supplier country.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowMergingKey.IncludedTrips">
            <summary>
            Gets the included TRIps.
            </summary>
            <value>The included TRIps.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowMergingKey.ReversedRoles">
            <summary>
            Gets the reversed roles.
            </summary>
            <value>The reversed roles.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowMergingKey.BuyerParameters">
            <summary>
            Gets the buyer parameters.
            </summary>
            <value>The buyer parameters.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.WorkflowMergingKey.SupplierCountry">
            <summary>
            Gets or sets the supplier country.
            </summary>
            <value>The supplier country.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IItemDataSource`1">
            <summary>
            Data source for collection.
            </summary>
            <typeparam name="TItemType"></typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IItemDataSource`1.LoadItems">
            <summary>
            Loads the items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.DataSourceLoadItems`1">
            <summary>
            Generic delegate to load items.
            </summary>
            <typeparam name="TItemType"></typeparam>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IntermediaryDataSource`1">
            <summary>
            Data source, that uses delegate to load items.
            </summary>
            <typeparam name="TItemType"></typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IntermediaryDataSource`1.#ctor(TRR.O2I.BusinessLogic.Managers.BusinessEntity.DataSourceLoadItems{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IntermediaryDataSource`1"/> class.
            </summary>
            <param name="delegatedDataSource">The delegated data source.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IntermediaryDataSource`1.LoadItems">
            <summary>
            Loads the items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseXmlMapper">
            <summary>
            Maps invoice response on xml.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseXmlMapper.Parse(System.String)">
            <summary>
            Gets the invoice response.
            </summary>
            <param name="xml">The xml.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1">
            <summary>
            Implementation of the business entity collection.
            </summary>
            <typeparam name="TItemType">Business entity type.</typeparam>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1">
            <summary>
            Business entity collection base interface.
            </summary>
            <typeparam name="TItemType">Item type.</typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.Contains(`0)">
            <summary>
            Determinates if collection already have item.
            </summary>
            <param name="item">Items to search.</param>
            <returns>True if contains.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.Add(`0)">
            <summary>
            Adds item in the collection.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.Remove(`0)">
            <summary>
            Removes item from the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.Clear">
            <summary>
            Removes all items from collection.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the by buyer line item num.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.ToArray">
            <summary>
            returns the array which contains all items within collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.GetLinesWithPaging(System.Int32,System.Int32)">
            <summary>
            Gets lines with pagging.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.Count">
            <summary>
            Returns count of the items in the collection.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.Inserted">
            <summary>
            Returns collection of the inserted items.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.Updated">
            <summary>
            Returns collection of the updated items.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.Deleted">
            <summary>
            Returns collection of the deleted items.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection`1.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.items">
            <summary>Contains list of current items.</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.itemsToRemove">
            <summary>Contains list of items marked for deletion.</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.loadedItems">
            <summary>List of loaded items.</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.dataSource">
            <summary>Data source to load items.</summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.isLoaded">
            <summary>Indicates whether items was loaded or not.</summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.Convert(System.Collections.IEnumerable)">
            <summary>
            Converts the specified itemList.
            </summary>
            <param name="itemList">The item list.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.#ctor(TRR.O2I.BusinessLogic.Managers.BusinessEntity.DataSourceLoadItems{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1"/> class.
            </summary>
            <param name="dataSourceDelegate">The data source delegate.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.#ctor(TRR.O2I.BusinessLogic.Managers.BusinessEntity.IItemDataSource{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.Add(`0)">
            <summary>
            Adds the specified line.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.Remove(`0)">
            <summary>
            Removes item from the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the by buyer line item num.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.ToArray">
            <summary>
            returns the array which contains all items within collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.GetLinesWithPaging(System.Int32,System.Int32)">
            <summary>
            Gets lines with pagging.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.TRR#O2I#BusinessLogic#Managers#BusinessEntity#IBusinessEntityCollection{TItemType}#Updated">
            <summary>
            Returns collection of the updated items.
            </summary>
            <value>Updated items.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.TRR#O2I#BusinessLogic#Managers#BusinessEntity#IBusinessEntityCollection{TItemType}#Inserted">
            <summary>
            Returns collection of the inserted items.
            </summary>
            <value>Inserted items.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.TRR#O2I#BusinessLogic#Managers#BusinessEntity#IBusinessEntityCollection{TItemType}#Deleted">
            <summary>
            Returns collection of the deleted items.
            </summary>
            <value>Deleted items.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityCollection`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityFactory">
            <summary>
            Creates busines entities
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityFactory">
            <summary>
            Base interface for business entity collection
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityFactory.CreateAttachmentMapper(DataAccess.Services.IServiceManager)">
            <summary>
            Creates the attachment mapper.
            </summary>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityFactory.CreateAsnPackageMapper(DataAccess.Services.IServiceManager)">
            <summary>
            Creates the asn package mapper.
            </summary>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityFactory.CreateAsnMapper(DataAccess.Services.IServiceManager)">
            <summary>
            Creates the asn mapper.
            </summary>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityFactory.CreateAsnOrderLineMapper(DataAccess.Services.IServiceManager)">
            <summary>
            Createasns the order line mapper.
            </summary>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityFactory.CreateAsnPackageMapper(DataAccess.Services.IServiceManager)">
            <summary>
            Creates the asn package mapper.
            </summary>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityFactory.CreateAsnMapper(DataAccess.Services.IServiceManager)">
            <summary>
            Creates the asn mapper.
            </summary>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessEntityFactory.CreateAsnOrderLineMapper(DataAccess.Services.IServiceManager)">
            <summary>
            Createasns the order line mapper.
            </summary>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineChangeTypeCodeCalculator">
            <summary>
            ICalculator for ChangeTypeCode default implementation
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Calculator.ICalculator`1">
            <summary>
            Base interface for calculators
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Calculator.ICalculator`1.Calculate">
            <summary>
            Calculates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineChangeTypeCodeCalculator.#ctor(TRR.O2I.DataAccess.Entities.OrderLine,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineChangeTypeCodeCalculator"/> class.
            </summary>
            <param name="changeOrderLine">The change order line.</param>
            <param name="coLines">The co lines.</param>
            <param name="poLines">The po lines.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineChangeTypeCodeCalculator.#ctor(TRR.O2I.DataAccess.Entities.OrderLine,TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection,TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineChangeTypeCodeCalculator"/> class.
            </summary>
            <param name="newLine">The change order line.</param>
            <param name="coLines">The co lines.</param>
            <param name="poLines">The po lines.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineChangeTypeCodeCalculator.TRR#O2I#BusinessLogic#Managers#Calculator#ICalculator{TRR#O2I#DataAccess#Core#Consts#ChangeTypeCode}#Calculate">
            <summary>
            Calculates Lines change code based on previous line.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection">
            <summary>
            Order lines collection
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection.#ctor(System.Collections.Generic.IEnumerable{TRR.O2I.DataAccess.Entities.OrderLine})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection.FindByBuyerNumber``1(System.Collections.IList,System.String)">
            <summary>
            Returns the line item with the specified line number
            </summary>
            <param name="orderLines">Order lines collection</param>
            <param name="buyerLineItemNumber">Buyer line number.</param>
            <returns>Found order line or null.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection.FindByBuyerNumber``1(System.String)">
            <summary>
            Returns the line item with the specified line number
            </summary>
            <param name="buyerLineItemNumber">Buyer line number.</param>
            <returns>Found order line or null.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection.ContainsPurchaseOrderLine(System.Collections.IList,TRR.O2I.DataAccess.Entities.OrderLineXMLIsland)">
            <summary>
            Determines whether [purchase order line] contains [is defined in coLines].
            </summary>
            <param name="coLines">The co lines.</param>
            <param name="poLine">The po line.</param>
            <returns>
            	<c>true</c> if [contains purchase order line] [the specified co lines]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection.FindByBuyerNumber``1(System.Collections.IList,TRR.O2I.DataAccess.Entities.OrderLineXMLIsland)">
            <summary>
            Finds the by buyer number.
            </summary>
            <typeparam name="TOrderLineType">The type of the rder line type.</typeparam>
            <param name="orderLines">The order lines.</param>
            <param name="history">The history.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLine.OrderLineCollection.FindByBuyerNumberAndParentLineItemNumber``1(System.String,System.String)">
            <summary>
            Finds the by buyer number and parent FK.
            </summary>
            <typeparam name="TOrderLineType">The type of the rder line type.</typeparam>
            <param name="buyerLineItemNumber">The buyer line item number.</param>
            <param name="parentLineItemNumber">The parent line FK.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.PreloadedDataSource`1">
            <summary>
            Pre loaded data source.
            </summary>
            <typeparam name="TItemType"></typeparam>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.PreloadedDataSource`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.PreloadedDataSource`1"/> class.
            </summary>
            <param name="preloadedItems">The pre loaded items.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.PreloadedDataSource`1.LoadItems">
            <summary>
            Loads the items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity">
            <summary>
            Base interface for tax business entity.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.CalculateTaxAmount(System.Decimal)">
            <summary>
            Calculates tax amount.
            </summary>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.Percent">
            <summary>
            Gets or sets TaxPercent
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.Amount">
            <summary>
            Gets or sets TaxAmount
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.TaxRow">
            <summary>
            tax row.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.TaxId">
            <summary>
            The primary key of the entity.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.ParentFK">
            <summary>
            OrderComposite foreign key.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.ReasonTaxExempt">
            <summary>
            Gets or sets ReasonTaxExemptFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.Category">
            <summary>
            Gets or sets TaxCategoryFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.Type">
            <summary>
            Gets or sets TaxTypeFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.PaymentMethod">
            <summary>
            Gets or sets TaxPaymentMethodFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.CategoryOther">
            <summary>
            Gets or sets TaxCategoryCodedOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.TypeOther">
            <summary>
            Gets or sets TaxTypeCodedOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.PaymentMethodOther">
            <summary>
            Gets or sets TaxPaymentMethodCodedOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.ReasonTaxExemptOther">
            <summary>
            Gets or sets ReasonTaxExemptCodedOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.Region">
            <summary>
            Gets or sets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity.FunctionQualifierCodedOther">
            <summary>
            Gets or sets the function qualifier coded other.
            </summary>
            <value>The function qualifier coded other.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder">
            <summary>
            Purchase order line business object.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.#ctor(TRR.O2I.DataAccess.Entities.IOrderLineRow,TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityCollection{TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder})">
            <summary>
            Constructor.
            </summary>
            <param name="line">Line row.</param>
            <param name="subLines">The sub lines.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.UpdateSubTotal">
            <summary>
            Updates the line sub total based on unit price, quantity and line status.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.ResponseTotalQuantityValue">
            <summary>
            Gets or sets ResponseTotalQuantityValue
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.ResponseUnitPriceValue">
            <summary>
            Gets or sets ResponseUnitPriceValue
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.ResponsePBQQuantityValue">
            <summary>
            Gets or sets ResponsePBQQuantityValue
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.ResponseTotalAmount">
            <summary>
            Get/Set for ResponseTotalAmount
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.Status">
            <summary>
            The foreign key of the status.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.ParentLineFK">
            <summary>
            The foreign key for the parent line
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.ParentLineItemNumber">
            <summary>
            Parent line item number.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.ResponseSubTotal">
            <summary>
            Get/Set for ResponseSubTotal
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.ChangeTypeCode">
            <summary>
            Get/set for ChangeTypeCodeFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.OrderLineHolder.SubLines">
            <summary>
            Gets the sub lines.
            </summary>
            <value>The sub lines.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity">
            <summary>
            Tax business entity.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.#ctor(TRR.O2I.DataAccess.Entities.ITaxRow)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity"/> class.
            </summary>
            <param name="taxRow">The tax row.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.#ctor(TRR.O2I.DataAccess.Entities.ITaxRow,TRR.O2I.BusinessLogic.Managers.Calculator.Tax.ITaxCalculatorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity"/> class.
            </summary>
            <param name="taxRow">The tax row.</param>
            <param name="calculatorFactory">The calculator factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.CalculateTaxAmount(System.Decimal)">
            <summary>
            Calculates tax amount.
            </summary>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.Percent">
            <summary>
            Gets or sets TaxPercent
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.Amount">
            <summary>
            Gets or sets TaxAmount
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.TaxId">
            <summary>
            The primary key of the entity.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.ReasonTaxExempt">
            <summary>
            Gets or sets ReasonTaxExemptFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.Category">
            <summary>
            Gets or sets TaxCategoryFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.Type">
            <summary>
            Gets or sets TaxTypeFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.PaymentMethod">
            <summary>
            Gets or sets TaxPaymentMethodFK.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.CategoryOther">
            <summary>
            Gets or sets TaxCategoryCodedOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.TypeOther">
            <summary>
            Gets or sets TaxTypeCodedOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.PaymentMethodOther">
            <summary>
            Gets or sets TaxPaymentMethodCodedOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.ReasonTaxExemptOther">
            <summary>
            Gets or sets ReasonTaxExemptCodedOther.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.Region">
            <summary>
            Gets or sets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.FunctionQualifierCodedOther">
            <summary>
            Gets or sets the function qualifier coded other.
            </summary>
            <value>The function qualifier coded other.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.ParentFK">
            <summary>
            OrderComposite foreign key.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.BusinessEntity.TaxEntity.TaxRow">
            <summary>
            tax row.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Calculator.Tax.ITaxCalculatorFactory">
            <summary>
            Factory for tax calculators.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Calculator.Tax.ITaxCalculatorFactory.Amount(TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity,System.Decimal)">
            <summary>
            Amounts the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="total">The total.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Calculator.Tax.TaxAmountCalculator">
            <summary>
            Calculator to calculate tax amount.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Calculator.Tax.TaxAmountCalculator.#ctor(TRR.O2I.BusinessLogic.Managers.BusinessEntity.ITaxEntity,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Calculator.Tax.TaxAmountCalculator"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="total">The total.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Calculator.Tax.TaxAmountCalculator.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Tax,System.Decimal)">
            <summary>
            Public constructor
            </summary>
            <param name="entity"></param>
            <param name="total"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Calculator.Tax.TaxAmountCalculator.Calculate">
            <summary>
            Calculates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Calculator.Tax.TaxCalculatorFactory">
            <summary>
            Factory for tax calculators.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine">
            <summary>
            ChangedOrderLine class implementation
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.#ctor(TRR.O2I.DataAccess.Entities.OrderLine,System.Collections.IList)">
            <summary>
            Public constructor
            </summary>
            <param name="originalLine"></param>
            <param name="parentOrderLines"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.#ctor(TRR.O2I.DataAccess.Entities.OrderLine,TRR.O2I.DataAccess.Entities.OrderLine)">
            <summary>
            Public constructor with parent line
            </summary>
            <param name="originalLine"></param>
            <param name="parentPoLine"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.UpdateChangeTypeCode(System.Collections.IList,System.Collections.IList,TRR.O2I.BusinessLogic.Managers.Calculator.ICalculator{TRR.O2I.DataAccess.Core.Consts.ChangeTypeCode})">
            <summary>
            Updates the change type code for new line.
            </summary>
            <param name="poLines">The po lines.</param>
            <param name="coLines">The co lines.</param>
            <param name="changeTypeCodeCalculator">The calculator.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.UpdateChangeTypeCode(TRR.O2I.DataAccess.Entities.OrderLine,TRR.O2I.DataAccess.Entities.OrderLine,System.Collections.IList,System.Collections.IList)">
            <summary>
            Updates the change type code for new line.
            </summary>
            <param name="newChangeOrderLine">The new line.</param>
            <param name="poLine">The po line.</param>
            <param name="poLines">The po lines.</param>
            <param name="coLines">The co lines.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.FindOrderLine(System.Collections.IList,System.Int32)">
            <summary>
            Returns the line item with the specified line id
            </summary>
            <param name="parentOrderLines"></param>
            <param name="orderLineId"></param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.Line">
            <summary>
            Returns the original line
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.OriginalLine">
            <summary>
            Returns a reference to the PO's line
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.IsPOLineAvailable">
            <summary>
            Shows whether PO line is available for it
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.FirstShipmentDetail">
            <summary>
            Gets or sets the first shipment detail.
            </summary>
            <value>The first shipment detail.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.ChangedQuantity">
            <summary>
            Returns wether the Quantity Changed or not
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.ChangedPrice">
            <summary>
            Returns wether the Price changed or not
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.ChangedResponseDeliveryDate">
            <summary>
            Returns wether the DeliveryDate has changed or not
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.CalculatedChangeTypeCode">
            <summary>
            Returns 4 possible values: new, deleted, changed, unchanged
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.IsSelected">
            <summary>
            Gets or sets a value indicating whether line is selected.
            </summary>
            <value>
            	<c>true</c> if line is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.IsEditable">
            <summary>
            Gets or sets a value indicating whether this instance is editable.
            </summary>
            <value>
            	<c>true</c> if this instance is editable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.IsDetailsAvailable">
            <summary>
            Gets or sets a value indicating whether line details is available.
            </summary>
            <value>
            	<c>true</c> if this line details is available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.FinalRecipient">
            <summary>
            Final recipient 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.HasAttachments">
            <summary>
            Gets or sets a value indicating whether this instance has attachments.
            </summary>
            <value>
            	<c>true</c> if this instance has attachments; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ChangedOrderLine.HasMultipleShipmentDetails">
            <summary>
            Gets or sets a value indicating whether this instance has multiple shipment details.
            </summary>
            <value>
            	<c>true</c> if this instance has multiple shipment details; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.COMerger">
            <summary>
            Performs merging of the change orders 
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IChangeOrderMerger">
            <summary>
            Base interface for change order merger
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IChangeOrderMerger.MergeChangeOrderToChangeOrder(System.Int32,System.Int32)">
            <summary>
            Merges the change order to change order.
            </summary>
            <param name="destinationChangeOrderId">The destination change order id.</param>
            <param name="sourceChangeOrderId">The source change order id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IChangeOrderMerger.MergeChangeOrderToChangeOrder(System.Int32,System.Int32,TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityFactory,TRR.O2I.BusinessLogic.Managers.IEntityMerger)">
            <summary>
            Merges the change order to change order.
            </summary>
            <param name="destinationChangeOrderId">The id.</param>
            <param name="sourceChangeOrderId">The order id.</param>
            <param name="factory">The factory.</param>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IChangeOrderMerger.MergePurchaseOrderToChangeOrder(System.Int32)">
            <summary>
            Merges the purchase order to change order.
            </summary>
            <param name="changeOrderId">The change order id.</param>
            <returns></returns>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.COMerger.ordersManager">
            <summary>
            Orders manager
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.COMerger.#ctor(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.Managers.IOrdersManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.COMerger"/> class.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="ordersManager">The orders manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.COMerger.#ctor(DataAccess.Services.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.COMerger"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.COMerger.MergePurchaseOrderToChangeOrder(System.Int32)">
            <summary>
            Merges the purchase order to change order.
            </summary>
            <param name="changeOrderId">The change order id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.COMerger.MergeChangeOrderToChangeOrder(System.Int32,System.Int32)">
            <summary>
            Merges the change order to change order.
            </summary>
            <param name="destinationChangeOrderId">The destination change order id.</param>
            <param name="sourceChangeOrderId">The source change order id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.COMerger.MergeChangeOrderToChangeOrder(System.Int32,System.Int32,TRR.O2I.BusinessLogic.Managers.BusinessEntity.IBusinessEntityFactory,TRR.O2I.BusinessLogic.Managers.IEntityMerger)">
            <summary>
            Merges the change order to change order.
            </summary>
            <param name="destinationChangeOrderId">The id.</param>
            <param name="sourceChangeOrderId">The order id.</param>
            <param name="factory">The factory.</param>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.COMerger.MergeChangeOrderToPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Merge the Change Order to the Purchase Order.
            This method will be used only when sending out a COR document
            </summary>
            <param name="changeOrder">The change order.</param>
            <param name="purchaseOrder">The purchase order.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.COMerger.MergeParentLine(TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine,TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine,System.Boolean)">
            <summary>
            Merges the lines.
            </summary>
            <param name="poLine">The po line.</param>
            <param name="coLine">The co line.</param>
            <param name="isNewLine">if set to <c>true</c> [is new line].</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.COMerger.MergeSubLine(TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine,TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine,System.Boolean)">
            <summary>
            Merges the lines.
            </summary>
            <param name="poLine">The po line.</param>
            <param name="coLine">The co line.</param>
            <param name="isNewLine">if set to <c>true</c> [is new line].</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.COMerger.CheckValidCanceledOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            check if there are canceled parents withouth canceled subitems, if there are log a warning
            </summary>
            <param name="order">Purchase order to check</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.CreateInvoiceFromOrderStrategy">
            <summary>
            Encapsulates "Create from order" functionality, constructing invoice
            given the order
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy">
            <summary>
             CreateInvoiceStrategy interface
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.SetupCustomProperties(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Inits the fields.
            </summary>
            <param name="invoice">The invoice.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.GetBuyerCompany">
            <summary>
            Gets Buyer Company
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.GetInvoiceNumber">
            <summary>
            Gets Invoice Number
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.GetInvoiceSource">
            <summary>
            Gets the invoice source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.GetInvoiceType">
            <summary>
            Gets the invoice type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.CreateBuyerParty">
            <summary>
            Creates the buyer party.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.CreateSellerParty">
            <summary>
            Creates the seller party.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.CreateBillToParty">
            <summary>
            Creates the bill to party.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.CreateShipToParty">
            <summary>
            Creates the ship to party.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.CreateRemitToParty">
            <summary>
            Creates the remit to party.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.GetCurrency">
            <summary>
            Gets the currency.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.GetAccountCode">
            <summary>
            Gets the account code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.GetSupplierId">
            <summary>
            Gets the supplier id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreateInvoiceStrategy.CreatePaymentInstruction">
            <summary>
            Creates the payment instruction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.CreateInvoiceFromOrderStrategy.GetInvoiceType">
            <summary>
            Gets the invoice type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.CreateInvoiceFromOrderStrategy.InitInvoicePaymentInstruction(TRR.O2I.BusinessLogic.BusinessEntity.Entities.PaymentInstruction)">
            <summary>
            Creates new Payment Instruction for Invoice.
            </summary>
            <remarks>This method doesn't store PaymentInstruction into database.</remarks>
            <param name="orderPaymentInstruction">Base PaymentInstruction entity for initialization.</param>
            <returns>New PaymentInstruction entity.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.CreateInvoiceFromScratchStrategy">
            <summary>
            Encapsulates "Create from scratch" functionality, constructing invoice
            given the buyer/supplier company ids
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.CreateInvoiceFromScratchStrategy.GetInvoiceType">
            <summary>
            Gets the invoice type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.CreditAdviceManager">
            <summary>
            Contains CreditAdvice helper methods
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ICreditAdviceManager">
            <summary>
            Base interface for CreditAdviceManager
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ICreditAdviceManager.GetCreditAdviceStatusByName(System.String)">
            <summary>
            Gets the name of the credit advice status by.
            </summary>
            <param name="statusName">Name of the status.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.CreditAdviceManager.GetCreditAdviceRelatedOrders(TRR.O2I.DataAccess.Entities.ICreditAdvice)">
            <summary>
            Gets a list of related to <see cref="T:TRR.O2I.DataAccess.Entities.CreditAdvice"/> Purchase Orders in form: 'OrderId' - 'Order entity'.
            </summary>
            <returns>List of related to <see cref="T:TRR.O2I.DataAccess.Entities.CreditAdvice"/> Purchase Orders in form: 'OrderId' - 'Order entity'.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFailureException">
            <summary>
            Exception template class for copy-pasting.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
            <param name="innerException">Reference to inner exception to be enveloped.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException">
            <summary>
            Throws when formatter unable to format or parse object.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
            <param name="innerException">Reference to inner exception to be enveloped.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ActivityTypeFormatter">
            <summary>
            ActivityTypeFormatter class definition
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ActivityTypeFormatter.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.AgencyCodeFormatter">
            <summary>
            Convert Currency code ID into Currency name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.AgencyCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNBuyerLineItemNumByLineIdFormatter">
            <summary>
            Returns Buyer Line Item Number by ASNOrderLineId.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNBuyerLineItemNumByLineIdFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNBuyerLineItemNumByLineIdFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNBuyerLineItemNumByLineIdFormatter.#ctor(TRR.O2I.DataAccess.Services.IServiceManagerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNBuyerLineItemNumByLineIdFormatter"/> class.
            </summary>
            <param name="managerFactory">The manager factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNBuyerLineItemNumByLineIdFormatter.Format(System.Object)">
            <summary>
            Returns Buyer Line Item Number by ASNOrderLineId.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNBuyerLineItemNumByLineIdFormatter.Parse(System.Object)">
            <summary>
            Trims intput/output string.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNLineItemDescriptionCropFormatter">
            <summary>
            StringsTrimmer trims intput/output string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNLineItemDescriptionCropFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNLineItemDescriptionCropFormatter.Parse(System.Object)">
            <summary>
            Restore object from formatted data.
            </summary>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNPackageTypeFormatter">
            <summary>
            Convert ASN Package Type Code into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNPackageTypeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNPackageTypeValueFormatter">
            <summary>
            Convert ASNPackageType mode code ID into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNPackageTypeValueFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNStatusFormatter">
            <summary>
            Convert ASN status ID value into status name.
            </summary>	
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNStatusFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNTypeFormatter">
            <summary>
            Convert ASN status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ASNTypeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.BuyerOrderNumbersFormatter">
            <summary>
            StringsTrimmer trims intput/output string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.BuyerOrderNumbersFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.BuyerOrderNumbersFormatter.Parse(System.Object)">
            <summary>
            Restore object from formatted data.
            </summary>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CAStatusFormatter">
            <summary>
            Convert CreditAdvice status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CAStatusFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CATypeFormatter">
            <summary>
            Convert Currency code ID into Currency name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CATypeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CommaSeparatedPartyUIHTMLFormatter">
            <summary>
            Represents party ui html formatter, but it uses comma as separated.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIHTMLFormatter">
            <summary>
            Summary description for PartyUIHTMLFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIHTMLFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIHTMLFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIHTMLFormatter.#ctor(DataAccess.Services.IEnumGateway,TRR.O2I.Common.Core.Localization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIHTMLFormatter"/> class.
            </summary>
            <param name="enumGateway">The enum gateway.</param>
            <param name="localizationManager">The localization manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIHTMLFormatter.Format(System.Object)">
            <summary>
            Format Party object into string[] delimitated by "br"
            </summary>
            <param name="data"></param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIHTMLFormatter.Parse(System.Object)">
            <summary>
            IDatabindingFormatter implementation
            </summary>
            <param name="formattedData"></param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIHTMLFormatter.NewLineDelimiter">
            <summary>
            Gets new line delimiter.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIHTMLFormatter.ShowLabels">
            <summary>
            Gets a value indicating whether [show labels].
            </summary>
            <value><c>true</c> if [show labels]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.CommaSeparatedPartyUIHTMLFormatter.NewLineDelimiter">
            <summary>
            Gets new line delimiter.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.CommaSeparatedPartyUIHTMLFormatter.ShowLabels">
            <summary>
            Gets a value indicating whether [show labels].
            </summary>
            <value><c>true</c> if [show labels]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryCodeFormatter">
            <summary>
            Convert Country Code into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryCodeFormatter.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryShortCodeFormatter">
            <summary>
            Gets short abbreviation of the Country by it's ID ( for example 'DE' foe Germany)
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryShortCodeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryShortCodeFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryShortCodeFormatter.Init(DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryShortCodeFormatter.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="gateway"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryShortCodeFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            If enum code == null (int.MinValue) empty string is being returned.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryShortCodeFormatter.Parse(System.Object)">
            <summary>
            Restore Enum code from it's name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyCodeFormatter">
            <summary>
            Convert Currency code ID into Currency name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyCodeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyCodeFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyCodeFormatter.Init(DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyCodeFormatter.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="gateway"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyCodeFormatter.Format(System.Object)">
            <summary>
            Convert Currency code ID into Currency name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyCodeFormatter.Format(System.Nullable{System.Int32})">
            <summary>
            Formats the specified currency fk.
            </summary>
            <param name="currencyFK">The currency fk.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyCodeFormatter.Format(System.Int32)">
            <summary>
            Formats the specified currency fk.
            </summary>
            <param name="currencyFK">The currency fk.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyCodeFormatter.Parse(System.Object)">
            <summary>
            Parses the specified formated data.
            </summary>
            <param name="formattedData">The formated data.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyMultipleBRDelimitedFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.CurrencyMultipleBRDelimitedFormatter.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBInt32Formatter">
            <summary>
            Convert int value into it's string representation.
            int.MinValue converts into string.Empty.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBInt32Formatter.Format(System.Object)">
            <summary>
            Convert int value into it's string representation.
            int.MinValue converts into string.Empty.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBInt32Formatter.Parse(System.Object)">
            <summary>
            Restore int object from short date string.
            string.Empty converts into int.MinValue.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBInt32ToBooleanFormatter">
            <summary>
            Convert int value into bool.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBInt32ToBooleanFormatter.Format(System.Object)">
            <summary>
            Convert int value into bool.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBInt32ToBooleanFormatter.Parse(System.Object)">
            <summary>
            Not supported.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBStringToBooleanFormatter">
            <summary>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBStringToBooleanFormatter.Format(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBStringToBooleanFormatter.Parse(System.Object)">
            <summary>
            Not supported.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.DeliveryFunctionCodeFormatter">
            <summary>
            Convert delivery function code ID into function name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DeliveryFunctionCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.DocumentTypeEnumFormatter">
            <summary>
            Convert DocumentType id into it's name.
            </summary>	
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DocumentTypeEnumFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.DocumentTypeFormatter">
            <summary>
            Convert DocumentType object into short string name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DocumentTypeFormatter.Format(System.Object)">
            <summary>
            Convert DocumentType object into short string name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.DocumentTypeFormatter.Parse(System.Object)">
            <summary>
            Restore DocumentType object from short string name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.GoodsReceiptStatusFormatter">
            <summary>
            Convert goods receipt status Id value (given as business enumeration value) into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.GoodsReceiptStatusFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.GoodsReceiptStatusFormatter"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.HTMLAnchorsFormatter">
            <summary>
            Decorates urls with HTML tags
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.HTMLAnchorsFormatter.Format(System.Object)">
            <summary>
            Trims intput/output string.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.HTMLAnchorsFormatter.Parse(System.Object)">
            <summary>
            Transforms plain text URL to HTML anchor
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formatted Data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IndicatorCodeFormatter">
            <summary>
            Convert indicator code ID value into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IndicatorCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvertBoolFormatter">
            <summary>
            Convert int value into bool.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvertBoolFormatter.Format(System.Object)">
            <summary>
            Convert int value into bool.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvertBoolFormatter.Parse(System.Object)">
            <summary>
            Not supported.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoicePurposeCodeFormatter">
            <summary>
            Convert invoice purpose code ID value into purpose name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoicePurposeCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceResponseCodeFormatter">
            <summary>
            Invoice Response Code formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceResponseCodeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceResponseCodeFormatter"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceStatusFormatter">
            <summary>
            Convert invoice status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceStatusFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceTypeCodeFormatter">
            <summary>
            Convert invoice type ID value into type name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.InvoiceTypeCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsASNStatusNotSentFormatter">
            <summary>
            Convert ASN sent status into boolean representation.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsASNStatusNotSentFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryShortCodeFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsASNStatusNotSentFormatter.Init(DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsASNStatusNotSentFormatter.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="gateway"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsASNStatusNotSentFormatter.Format(System.Object)">
            <summary>
            Convert ASN sent status into boolean representation.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsASNStatusNotSentFormatter.Parse(System.Object)">
            <summary>
            bool to ASN status convertation not supported by formatter.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsInvoiceStatusNotSentFormatter">
            <summary>
            Convert Invoice sent status into boolean representation.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsInvoiceStatusNotSentFormatter.Format(System.Object)">
            <summary>
            Convert Invoice sent status into boolean representation.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsInvoiceStatusNotSentFormatter.Parse(System.Object)">
            <summary>
            bool to Invoice status convertation not supported by formatter.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsNotOtherLineItemFormatter">
            <summary>
            Summary description for IsNotOtherLineItemFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsNotOtherLineItemFormatter.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsNotOtherLineItemFormatter.Parse(System.Object)">
            <summary>
            Restore Decimal object from short date string.
            string.Empty converts into Decimal.MinValue.
            </summary>
            <param name="formattedData">Presentation value to be parsed.</param>
            <returns>Domain value parsed from the user value</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsRejectedLinesExists">
            <summary>
            Returns true if there is lines which can be flipped to XML.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsRejectedLinesExists.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsRejectedLinesExists"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsRejectedLinesExists.Init(DataAccess.Services.IPurchaseOrderGateway,DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified order gateway.
            </summary>
            <param name="orderGateway">The order gateway.</param>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsRejectedLinesExists.#ctor(DataAccess.Services.IPurchaseOrderGateway,DataAccess.Services.IEnumGateway)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsRejectedLinesExists"/> class.
            </summary>
            <param name="orderGateway">The order gateway.</param>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsRejectedLinesExists.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsRejectedLinesExists.Parse(System.Object)">
            <summary>
            Restore object from formatted data.
            </summary>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsServiceLineItemFormatter">
            <summary>
            Summary description for IsServiceLineItemFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsServiceLineItemFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsServiceLineItemFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsServiceLineItemFormatter.#ctor(TRR.O2I.DataAccess.Services.IServiceManagerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsServiceLineItemFormatter"/> class.
            </summary>
            <param name="managerFactory">The manager factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsServiceLineItemFormatter.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsServiceLineItemFormatter.Parse(System.Object)">
            <summary>
            Restore Decimal object from short date string.
            string.Empty converts into Decimal.MinValue.
            </summary>
            <param name="formattedData">Presentation value to be parsed.</param>
            <returns>Domain value parsed from the user value</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsOtherLineItemFormatter">
            <summary>
            Summary description for IsOtherLineItemFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsOtherLineItemFormatter.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsOtherLineItemFormatter.Parse(System.Object)">
            <summary>
            Restore Decimal object from short date string.
            string.Empty converts into Decimal.MinValue.
            </summary>
            <param name="formattedData">Presentation value to be parsed.</param>
            <returns>Domain value parsed from the user value</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsSubitemDeletedFormatter">
            <summary>
            Returns true if argument is ChangeTypeCode.ItemDeleted.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsSubitemDeletedFormatter.Format(System.Object)">
            <summary>
            Format.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsSubitemDeletedFormatter.Parse(System.Object)">
            <summary>
            Parse.
            </summary>
            <param name="formattedData"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeWithO2IStyleFormatter">
            <summary>
            Allows to uniform conversion between date/time in user local time and UTC + O2I Style.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeFormatter">
            <summary>
            Allows for uniform conversion between date/time in user local time and UTC.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.DBDateTimeFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeFormatter.Init(TRR.O2I.Common.Core.DateTimeUtil.IDateTimeHelper)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="helper">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeFormatter.#ctor(TRR.O2I.Common.Core.DateTimeUtil.IDateTimeHelper)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="helper"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeFormatter.Parse(System.Object)">
            <summary>
            Provides from-view-to-business-logic directional conversion.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="formattedData">UI (view) value representation.</param>
            <returns>Value ready to be used internally by system (business logic).</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeFormatter.Format(System.Object)">
            <summary>
            Provides from-business-logic-to-view directional conversion.
            </summary>
            <param name="data">System (business logic) value representation.</param>
            <returns>Value ready to be shown on UI (view).</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeWithO2IStyleFormatter.Format(System.Object)">
            <summary>
            Provides from-business-logic-to-view directional conversion.
            </summary>
            <param name="data">System (business logic) value representation.</param>
            <returns>Value ready to be shown on UI (view).</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeWithO2IStyleFormatter.Parse(System.Object)">
            <summary>
            Provides from-view-to-business-logic directional conversion.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="formattedData">UI (view) value representation.</param>
            <returns>Value ready to be used internally by system (business logic).</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeStrFormatter">
            <summary>
            Allows for uniform conversion between date/time in user local time and UTC. Result is given as string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeStrFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeStrFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeStrFormatter.Init(TRR.O2I.Common.Core.DateTimeUtil.IDateTimeHelper)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="helper">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeStrFormatter.#ctor(TRR.O2I.Common.Core.DateTimeUtil.IDateTimeHelper)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="helper"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeStrFormatter.Parse(System.Object)">
            <summary>
            Provides from-view-to-business-logic directional conversion.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="formattedData">UI (view) value representation.</param>
            <returns>Value ready to be used internally by system (business logic).</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeStrFormatter.Format(System.Object)">
            <summary>
            Provides from-business-logic-to-view directional conversion.
            </summary>
            <param name="data">System (business logic) value representation.</param>
            <returns>Value ready to be shown on UI (view).</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.LogLevelFormatter">
            <summary>
            Base class for all enum formatters.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LogLevelFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.LogLevelFormatter.Parse(System.Object)">
            <summary>
            Restore Enum code from it's name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.NullToBoolFormatter">
            <summary>
            Summary description for NullToBoolFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.NullToBoolFormatter.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.NullToBoolFormatter.Parse(System.Object)">
            <summary>
            Restore Decimal object from short date string.
            string.Empty converts into Decimal.MinValue.
            </summary>
            <param name="formattedData">Presentation value to be parsed.</param>
            <returns>Domain value parsed from the user value</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.NumericFormatterBase">
            <summary>
            Formatter for numeric values.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.NumericFormatterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.NumericFormatterBase"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.NumericFormatterBase.#ctor(TRR.O2I.Common.Core.NumericFormatSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.NumericFormatterBase"/> class.
            </summary>
            <param name="numericFormat">The numeric format.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.NumericFormatterBase.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.NumericFormatterBase.Parse(System.Object)">
            <summary>
            Restore Decimal object from short date string.
            string.Empty converts into Decimal.MinValue.
            </summary>
            <param name="formattedData">Presentation value to be parsed.</param>
            <returns>Domain value parsed from the user value</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatter">
            <summary>
            Convert order line status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatter.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatter.Parse(System.Object)">
            <summary>
            Restore Enum code from it's name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsNotRejected">
            <summary>
            Convert order line rejected status into boolean representation.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsNotRejected.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsNotRejected"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsNotRejected.Init(DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsNotRejected.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Creates an instance of Formatter with using of given gateway
            </summary>
            <param name="gateway"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsNotRejected.Format(System.Object)">
            <summary>
            Convert order line rejected status into boolean representation.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsNotRejected.Parse(System.Object)">
            <summary>
            bool to Order Line status convertation not supported by formatter.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsRejected">
            <summary>
            Convert order line rejected status into boolean representation.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsRejected.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsNotRejected"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsRejected.Init(DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsRejected.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Creates an instance of Formatter with using of given gateway
            </summary>
            <param name="gateway"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsRejected.Format(System.Object)">
            <summary>
            Convert order line rejected status into boolean representation.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsRejected.Parse(System.Object)">
            <summary>
            bool to Order Line status convertation not supported by formatter.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatter">
            <summary>
            Convert order status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsNotRejected">
            <summary>
            Convert order line rejected status into boolean representation.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsNotRejected.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsNotRejected"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsNotRejected.Init(DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsNotRejected.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Creates an instance of Formatter with using of given gateway
            </summary>
            <param name="gateway"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsNotRejected.Format(System.Object)">
            <summary>
            Convert order line rejected status into boolean representation.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsNotRejected.Parse(System.Object)">
            <summary>
            bool to Order Line status convertation not supported by formatter.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsRejected">
            <summary>
            Convert order line rejected status into boolean representation.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsRejected.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsRejected"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsRejected.Init(DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsRejected.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Creates an instance of Formatter with using of given gateway
            </summary>
            <param name="gateway"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsRejected.Format(System.Object)">
            <summary>
            Convert order line rejected status into boolean representation.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderStatusFormatterIsRejected.Parse(System.Object)">
            <summary>
            bool to Order Line status convertation not supported by formatter.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OtherLineItemTypeFormatter">
            <summary>
            Formatter to format line item type from purchase order line.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OtherLineItemTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsServiceLineItemFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OtherLineItemTypeFormatter.#ctor(TRR.O2I.DataAccess.Services.IServiceManagerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.IsServiceLineItemFormatter"/> class.
            </summary>
            <param name="managerFactory">The manager factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OtherLineItemTypeFormatter.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.OtherLineItemTypeFormatter.Parse(System.Object)">
            <summary>
            Restore Decimal object from short date string.
            string.Empty converts into Decimal.MinValue.
            </summary>
            <param name="formattedData">Presentation value to be parsed.</param>
            <returns>Domain value parsed from the user value</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyContactHTMLFormatter">
            <summary>
            Summary description for PartyContactHTMLFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyContactHTMLFormatter.Format(System.Object)">
            <summary>
            Format DateTime object into short date string.
            By dafault local thread culture information used.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyContactHTMLFormatter.Parse(System.Object)">
            <summary>
            Restore DateTime object from short date string.
            By dafault local thread culture information used.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyHTMLFormatter">
            <summary>
            Convert Party entity into HTML string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyHTMLFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyHTMLFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyHTMLFormatter.#ctor(DataAccess.Services.IEnumGateway,TRR.O2I.Common.Core.Localization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyHTMLFormatter"/> class.
            </summary>
            <param name="enumGateway">The enum gateway.</param>
            <param name="localizationManager">The localization manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyHTMLFormatter.Format(System.Object)">
            <summary>
            Format DateTime object into short date string.
            By dafault local thread culture information used.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyHTMLFormatter.Parse(System.Object)">
            <summary>
            Restore DateTime object from short date string.
            By dafault local thread culture information used.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIContactHTMLFormatter">
            <summary>
            Summary description for PartyUIContactHTMLFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIContactHTMLFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIContactHTMLFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIContactHTMLFormatter.Init(TRR.O2I.Common.Core.Localization.ILocalizationManager)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="manager">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIContactHTMLFormatter.#ctor(TRR.O2I.Common.Core.Localization.ILocalizationManager)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIContactHTMLFormatter.Format(System.Object)">
            <summary>
            Format Party object into string[] delimitated by "br"
            </summary>
            <param name="data"></param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PartyUIContactHTMLFormatter.Parse(System.Object)">
            <summary>
            <c>IDatabindingFormatter</c> implementation
            </summary>
            <param name="formattedData"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PaymentCardTypeFormatter">
            <summary>
            Convert payment card type ID into type name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PaymentCardTypeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PaymentMeanCodeFormatter">
            <summary>
            Convert payment mean code ID into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PaymentMeanCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PaymentTermCodeFormatter">
            <summary>
            Convert Payment term code ID into Payment type name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PaymentTermCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PrimaryReferenceDateFormatter">
            <summary>
            Summary description for NullToBoolFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PrimaryReferenceDateFormatter.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PrimaryReferenceDateFormatter.Parse(System.Object)">
            <summary>
            </summary>
            <param name="formattedData"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ProductIdentifierQualifierCodeFormatter">
            <summary>
            Convert delivery function code ID into function name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ProductIdentifierQualifierCodeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryShortCodeFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ProductIdentifierQualifierCodeFormatter.Init(DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ProductIdentifierQualifierCodeFormatter.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="gateway"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ProductIdentifierQualifierCodeFormatter.Format(System.Object)">
            <summary>
            Convert ProductIdentifierQualifierCode ID into ProductIdentifierQualifier name.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.PurposeCodeFormatter">
            <summary>
            Convert Purpose Code value into human readable name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.PurposeCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.QuantityFormatter">
            <summary>
            Formatter for numeric values.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.QuantityFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.QuantityFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.QuantityFormatter.#ctor(TRR.O2I.Common.Core.IQuantityHelper)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="helper"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.QuantityFormatter.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.QuantityFormatter.Parse(System.Object)">
            <summary>
            Restore the string representation of the value using the current culture settings
            </summary>
            <param name="formattedData"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ReasonTaxExemptFormatter">
            <summary>
            Reason Tax Exempt Method Code into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ReasonTaxExemptFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ReferenceTypeCodeFormatter">
            <summary>
            Convert Reference type Id into type name
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ReferenceTypeCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.RegionFormatter">
            <summary>
            Convert Currency code ID into Currency name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RegionFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RegionFormatter.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.RelatedDocumentsStatusFormatter">
            <summary>
            Convert Related document common status string to display status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RelatedDocumentsStatusFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.RelatedDocumentsStatusFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RelatedDocumentsStatusFormatter.Init(DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RelatedDocumentsStatusFormatter.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Creates an instance of Formatter with using of given gateway
            </summary>
            <param name="gateway"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RelatedDocumentsStatusFormatter.Format(System.Object)">
            <summary>
            Convert Related document common status string to display status name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RelatedDocumentsStatusFormatter.Parse(System.Object)">
            <summary>
            Bacward conversionn of status into related document common status string not supported.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeHumanFormatter">
            <summary>
            Requested Response Code formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeHumanFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeHumanFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeHumanFormatter.#ctor(TRR.O2I.Common.Core.Localization.ILocalizationManager,DataAccess.Services.IEnumGateway)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeHumanFormatter"/> class.
            </summary>
            <param name="localizationManager">The localization manager.</param>
            <param name="enumGateway">The enum gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeHumanFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseCodeHumanFormatter.Parse(System.Object)">
            <summary>
            Restore object from formatted data.
            </summary>
            <param name="formattedData">Formatted data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseFormatter">
            <summary>
            Convert delivery function code ID into function name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryShortCodeFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseFormatter.Init(DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseFormatter.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="gateway"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.RequestedResponseFormatter.Format(System.Object)">
            <summary>
            Convert ProductIdentifierQualifierCode ID into ProductIdentifierQualifier name.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.SectionVisibilityFormatter">
            <summary>
            SectionVisibilityFormatter. Is used for control of section visbility in PDF.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.SectionVisibilityFormatter.Format(System.Object)">
            <summary>
            Returns false if data is null otherwise returns true
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.SectionVisibilityFormatter.Parse(System.Object)">
            <summary>
            
            </summary>
            <param name="formattedData"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ShipmentMethodCodeFormatter">
            <summary>
            Convert shipment method code formatter ID into shipment method name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ShipmentMethodCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.ShortDateTimeFormatter">
            <summary>
            Convert DateTime value into short string format and string to date.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ShortDateTimeFormatter.Format(System.Object)">
            <summary>
            Format DateTime object into short date string.
            By dafault local thread culture information used.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.ShortDateTimeFormatter.Parse(System.Object)">
            <summary>
            Restore DateTime object from short date string.
            By dafault local thread culture information used.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.SpecialHandlingCodeFormatter">
            <summary>
            Convert Special Handling Code into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.SpecialHandlingCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.StringTrimmer">
            <summary>
            StringsTrimmer trims input/output string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.StringTrimmer.Format(System.Object)">
            <summary>
            Trims intput/output string.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.StringTrimmer.Parse(System.Object)">
            <summary>
            Trims intput/output string.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.SupportingSubReferenceFormatter">
            <summary>
            Summary description for NullToBoolFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.SupportingSubReferenceFormatter.Format(System.Object)">
            <summary>
            Convert Decimal value into it's string representation.
            Decimal.MinValue converts into string.Empty.
            </summary>
            <param name="data">Domain value to be converted.</param>
            <returns>User presentation of the domain value.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.SupportingSubReferenceFormatter.Parse(System.Object)">
            <summary>
            </summary>
            <param name="formattedData"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFromInvoiceLineFormatter">
            <summary>
            Returns Tax Category of the first tax (if exists) of the Invoice Line or empty string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFromInvoiceLineFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFromInvoiceLineFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFromInvoiceLineFormatter.#ctor(TRR.O2I.DataAccess.Services.IServiceManagerFactory,DataAccess.Services.IEnumGateway)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFromInvoiceLineFormatter"/> class.
            </summary>
            <param name="managerFactory">The manager factory.</param>
            <param name="enumGateway">The enum gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFromInvoiceLineFormatter.Format(System.Object)">
            <summary>
            Returns Tax Category of the first tax (if exists) of the Invoice Line or empty string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFromInvoiceLineFormatter.Parse(System.Object)">
            <summary>
            no back convert
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFromInvoiceLineIdFormatter">
            <summary>
             Returns Tax Category of the first tax (if exists) of the Invoice Line or empty string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFromInvoiceLineIdFormatter.Format(System.Object)">
            <summary>
            Returns Tax Category of the first tax (if exists) of the Invoice Line or empty string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFromInvoiceLineIdFormatter.Parse(System.Object)">
            <summary>
            no back convert
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxPaymentMethodFormatter">
            <summary>
            Convert Tax Payment Method Code into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxPaymentMethodFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxPercentFromInvoiceLineFormatter">
            <summary>
            Returns Tax Percent of the first tax (if exists) of the InvoiceLine or empty string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxPercentFromInvoiceLineFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxPercentFromInvoiceLineFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxPercentFromInvoiceLineFormatter.Format(System.Object)">
            <summary>
            Returns Tax Percent of the first tax (if exists) of the InvoiceLine or empty string.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxPercentFromInvoiceLineFormatter.Format(System.Int32)">
            <summary>
            Returns Tax Percent of the first tax (if exists) of the InvoiceLine or empty string.
            </summary>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxPercentFromInvoiceLineFormatter.Parse(System.Object)">
            <summary>
            no back convert
            </summary>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxPercentFromInvoiceLineIdFormatter">
            <summary>
            Returns Tax Percent of the first tax (if exists) of the InvoiceLine or empty string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxPercentFromInvoiceLineIdFormatter.Format(System.Object)">
            <summary>
            Returns Tax Percent of the first tax (if exists) of the InvoiceLine or empty string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxPercentFromInvoiceLineIdFormatter.Parse(System.Object)">
            <summary>
            no back convert
            </summary>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxTypeFormatter">
            <summary>
            Convert Tax Type Code into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxTypeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxTypeFromInvoiceLineFormatter">
            <summary>
            Returns Tax Category of the first tax (if exists) of the Invoice Line or empty string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxTypeFromInvoiceLineFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxTypeFromInvoiceLineFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxTypeFromInvoiceLineFormatter.#ctor(TRR.O2I.DataAccess.Services.IServiceManagerFactory,DataAccess.Services.IEnumGateway)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxCategoryFromInvoiceLineFormatter"/> class.
            </summary>
            <param name="managerFactory">The manager factory.</param>
            <param name="enumGateway">The enum gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxTypeFromInvoiceLineFormatter.Format(System.Object)">
            <summary>
            Returns Tax Type of the first tax (if exists) of the Invoice Line or empty string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TaxTypeFromInvoiceLineFormatter.Parse(System.Object)">
            <summary>
            no back convert
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TermOfDeliveryCodeFormatter">
            <summary>
            StringsTrimmer trims intput/output string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TermOfDeliveryCodeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.OrderLineStatusFormatterIsNotRejected"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TermOfDeliveryCodeFormatter.Init(DataAccess.Services.IEnumGateway)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="gateway">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TermOfDeliveryCodeFormatter.#ctor(DataAccess.Services.IEnumGateway)">
            <summary>
            Creates an instance of Formatter with using of given gateway
            </summary>
            <param name="gateway"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TermOfDeliveryCodeFormatter.Format(System.Object)">
            <summary>
            Trims intput/output string.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TermOfDeliveryCodeFormatter.Parse(System.Object)">
            <summary>
            Trims intput/output string.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TransportMeansCodeFormatter">
            <summary>
            Convert Transport mode code ID into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TransportMeansCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TransportModeCodeFormatter">
            <summary>
            Convert Transport mode code ID into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TransportModeCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.TRUEUserFormatter">
            <summary>
            Base class for all enum formatters.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TRUEUserFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.CountryShortCodeFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TRUEUserFormatter.Init(TRR.O2I.Common.Core.TRUEIntegration.ITRUEIntegrationFacade)">
            <summary>
            Inits the specified gateway.
            </summary>
            <param name="facade">The gateway.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TRUEUserFormatter.#ctor(TRR.O2I.Common.Core.TRUEIntegration.ITRUEIntegrationFacade)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="facade"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TRUEUserFormatter.Format(System.Object)">
            <summary>
            Format TRUE user Id into user name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.TRUEUserFormatter.Parse(System.Object)">
            <summary>
            Restore TRUE user Id from user name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIPriceValidatorFormatter">
            <summary>
            Represents ui price validation expression.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIPriceValidatorFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIPriceValidatorFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIPriceValidatorFormatter.#ctor(TRR.O2I.Common.Core.NumericFormatSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIPriceValidatorFormatter"/> class.
            </summary>
            <param name="numericFormat">The numeric format.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIPriceValidatorFormatter.Format(System.Object)">
            <summary>
            Gets price validation  expression.
            </summary>
            <param name="data">Data to be converted.</param>
            <returns>Price validation  expression.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIPriceValidatorFormatter.Parse(System.Object)">
            <summary>
            Actually this formatter should not parse anything.
            </summary>
            <param name="formattedData">Formatted data.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIQuantityValidatorFormatter">
            <summary>
            Summary description for UIQuantityValidatorFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIQuantityValidatorFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIQuantityValidatorFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIQuantityValidatorFormatter.#ctor(TRR.O2I.Common.Core.NumericFormatSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIQuantityValidatorFormatter"/> class.
            </summary>
            <param name="numericFormat">The numeric format.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIQuantityValidatorFormatter.Format(System.Object)">
            <summary>
            Gets quantity validation  expression.
            </summary>
            <param name="data">Data to be converted.</param>
            <returns>Quantity validation  expression.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UIQuantityValidatorFormatter.Parse(System.Object)">
            <summary>
            Actually this formatter should not parse anything.
            </summary>
            <param name="formattedData">Formatted data.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.UnsafeFormatter">
            <summary>
            Summary description for UnsafeFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UnsafeFormatter.Format(System.Object)">
            <summary>
            Convert string data into int value
            </summary>
            <remarks>It doesn't throw any exception if invalida cast exception raised, it simply  returns min value</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UnsafeFormatter.Parse(System.Object)">
            <summary>
            bool to ASN status convertation not supported by formatter.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.UOMCodeFormatter">
            <summary>
            Convert UOM code ID into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UOMCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.UTCToUserTimeFormatter">
            <summary>
            Allows for uniform conversion between date/time in user local time and UTC. Result is given as string.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UTCToUserTimeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.LocaleToUTCDateTimeStrFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UTCToUserTimeFormatter.#ctor(TRR.O2I.Common.Core.DateTimeUtil.IDateTimeHelper)">
            <summary>
            Creates an instance of Formatter with using of given contry gateway
            </summary>
            <param name="helper"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UTCToUserTimeFormatter.Parse(System.Object)">
            <summary>
            Provides from-view-to-business-logic directional conversion.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="formattedData">UI (view) value representation.</param>
            <returns>Value ready to be used internally by system (business logic).</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.UTCToUserTimeFormatter.Format(System.Object)">
            <summary>
            Provides from-business-logic-to-view directional conversion.
            </summary>
            <param name="data">System (business logic) value representation.</param>
            <returns>Value ready to be shown on UI (view).</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter">
            <summary>
            Limits word's length by given number of symbols symbols. If more -- inserts "wbr" tag.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter.Format(System.Object)">
            <summary>
            Trims intput/output string.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter.Parse(System.Object)">
            <summary>
            Trims intput/output string.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter.MaxWordLength">
            <summary>
            Maximum word length.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter10">
            <summary>
            Limits word's length by 10 symbols. If more -- inserts "wbr" tag.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter10.MaxWordLength">
            <summary>
            Set max word length to 10
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter20">
            <summary>
            Limits word's length by 10 symbols. If more -- inserts "wbr" tag.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter20.MaxWordLength">
            <summary>
            Set max word length to 20
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter30">
            <summary>
            Limits word's length by 30 symbols. If more -- inserts "wbr" tag.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter30.MaxWordLength">
            <summary>
            Set max word length to 30
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter40">
            <summary>
            Limits word's length by 40 symbols. If more -- inserts "wbr" tag.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter40.MaxWordLength">
            <summary>
            Set max word length to 40
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter50">
            <summary>
            Limits word's length by 50 symbols. If more -- inserts "wbr" tag.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter50.MaxWordLength">
            <summary>
            Set max word length to 50
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter60">
            <summary>
            Limits word's length by 60 symbols. If more -- inserts "wbr" tag.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter60.MaxWordLength">
            <summary>
            Set max word length to 60
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter80">
            <summary>
            Limits word's length by 80 symbols. If more -- inserts "wbr" tag.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.DataBinding.Formatters.WordLengthLimiter80.MaxWordLength">
            <summary>
            Set max word length to 80
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.DataBinding.Formatters.Xcbl4AgencyCodeFormatter">
            <summary>
            Convert Currency code ID into Currency name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.DataBinding.Formatters.Xcbl4AgencyCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Databinding.O2IDatabindingManager">
            <summary>
            Represents automated databinding technique for O2i application
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.O2IDatabindingManager.DataToView(System.Collections.Hashtable,System.Web.UI.Control,System.String)">
            <summary>
            Data to view.
            </summary>
            <param name="data">The data.</param>
            <param name="view">The view.</param>
            <param name="bindingMapName">Name of the binding map.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.O2IDatabindingManager.ViewToData(System.Web.UI.Control,System.String)">
            <summary>
            Views to data.
            </summary>
            <param name="view">The view.</param>
            <param name="bindingMapName">Name of the binding map.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.O2IDatabindingManager.LoadBindingMapFromFileByName(System.String)">
            <summary>
            Loads view binding map from DB or Cache.
            </summary>
            <param name="name">Map name.</param>
            <returns>Parsed <see cref="T:TRR.O2I.BusinessLogic.DataBinding.DatabindingDescriptorCollection"/>.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Databinding.O2IDatabindingManager.LoadBindingMapFromFile(System.String)">
            <summary>
            Loads view binding map from XML file.
            </summary>
            <param name="xmlMapFilePath">Full path to XML file with binding map data.</param>
            <returns>Parsed <see cref="T:TRR.O2I.BusinessLogic.DataBinding.DatabindingDescriptorCollection"/>.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DateConverter">
            <summary>
            DateConverter helper class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DateConverter.GetTRDate(System.DateTime)">
            <summary>
            Converts UTC date-time value into the TRIO format.
            </summary>
            <param name="utcValue">System (UTC) DateTime to be translated.</param>
            <returns>Textual representation of the value in TRIO format.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DateConverter.GetTRDate(System.Object)">
            <summary>
            Converts UTC date-time value into the TRIO format.
            </summary>
            <param name="utcValue">System (UTC) date to be translated.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DateConverter.XCBL40GetTRDate(System.DateTime)">
            <summary>
            AL:
            Converts UTC date-time value into the xCBL 4.0 TRIO format.
            </summary>
            <param name="utcValue">System (UTC) DateTime to be translated.</param>
            <returns>Textual representation of the value in TRIO format.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DateConverter.GetDate(System.String)">
            <summary>
            Converts TRIO-compliant string into UTC date-time value
            </summary>
            <param name="trioDateTime">Textual representation of the value in TRIO format.</param>
            <returns>System DateTime value in UTC.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DateConverter.XCBL40GetDate(System.String)">
            <summary>
            Converts TRIO-compliant string into UTC date-time value
            </summary>
            <param name="trioDateTime">Textual representation of the value in TRIO format.</param>
            <returns>System DateTime value in UTC.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DateConverter.XCBL40DateTimeToUTC(System.String)">
            <summary>
            Converts XCBL 4.0 (xsd:dateTime) string to DateTime (UTC)
            </summary>
            <param name="xmlDateTime">XCBL 4.0 (xsd:dateTime) string</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.AsnEntityFactory">
            <summary>
            Asn Entity Factory
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnEntityFactory.CreateDefaultTermsOfDelivery">
            <summary>
            Creates default terms of delivery entity.
            </summary>
            <returns>Terms of delivery entity.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnEntityFactory.CreateDefaultPaymentInstruction">
            <summary>
            Creates filled by default payment instruction.
            </summary>
            <returns>Payment instruction entity.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnEntityFactory.CopyPaymentInstruction(TRR.O2I.BusinessLogic.BusinessEntity.Entities.PaymentInstruction)">
            <summary>
            Copies the payment instruction.
            </summary>
            <param name="originalInstruction">The original instruction.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnEntityFactory.CopyTermsOfDelivery(TRR.O2I.BusinessLogic.BusinessEntity.Entities.TermsOfDelivery)">
            <summary>
            Copies the terms of delivery.
            </summary>
            <param name="originalTerms">The original terms.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.AsnEntityFactory.CopyOrderLineToASNOrderLine(TRR.O2I.DataAccess.Entities.IOrderLineLite,TRR.O2I.DataAccess.Entities.IAsnOrderLineRow)">
            <summary>
            Copies the order line to ASN order line.
            </summary>
            <param name="orderLine">The order line.</param>
            <param name="asnLine">The asn line.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory">
            <summary>
            Factory for DocumentInfo class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromGoodsReceipt(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String,System.String)">
            <summary>
            Creates from goods receipt.
            </summary>
            <param name="goodsReceipt">The goods receipt.</param>
            <param name="documentUniqueId">The document unique id.</param>
            <param name="plantId">The plant id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromGoodsReceiptItem(TRR.O2I.DataAccess.Entities.GoodsReceipt,TRR.O2I.DataAccess.Entities.GoodsReceiptItem,System.String,System.String)">
            <summary>
            Creates from goods receipt item.
            </summary>
            <param name="goodsReceipt">The goods receipt.</param>
            <param name="item">The item.</param>
            <param name="documentUniqueId">The document unique id.</param>
            <param name="plantId">The plant id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromGoodsReceipt(TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt,System.String,System.String)">
            <summary>
            Creates from goods receipt.
            </summary>
            <param name="goodsReceipt">The goods receipt.</param>
            <param name="documentUniqueId">The document unique id.</param>
            <param name="plantId">The plant id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromChangeOrder(TRR.O2I.DataAccess.Entities.ChangeOrder,System.String,System.String)">
            <summary>
            Creates from change order.
            </summary>
            <param name="changeOrder">The change order.</param>
            <param name="plantId">The plant id.</param>
            <param name="documentUniqueId">The document unique ID.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromChangeOrder(TRR.O2I.DataAccess.Entities.IChangeOrderRow,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland,System.String)">
            <summary>
            Creates from change order.
            </summary>
            <param name="changeOrder">The change order.</param>
            <param name="changeOrderMain">The change order main.</param>
            <param name="documentUniqueId">The document unique id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromChangeOrder(TRR.O2I.DataAccess.Entities.IChangeOrderRow)">
            <summary>
            Creates from change order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromChangeOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Creates from change order.
            </summary>
            <param name="changeOrder">The change order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromChangeOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrderHistory)">
            <summary>
            Creates from change order.
            </summary>
            <param name="changeOrder">The change order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromPurchaseOrder(TRR.O2I.DataAccess.Entities.IOrderComposite,System.String,System.String)">
            <summary>
            Creates from purchase order.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="documentUniqueId">The document unique id.</param>
            <param name="plantId">The plant id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Creates from purchase order.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderHistory)">
            <summary>
            Creates from purchase order history.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromCreditAdvice(TRR.O2I.DataAccess.Entities.ICreditAdvice,System.String,System.String)">
            <summary>
            Creates from credit advice.
            </summary>
            <param name="creditAdvice">The credit advice.</param>
            <param name="documentUniqueId">The document unique id.</param>
            <param name="plantId"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromCreditAdvice(TRR.O2I.DataAccess.Entities.ICreditAdvice,System.String)">
            <summary>
            Creates from credit advice.
            </summary>
            <param name="creditAdvice">The credit advice.</param>
            <param name="documentUniqueId">The document unique id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromRemittanceAdvice(TRR.O2I.BusinessLogic.BusinessEntity.Entities.RemittanceAdvice,System.String)">
            <summary>
            Creates from remittance advice.
            </summary>
            <param name="remittanceAdvice">The remittance advice.</param>
            <param name="documentUniqueId">The document unique id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromXmlDocumentParser(TRR.O2I.Common.Core.XMLDocumentParser,System.String)">
            <summary>
            Gets the doc info.
            </summary>
            <param name="parser">The parser.</param>
            <param name="documentUniqueId">The document unique ID.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromInvoiceResponse(TRR.O2I.DataAccess.Core.Entities.InvoiceResponseRow)">
            <summary>
            Creates from invoice response.
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromOrderCompositeXmlIsland(TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland,System.String)">
            <summary>
            Creates from order composite XML island.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromInvoice(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Creates from invoice.
            </summary>
            <param name="document">The invoice.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromSes(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet)">
            <summary>
            Creates from invoice.
            </summary>
            <param name="document">The invoice.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromInvoice(TRR.O2I.DataAccess.Entities.Invoice,System.String)">
            <summary>
            Creates from invoice.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromASN(TRR.O2I.DataAccess.Entities.IAdvanceShipmentNoticeRow)">
            <summary>
            Creates from ASN.
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromSesResponse(TRR.O2I.DataAccess.Core.Entities.EntrySheetResponseRow)">
            <summary>
            Creates DocumentInfo from SES response.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromEntrySheetResponse(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetResponse,System.String,System.Int32,System.Collections.Generic.IList{System.String},TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Creates DocumentInfo from Entry Sheet Response
            </summary>
            <param name="response"></param>
            <param name="poNumber"></param>
            <param name="entrySheetId"></param>
            <param name="notes"></param>
            <param name="supplierCountry"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromChangeOrder(TRR.O2I.DataAccess.Entities.ChangeOrder,System.String,System.String,System.Int32)">
            <summary>
            Creates from change order.
            </summary>
            <param name="changeOrder"></param>
            <param name="changeOrderMain"></param>
            <param name="documentUniqueID"></param>
            <param name="mergedCoId"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DocumentInfoFactory.CreateFromInvoiceResponse(TRR.O2I.BusinessLogic.BusinessEntity.Entities.InvoiceResponse,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.String,System.Collections.Generic.IList{System.String},TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Creates Document Info from an Invoice Response
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DocumentSender">
            <summary>
            Class DocumentSender.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IOQueue.IQueueItemProcessor">
            <summary>
            Defines queue item processing routine.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IOQueue.IQueueItemProcessor.Process(TRR.O2I.DataAccess.Entities.DocumentIO)">
            <summary>
            Process one item from queue.
            
            Throws ItemValidationFailureException in case the item does not valid 
            and can't be processed.
            Throws ItemProcessingFailureException in case the item does not processes
            successfully an can/must be processed again.
            </summary>
            <param name="item">Queue item.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DocumentSender.Process(TRR.O2I.DataAccess.Entities.DocumentIO)">
            <summary>
            Process document data throw TRxDocumentSender class.
            
            Throws ItemValidationFailureException if document validation failes.
            Throws ApplicationBaseException in other cases.
            </summary>
            <param name="item">Outgoing XML document.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DocumentSenderManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IDocumentSender">
            <summary>
            IDocumentSender interface.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IDocumentSender.Send(System.String,TRR.O2I.Common.Core.DocumentType,System.String)">
            <summary>
            Synchronously send responce document.
            </summary>
            <param name="document">string representation of XML document.</param>
            <param name="documentType">DocumentType of the XML document.</param>
            <param name="attachments">string representation of the attachments XML document</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DocumentSenderManager.Send(System.String,TRR.O2I.Common.Core.DocumentType,System.String)">
            <summary>
            Synchronously send response document throw TRx web service.
            It is also save document into ouput queue (database).
            </summary>
            <param name="document">string representation of XML document.</param>
            <param name="documentType">DocumentType of the XML document.</param>
            <param name="attachments"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DocumentSenderManager.SendOrderResponse(System.String,System.String)">
            <summary>
            Sends the order response.
            </summary>
            <param name="documentXml">The document XML.</param>
            <param name="attachmentsXml">The attachments XML.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DocumentSenderManager.QueueItem(System.String,TRR.O2I.Common.Core.DocumentType,System.String)">
            <summary>
            Stores item into outgoing queue.
            Throws <see cref="T:TRR.O2I.BusinessLogic.Services.IOQueue.QueueItemSavingException"/> if item queueing failed.
            Throws <see cref="T:TRR.O2I.Common.Exceptions.ApplicationBaseException"/> in other case.
            </summary>
            <param name="item">The item.</param>
            <param name="itemType">Queue item type.</param>
            <param name="attachmentsXML">The attachments XML document to be sent along with the main XML document</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.EntityMerger">
            <summary>
            Helper class for merging orders
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IEntityMerger">
            <summary>
            MergeOrderEngine interface
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IEntityMerger.MergeChangeOrderToChangeOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder,TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings)">
            <summary>
            Merges the change order to change order.
            </summary>
            <param name="destination">The destination change order.</param>
            <param name="source">The source change order.</param>
            <param name="order">The purchase order.</param>
            <param name="businessSettings">The business settings.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IEntityMerger.MergePurchaseOrderToChangeOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings)">
            <summary>
            Merges the purchase order to change order.
            </summary>
            <param name="order">The order.</param>
            <param name="changeOrder">The change order.</param>
            <param name="businessSettings">The business settings.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityMerger.MergeChangeOrderToChangeOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder,TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings)">
            <summary>
            Merges the change order to change order.
            </summary>
            <param name="destination">The destination change order.</param>
            <param name="source">The source change order.</param>
            <param name="order">The purchase order.</param>
            <param name="businessSettings">The business settings.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.EntityMerger.MergePurchaseOrderToChangeOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings)">
            <summary>
            Merges the purchase order to change order.
            </summary>
            <param name="order">The order.</param>
            <param name="changeOrder">The change order.</param>
            <param name="businessSettings">The business settings.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.AsnLineProcessor">
            <summary>
            Asn line flipping processor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AsnLineProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AsnLineProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ChangeOrderLineProcessor">
            <summary>
            ChangeOrder Line Processor
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.OrderLineProcessor">
            <summary>
            Order line collection flipping processor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderLineProcessor.Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderLineProcessor.GenerateXmlForLine(TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Generates the XML for line.
            </summary>
            <param name="line">The line.</param>
            <param name="orderXml">The order XML.</param>
            <param name="lineXml">The XML po line.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderLineProcessor.FlipLine(TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip,System.Xml.XmlDocument,System.Xml.XmlDocument,TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Flips the co to por line.
            </summary>
            <param name="line">The line.</param>
            <param name="lineXml">The XML po line.</param>
            <param name="orderXml">The order XML.</param>
            <param name="lineType">Type of the line.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderLineProcessor.GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ChangeOrderLineProcessor.GenerateXmlForLine(TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlippingEntities.IOrderLineFlip,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Generates the XML for line.
            </summary>
            <param name="line">The line.</param>
            <param name="orderXml">The order XML.</param>
            <param name="lineXml">The XML po line.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ChangeOrderLineShipmentDetailProcessor">
            <summary>
            Summary description for PORLineShipmentDetailProcessor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.OrderLineShipmentDetailProcessor">
            <summary>
            Summary description for PORLineShipmentDetailProcessor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderLineShipmentDetailProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#Process(System.Object,System.Object)">
            <summary>
            Generates xml for collection of Shipment details
            </summary>
            <param name="collection">PurchaseOrderLine containing collection of shipment details </param>
            <param name="parameter">XmlDocument with poLine.XmlIsland (to avoid extra loading into DOM)</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderLineShipmentDetailProcessor.GetShipmentDetailType">
            <summary>
            Gets the type of the shipment detail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderLineShipmentDetailProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ChangeOrderLineShipmentDetailProcessor.GetShipmentDetailType">
            <summary>
            Gets the type of the shipment detail.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.COtoPORMapLineReferencesProcessor">
            <summary>
            Summary description for COtoPORMapLineReferencesProcessor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.COtoPORMapLineReferencesProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#Process(System.Object,System.Object)">
            <summary>
            Processes the specified list of XML references.
            </summary>
            <param name="collection">The list of XML references.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.COtoPORMapLineReferencesProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.LineStructuredNoteProcessor">
            <summary>
            Flipping processor for processing collection of Structured Notes
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.StructuredNoteProcessor">
            <summary>
            Flipping processor for processing collection of Structured Notes
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StructuredNoteProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#Process(System.Object,System.Object)">
            <summary>
            Process the transport node
            </summary>
            <param name="collection"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StructuredNoteProcessor.GetCollectionType">
            <summary>
            Returns the type of this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.LineStructuredNoteProcessor.GetCollectionType">
            <summary>
            Returns the type of this collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.PackageLineProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.PackageLineProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#Process(System.Object,System.Object)">
            <summary>
            Processes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.PackageLineProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.PackageProcessor">
            <summary>
            Asn package processor
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.PackageProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#Process(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="collection"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.PackageProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#GetCollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.TransportProcessor">
            <summary>
            Resolves a TransportRouting node in the output XML file
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TransportProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#Process(System.Object,System.Object)">
            <summary>
            Process the transport node
            </summary>
            <param name="collection"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TransportProcessor.TRR#O2I#BusinessLogic#Managers#Flipping#ICollectionProcessor#GetCollectionType">
            <summary>
            Returns the type of this collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ConstBean">
            <summary>
            Summary description for ConstBean.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ConstBean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.ConstBean"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ConstBean.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.ConstBean"/> class.
            </summary>
            <param name="linesCount">The lines count.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.ChangeOrderResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.OrderResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.CurrentDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.HazardousRegulationsCodedValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.LinesCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.LineNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.CurrencyCoded">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.NumberOne">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.AgencyDunAndBradstreet">
            <summary>
            Returns the DunAndBradstreet 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.PackageMarkCodedOther">
            <summary>
            Returns the Other value as the package mark
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.CountryCoded">
            <summary>
            Returns the default value for CountryCoded.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.OtherValueCoded">
            <summary>
            Returns the Other value
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.ParentLineItemNum">
            <summary>
            Gets or sets the parent line item num.
            </summary>
            <value>The parent line item num.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.IsParentLine">
            <summary>
            Gets or sets a value indicating whether this instance is parent line.
            </summary>
            <value>
            	<c>true</c> if this instance is parent line; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.BuyerOrderLineReferenceNumber">
            <summary>
            Gets or sets the buyer order line reference number.
            </summary>
            <value>The buyer order line reference number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.PutParentItemFlag">
            <summary>
            Gets or sets a value indicating whether [put parent item flag].
            </summary>
            <value><c>true</c> if [put parent item flag]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.ESItemNumber">
            <summary>
            Gets or sets Entry Sheet Item Number
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.ConstBean.ESFK">
            <summary>
            Gets or sets ES FK
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.Dimension">
            <summary>
            Summary description for Dimension.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.Dimension.#ctor(System.Decimal,System.String,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.Dimension.DimensionMeasurementValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.Dimension.DimensionUOMCoded">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.Dimension.DimensionUOMCodedOther">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.Dimension.DimensionDimensionCoded">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.Dimension.DimensionDimensionCodedOther">
            <summary>
            
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.DocumentFlipper">
            <summary>
            Flips documents into the xml.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.IDocumentFlipper">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.IDocumentFlipper.ValidateDocument(System.Xml.XmlDocument,System.Int32,TRR.O2I.Common.Core.DocumentType,System.String)">
            <summary>
            Validates the document.
            </summary>
            <param name="doc">The doc.</param>
            <param name="documentId">The document id.</param>
            <param name="docType">Type of the doc.</param>
            <param name="docNumber">The doc number.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.IDocumentFlipper.FlipChangeOrderToXml(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Flips the change order to XML.
            </summary>
            <param name="changeOrder">The change order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.IDocumentFlipper.FlipPurchaseOrderToXml(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Flips the purchase order to XML.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.DocumentFlipper.#ctor(TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.IFlipperFactory,TRR.O2I.BusinessLogic.Managers.Flipping.IDocumentFlipper)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Flipping.DocumentFlipper"/> class.
            </summary>
            <param name="flipperFactory">The flipper factory.</param>
            <param name="flipper">The flipper.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.DocumentFlipper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Flipping.DocumentFlipper"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.DocumentFlipper.ValidateDocument(System.Xml.XmlDocument,System.Int32,TRR.O2I.Common.Core.DocumentType,System.String)">
            <summary>
            Validates the document.
            </summary>
            <param name="doc">The doc.</param>
            <param name="documentId">The document id.</param>
            <param name="docType">Type of the doc.</param>
            <param name="docNumber">The doc number.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.DocumentFlipper.FlipChangeOrderToXml(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Flips the change order to XML.
            </summary>
            <param name="changeOrder">The change order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.DocumentFlipper.FlipPurchaseOrderToXml(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Flips the purchase order to XML.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.COtoCORFlipper">
            <summary>
            Class flips purchase order to purchase order response.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.ICOToCORFlipper">
            <summary>
             Co to cor flipper
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.ICOToCORFlipper.Flip(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Flips the specified order.
            </summary>
            <param name="changeOrder">The change order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.ICOToCORFlipper.Flip(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrderHistory,TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Flips the specified order.
            </summary>
            <param name="changeOrderHistory">The change order history.</param>
            <param name="changeOrder">The change order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.COtoCORFlipper.Flip(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrderHistory,TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Flips the specified order.
            </summary>
            <param name="changeOrderHistory">The change order history.</param>
            <param name="changeOrder">The change order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.COtoCORFlipper.Flip(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Flips the specified order.
            </summary>
            <param name="changeOrder">The change order.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlipperFactory">
            <summary>
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.IFlipperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.IFlipperFactory.GetCOToCORFlipper">
            <summary>
            Gets the co to cor flipper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.IFlipperFactory.GetPOToPORFlipper">
            <summary>
            Gets the PO to POR flipper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.IFlipperFactory.GetPOToASNFlipper">
            <summary>
            Gets the PO to ASN flipper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlipperFactory.GetCOToCORFlipper">
            <summary>
            Gets the co to cor flipper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlipperFactory.GetPOToPORFlipper">
            <summary>
            Gets the PO to POR flipper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.FlipperFactory.GetPOToASNFlipper">
            <summary>
            Gets the PO to ASN flipper.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IPOToASNFlipper">
            <summary>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IPOToASNFlipper.Flip(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Flips the specified order.
            </summary>
            <param name="asn">The asn.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IPOToPORFlipper">
            <summary>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IPOToPORFlipper.Flip(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Flips the specified order.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IPOToPORFlipper.Flip(TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderHistory,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Flips the specified order.
            </summary>
            <param name="orderHistory">The order history.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.POtoASNFlipper">
            <summary>
            Summary description for POtoASNFlipper.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.POtoASNFlipper.Flip(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice)">
            <summary>
            Flips XmlDocument to XmlDocument of specified type.
            </summary>
            <param name="asn">The asn.</param>
            <returns>Output xml document.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.POtoPORFlipper">
            <summary>
            Class flips purchase order to purchase order response.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.POtoPORFlipper.Flip(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Flips the specified order.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Flippers.POtoPORFlipper.Flip(TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderHistory,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Flips the specified history order.
            </summary>
            <param name="orderHistory">The order history.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMap">
            <summary>
            Flipping map
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMap.Mappings">
            <summary>
            collection of map elements
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMap.Readers">
            <summary>
            Gets the readers.
            </summary>
            <value>The readers.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMap.Writers">
            <summary>
            Gets the writers.
            </summary>
            <value>The writers.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMap.Formatters">
            <summary>
            Gets the formatters.
            </summary>
            <value>The formatters.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMap.Inbeans">
            <summary>
            Gets the inbeans.
            </summary>
            <value>The inbeans.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMap.Outbeans">
            <summary>
            Gets the outbeans.
            </summary>
            <value>The outbeans.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMap.Collections">
            <summary>
            Gets the collections.
            </summary>
            <value>The collections.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMap.Externals">
            <summary>
            Gets the externals.
            </summary>
            <value>The externals.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.AccountTypeCodeFormatter">
            <summary>
            Convert payment mean code ID into code name.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.EnumFormatter">
            <summary>
            Base class for all enum formatters.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EnumFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EnumFormatter.Parse(System.Object)">
            <summary>
            Restore Enum code from it's name.
            </summary>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.EnumFormatter.enumType">
            <summary>
            Supported DBEnumType.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EnumFormatter.#ctor(TRR.O2I.DataAccess.Core.DBEnumType)">
            <summary>
            Special constructor.
            </summary>
            <param name="enumType">Supported DBEnumType.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AccountTypeCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AccountTypeCodeFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.AgencyCodeFormatter">
            <summary>
            Summary description for AgencyCodeFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AgencyCodeFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.AllowOrChargeFormatter">
            <summary>
            AllowOrChargeFormatter class
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.AllowOrChargeFormatter.Format(System.Object)">
            <summary>
            Formats the 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.AllowOrChargeFormatter.AllowOrChargeTemplate">
            <summary>
            Gets the allow or charge template.
            </summary>
            <value>The allow or charge template.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ASNPackageTypeFormatter">
            <summary>
            Convert ASN status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ASNPackageTypeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ASNPackageTypeFormatter.Format(System.Object)">
            <summary>
            Format DateTime object into short date string.
            By dafault local thread culture information used.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ASNPackageTypeFormatter.Parse(System.Object)">
            <summary>
            Restore DateTime object from short date string.
            By dafault local thread culture information used.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ASNPackageTypeValueFormatter">
            <summary>
            Convert ASNPackageType mode code ID into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ASNPackageTypeValueFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ASNPurposeCodeFormatter">
            <summary>
            ASN PurposeCode Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ASNPurposeCodeFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ASNStatusFormatter">
            <summary>
            Convert ASN status ID value into status name.
            </summary>	
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ASNStatusFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ASNTypeFormatter">
            <summary>
            Convert ASN status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ASNTypeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ChangeOrderLineStatusFormatter">
            <summary>
            Convert order line status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ChangeOrderLineStatusFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ChangeOrderLineStatusFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ChangeOrderLineStatusFormatter.Parse(System.Object)">
            <summary>
            Restore Enum code from it's name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ContractAgencyDefaultFormatter">
            <summary>
            Set fixed "AssignedByBuyerOrBuyersAgent" value to Contract's AgencyCode (xCBL3)
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ContractAgencyDefaultFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.CountryCodeFormatter">
            <summary>
            CountryCodeFormatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.CountryCodeFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.CurrencyCodeFormatter">
            <summary>
            Convert Currency code ID into Currency name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.CurrencyCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.CurrentDateFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.CurrentDateFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.CurrentDateIfNullFormatter">
            <summary>
            Returns Current Date if argument is empty.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.CurrentDateIfNullFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DateTimeFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DateTimeFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DecimalToIntFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DecimalToIntFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DeliveryFunctionCodeFormatter">
            <summary>
            Convert delivery function code ID into function name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DeliveryFunctionCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DiscountDueDateFormatter">
            <summary>
            Calculates DiscountDaysDue value = 
            Invoice.InvoiceIssueDate + Invoice.PaymentInstruction.DiscountDaysDue
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DiscountDueDateFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DiscountDueDateFormatter.FormatDate(System.DateTime)">
            <summary>
            Formats the date.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.GrossValueFormatter">
            <summary>
            GrossValueFormatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.GrossValueFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.HazardousRegulationsCodeFormatter">
            <summary>
            HazardousRegulationsCode formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.HazardousRegulationsCodeFormatter.#ctor">
            <summary>
            TransportMeanCode formatter constructor
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.HeaderAttachmentsFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.HeaderAttachmentsFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.InvoiceHeaderTaxAmountFormatter">
            <summary>
            Smart formatter for tax amounts.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.InvoiceHeaderTaxFormatterBase">
            <summary>
            Base tax amount formatter (needed both for percent and amount calculations).
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.InvoiceHeaderTaxFormatterBase.CheckTaxId(System.Object)">
            <summary>
            Checks if tax id is of correct type (integer).
            </summary>
            <param name="taxId">Tax id object.</param>
            <returns>Tax id converted to int.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.InvoiceHeaderTaxFormatterBase.Calculate(System.Int32,System.Decimal@,System.Decimal@)">
            <summary>
            Calculates tax percent and tax amount given the tax id.
            </summary>
            <param name="taxId">Tax id.</param>
            <param name="taxPercent">Resulting tax percent.</param>
            <param name="taxAmount">Resulting tax amount.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.InvoiceHeaderTaxFormatterBase.FormatTaxPercent(System.Decimal)">
            <summary>
            Formats tax percent value.
            </summary>
            <param name="taxPercent">Tax percent.</param>
            <returns>Tax percent formatted in accordance with Decimal10_4 xsd specification.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.InvoiceHeaderTaxAmountFormatter.Format(System.Object)">
            <summary>
            Formats backend value.
            </summary>
            <param name="data">Backend representation.</param>
            <returns>Formatted presentation.</returns>
            <exception cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException">Thrown when formatting fails.</exception>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.InvoiceHeaderTaxPercentFormatter">
            <summary>
            Smart formatter for tax percent.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.InvoiceHeaderTaxPercentFormatter.Format(System.Object)">
            <summary>
            Formats backend value.
            </summary>
            <param name="data">Backend representation.</param>
            <returns>Formatted presentation.</returns>
            <exception cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException">Thrown when formatting fails.</exception>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.InvoicePurposeCodeFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.InvoicePurposeCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.InvoiceSpecialShipmentMethodOfPaymentCodedFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.InvoiceSpecialShipmentMethodOfPaymentCodedFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.InvoiceStatusFormatter">
            <summary>
            Convert invoice status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.InvoiceStatusFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.InvoiceTypeCodeFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.InvoiceTypeCodeFormatter.#ctor">
            <summary>
            DateTimeFormatter
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.LineItemAttachmentsFormatter">
            <summary>
            Formatter
            TODO: rename this
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.LineItemAttachmentsFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.LineItemTypeCodedFormatter">
            <summary>
            Line Item Type Coded Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.LineItemTypeCodedFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.LineItemTypeFormatter">
            <summary>
            Line item type formatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.LineItemTypeFormatter.Format(System.Object)">
            <summary>
            Formats the Line item type.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ListOfContactNumberDBFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ListOfContactNumberDBFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ListOfContactNumberFormatter">
            <summary>
            Generates xml from contact numbers information
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.ListOfContactNumberFormatter.ContactNumberTemplate">
            <summary>
            Xml template for contact number 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ListOfContactNumberFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.ListOfContactNumberFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ListOfContactNumberFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ListOfContactNumberFormatter.Format(System.String,System.String,System.String)">
            <summary>
            Formats the specified phone.
            </summary>
            <param name="phone">The phone.</param>
            <param name="fax">The fax.</param>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ListOfPriceFormatter">
            <summary>
            List of price formatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ListOfPriceFormatter.Format(System.Object)">
            <summary>
            Formats the prices. Adds additional Price section if line was modified.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.NetDaysDuePlusCurrentDateFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.NetDaysDuePlusCurrentDateFormatter.#ctor">
            <summary>
            DateTimeFormatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.NetDaysDuePlusCurrentDateFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.NullFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.NullFormatter.#ctor">
            <summary>
            NumberOneFormatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.NullFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.NumberOneFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.NumberOneFormatter.#ctor">
            <summary>
            NumberOneFormatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.NumberOneFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.OrderLineStatusFormatter">
            <summary>
            Convert order line status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderLineStatusFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderLineStatusFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderLineStatusFormatter.Parse(System.Object)">
            <summary>
            Restore Enum code from it's name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.OrderStatusFormatter">
            <summary>
            Convert order status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderStatusFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderStatusFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OrderStatusFormatter.Parse(System.Object)">
            <summary>
            Restore Enum code from it's name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.PaymentCardTypeFormatter">
            <summary>
            Convert payment card type ID into type name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.PaymentCardTypeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.PaymentMeanCodeFormatter">
            <summary>
            Convert payment mean code ID into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.PaymentMeanCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.PaymentMeanCodeFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.PaymentTermCodeFormatter">
            <summary>
            Convert payment mean code ID into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.PaymentTermCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.PriceFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.PriceFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.QuantityFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.QuantityFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.QuantityFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.QuantityFormatter.#ctor(TRR.O2I.Common.Core.IQuantityHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.QuantityFormatter"/> class.
            </summary>
            <param name="quantityHelper">The quantity helper.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.QuantityFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.QuantityFormatter.Parse(System.Object)">
            <summary>
            Pareses the specified data.
            </summary>
            <param name="formattedData">The data.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ReasonTaxExemptFormatter">
            <summary>
            Convert Tax Payment Method Code into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ReasonTaxExemptFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.RegionCodeFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.RegionCodeFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.RegionCodeFormatterCanada">
            <summary>
             Region Code Formatter for Canada
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.RegionCodeFormatterCanada.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.OtherRegionCodeFormatter">
            <summary>
             Predefined region code formatter (always returns OTHER)
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.OtherRegionCodeFormatter.Format(System.Object)">
            <summary>
            Restore Enum code from it's name.
            </summary>
            <param name="data">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ResponseOrderLineStatusFormatter">
            <summary>
            Convert order line status ID value into status name.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ServiceDatesFormatter">
            <summary>
            ServiceDatesFormatter class
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ServiceDatesFormatter.Format(System.Object)">
            <summary>
            Formats the 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ServiceDatesFormatter.ConvertDate(System.Nullable{System.DateTime})">
            <summary>
            Converts the date.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.SettlementDateFormatter">
            <summary>
            Generates xml containing settlement date
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.SettlementDateFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ShipmentFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ShipmentFormatter.#ctor">
            <summary>
            DateTimeFormatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ShipmentFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ShipmentMethodCodeFormatter">
            <summary>
            Convert shipment method code formatter ID into shipment method name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ShipmentMethodCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.SpecialHandlingCodeFormatter">
            <summary>
            Convert order status ID value into status name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.SpecialHandlingCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.SpecialHandlingCodeFormatter.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.SpecialHandlingCodeFormatter.Parse(System.Object)">
            <summary>
            Restore Enum code from it's name.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to parse object</remarks>
            <param name="formattedData">Formated data.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.StringAAMVAFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringAAMVAFormatter.#ctor">
            <summary>
            NumberOneFormatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringAAMVAFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.StringAssignedByBuyerOrBuyersAgentFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringAssignedByBuyerOrBuyersAgentFormatter.#ctor">
            <summary>
            NumberOneFormatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringAssignedByBuyerOrBuyersAgentFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.StringBasicFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringBasicFormatter.#ctor">
            <summary>
            NumberOneFormatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringBasicFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.StringContractNumberFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringContractNumberFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.StringExpeditorFormatter">
            <summary>
            Summary description for StringExpeditorFormatter.
            </summary>
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringExpeditorFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.StringOtherFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringOtherFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.StringPromisedForShipmentFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringPromisedForShipmentFormatter.#ctor">
            <summary>
            DateTimeFormatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringPromisedForShipmentFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.StringPurchaseOrderFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringPurchaseOrderFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.StringRequestNumberFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringRequestNumberFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.StringTaxFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.StringTaxFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.TaxCategoryFormatter">
            <summary>
            Convert Tax Category Code into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TaxCategoryFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.TaxPaymentMethodFormatter">
            <summary>
            Convert Tax Payment Method Code into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TaxPaymentMethodFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.TaxTypeFormatter">
            <summary>
            Convert Tax Type Code into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TaxTypeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.TransportMeanCodeFormatter">
            <summary>
            TransportMeanCode formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TransportMeanCodeFormatter.#ctor">
            <summary>
            TransportMeanCode formatter constructor
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.TransportModeCodeFormatter">
            <summary>
            Convert Transport mode code ID into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TransportModeCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.UOMCodeFormatter">
            <summary>
            Convert UOM code ID into code name.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.UOMCodeFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DiscountDueDateFormatterXcbl40">
            <summary>
            DiscountDueDateFormatter specific for xCbl4.0
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DiscountDueDateFormatterXcbl40.FormatDate(System.DateTime)">
            <summary>
            Formats the date.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ListOfContactNumberFormatterXcbl40">
            <summary>
            Generates xml for list of contacts 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ListOfContactNumberFormatterXcbl40.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.ListOfContactNumberFormatterXcbl40"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ContactNumbersFormatterXcbl40">
            <summary>
            Generates xml from contact numbers information.
            Source is Contact business entity
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ContactNumbersFormatterXcbl40.Format(System.Object)">
            <summary>
            Format Enum code into enum name.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.XCBL40AgencyCodeFormatter">
            <summary>
            Agency Code formatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XCBL40AgencyCodeFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.XCBL40AllowOrChargeFormatter">
            <summary>
            Summary description for xCBL40AllowOrChargeFormatter.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.XCBL40AllowOrChargeFormatter.AllowOrChargeTemplate">
            <summary>
            Gets the allow or charge template.
            </summary>
            <value>The allow or charge template.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.Xcbl40CountryFormatter">
            <summary>
            Xcbl40CountryFormatter
            Contains hardcoded non xCBL 4.0 items to remove from output.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.Xcbl40CountryFormatter.#cctor">
            <summary>
            Initializes the <see cref="T:TRR.O2I.BusinessLogic.Services.Xcbl40CountryFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.Xcbl40CountryFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.XCBL40DateTimeFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XCBL40DateTimeFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.XCBL40InvoicePurposeCodeFormatter">
            <summary>
            Summary description for XCBL40InvoicePurposeCodeFormatter.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XCBL40InvoicePurposeCodeFormatter.Format(System.Object)">
            <summary>
            xCBL30 PurposeCode 
            	value="Other"/&gt;       
            	value="Original"/&gt;    
            	value="Cancellation"/&gt;
            	value="Change"/&gt;      
            	value="Replace"/&gt;     
            	value="Confirmation"/&gt;
            	value="Duplicate"/&gt;   
            but xCBL40 PurposeCode 
            	value="Other"/&gt;       
            	value="Original"/&gt;    
            	value="Duplicate"/&gt;   
            therefor hardcoded during business rules
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.XCBL40NetDaysDuePlusCurrentDateFormatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XCBL40NetDaysDuePlusCurrentDateFormatter.#ctor">
            <summary>
            DateTimeFormatter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XCBL40NetDaysDuePlusCurrentDateFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.Xcbl40RegionFormatter">
            <summary>
            Xcbl40RegionFormatter
            Contains hardcoded non xCBL 4.0 items to remove from output.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.Xcbl40RegionFormatter.#cctor">
            <summary>
            Initializes the <see cref="T:TRR.O2I.BusinessLogic.Services.Xcbl40RegionFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.Xcbl40RegionFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.XCBL40TaxCategoryFormatter">
            <summary>
            xCBL40TaxCategoryFormatter
            Contains hardcoded non xCBL 4.0 items to remove from output.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XCBL40TaxCategoryFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.XCBL40TaxCategoryFormatter"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XCBL40TaxCategoryFormatter.Format(System.Object)">
            <summary>
            Format object.
            </summary>
            <remarks>Throws <see cref="T:TRR.O2I.BusinessLogic.Managers.Databinding.DatabindingFormattingException"/> when formatter unable to format object</remarks>
            <param name="data">Object to format.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.IEntityInit">
            <summary>
            It is necessary to create instanse of object which used by Flipping map. 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.IEntityInit.Init(System.String,System.String,System.String)">
            <summary>
            Initialize instanse of object which used by Flipping map.
            </summary>
            <param name="name">The name.</param>
            <param name="className">Name of the class.</param>
            <param name="param">The param.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.IMapProcessor">
            <summary>
            Interface for flipping maps processor 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.IMapProcessor.Process(System.Collections.Hashtable,System.Collections.Hashtable,TRR.O2I.Common.Core.DocumentType)">
            <summary>
            
            </summary>
            <param name="inbeans"></param>
            <param name="outbeans"></param>
            <param name="documentType"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.IReader">
            <summary>
            Base interface for Reader
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.IReader.GetData(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            Gets the data.
            </summary>
            <param name="name">The name.</param>
            <param name="property">The property.</param>
            <param name="sources">The sources.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.IReader.GetCollectionData(System.String,System.String,System.Collections.Hashtable,System.Type)">
            <summary>
            Gets the data.
            </summary>
            <param name="name">The name.</param>
            <param name="property">The property.</param>
            <param name="sources">The sources.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.IWriter">
            <summary>
            Base interface for Writer.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.IWriter.SetData(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Hashtable,System.Object)">
            <summary>
            Sets the data.
            </summary>
            <param name="name">The name.</param>
            <param name="propertyName">The property.</param>
            <param name="parameters">The parameters.</param>
            <param name="targets">The targets.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.IWriter.InitBean(System.Object)">
            <summary>
            Inits the bean.
            </summary>
            <param name="bean">The bean.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.IWriter.FinalizeBean(System.Object)">
            <summary>
            Finalizes the bean.
            </summary>
            <param name="bean">The bean.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.Mapping">
            <summary>
            Element of flipping map.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.Mapping.#ctor(System.String,TRR.O2I.BusinessLogic.Managers.Flipping.MappingType,TRR.O2I.BusinessLogic.Managers.Flipping.IMappingParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Flipping.Mapping"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Mapping.Name">
            <summary>
            Name 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Mapping.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Mapping.Sources">
            <summary>
            collection of sources 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Mapping.Targets">
            <summary>
            collection of targets
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.Mapping.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.MapProcessor">
            <summary>
            Flipping map processor.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.MapProcessor.Process(System.Collections.Hashtable,System.Collections.Hashtable,TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Executes flipping process.
            </summary>
            <param name="inbeans">Input beans.</param>
            <param name="outbeans">Output beans.</param>
            <param name="documentType">DocumentType</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.MapProcessor.Process(System.Collections.Hashtable,System.Collections.Hashtable,TRR.O2I.BusinessLogic.Managers.Flipping.FlippingMap)">
            <summary>
            Process the whole map.
            </summary>
            <param name="inbeans">The inbeans.</param>
            <param name="outbeans">The outbeans.</param>
            <param name="flippingMap">The flipping map.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.EntityReader">
            <summary>
            EntityReader
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EntityReader.GetData(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            Gets the data.
            </summary>
            <param name="name">The name.</param>
            <param name="property">The property.</param>
            <param name="sources">The sources.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EntityReader.ReformatResult(System.Object)">
            <summary>
            Reformats the result(converts special symbols (i.e. ampersand) 
            into form acceptable for xml, etc "&amp;" -> "&amp;amp;").
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EntityReader.TRR#O2I#BusinessLogic#Managers#Flipping#IReader#GetCollectionData(System.String,System.String,System.Collections.Hashtable,System.Type)">
            <summary>
            Gets the data.
            </summary>
            <param name="name">The name.</param>
            <param name="property">The property.</param>
            <param name="sources">The sources.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EntityReader.NeedToGetDataFromDatabase(System.String)">
            <summary>
            Defines whether collection should be loaded from database or taken from the property.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.XmlEntityReader">
            <summary>
            XmlEntityReader
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityReader.TRR#O2I#BusinessLogic#Managers#Flipping#IReader#GetData(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            Gets the data.
            </summary>
            <param name="name">The name.</param>
            <param name="property">The property.</param>
            <param name="sources">The sources.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityReader.TRR#O2I#BusinessLogic#Managers#Flipping#IReader#GetCollectionData(System.String,System.String,System.Collections.Hashtable,System.Type)">
            <summary>
            Gets the data.
            </summary>
            <param name="name">The name.</param>
            <param name="property">The property.</param>
            <param name="sources">The sources.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.SourceEntry">
            <summary>
            SourceEntry
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.SourceEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes this class.
            </summary>
            <param name="bean"></param>
            <param name="property"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.SourceEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes this class.
            </summary>
            <param name="bean"></param>
            <param name="property"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.SourceEntry.Bean">
            <summary>
            Object
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.SourceEntry.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.SourceEntry.DefaultValue">
            <summary>
            DefaultValue
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Flipping.TargetEntry">
            <summary>
            TargetEntry
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Flipping.TargetEntry.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Flipping.TargetEntry"/> class.
            </summary>
            <param name="bean">The bean.</param>
            <param name="property">The property.</param>
            <param name="formatter">The formatter.</param>
            <param name="param">The param.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.TargetEntry.Bean">
            <summary>
            Object
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.TargetEntry.Formatter">
            <summary>
            Formatter
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.TargetEntry.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.TargetEntry.Param">
            <summary>
            Parameter
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Flipping.TargetEntry.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.EntityWriter">
            <summary>
            EntityWriter
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EntityWriter.TRR#O2I#BusinessLogic#Managers#Flipping#IWriter#SetData(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Hashtable,System.Object)">
            <summary>
            Sets the data.
            </summary>
            <param name="name">The name.</param>
            <param name="propertyName">The property.</param>
            <param name="parameters">The parameters.</param>
            <param name="targets">The targets.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EntityWriter.InitBean(System.Object)">
            <summary>
            Inits the bean.
            </summary>
            <param name="bean">The bean.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EntityWriter.FinalizeBean(System.Object)">
            <summary>
            Finalizes the bean.
            </summary>
            <param name="bean">The bean.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.XmlEntityWriter">
            <summary>
            XML entity writer
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourcePORTemplate">
            POR Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourcePORLineTemplate">
            POR Line Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceASNTemplate">
            ASN Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceASNLineTemplate">
            ASN Line Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceINVTemplate">
            INV Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceINVLineTemplate">
            INV Line Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceINVLineTaxTemplate">
            INV Line Tax Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceINVLineTaxSummaryTemplate">
            INV Line Tax Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceINVxCBL4Template">
            INV xCBL 4.0 Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceINVLinexCBL4Template">
            INV xCBL 4.0 Line Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceINVLineTaxxCBL4Template">
            INV Line Tax Template TRIP 18
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceINVLineTaxxCBL4SummaryTemplate">
            INV Line Tax Template	TRIP 18
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceCORTemplate">
            COR Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceCORLineTemplate">
            COR Line Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourcePORLineShipmentDetailTemplate">
            POR Line Shipment Detail Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourcePORMapLineReferencesTemplate">
            POR Line References Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.resourceTransportRoutingTemplate">
            TransportRouting  Template
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.xcbl40Templates">
            <summary>
            Names of templates which require handling of xml namespaces
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.TRR#O2I#BusinessLogic#Managers#Flipping#IWriter#SetData(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Hashtable,System.Object)">
            <summary>
            Writes every curpuscular elemnt
            </summary>
            <param name="name">name of one mapping(element of flipping map)</param>
            <param name="propertyName">name like xpath destination</param>
            <param name="parameters">The parameters.</param>
            <param name="targets">output bean</param>
            <param name="source">input bean</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.TRR#O2I#BusinessLogic#Managers#Flipping#IWriter#InitBean(System.Object)">
            <summary>
            Load templates
            </summary>
            <param name="bean">empty XML document</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.TRR#O2I#BusinessLogic#Managers#Flipping#IWriter#FinalizeBean(System.Object)">
            <summary>
            function removes all empty node with attribute option="true" 
            </summary>
            <param name="bean">source doc</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.GetTemplateFileNameByTemplateName(System.String)">
            <summary>
            Return fileName of template by template name
            </summary>
            <param name="nameTemplate">Name of the template</param>
            <returns>fileName or empty string</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.XmlAppend(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
            Function creates xml document from another xml document with help of TREP map.
            </summary>
            <param name="outDoc">Output document.</param>
            <param name="toXPath">To X path.</param>
            <param name="nodeName">Name of the node.</param>
            <param name="xmlData">The XML data.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.XmlFlip(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Function creates xml document from another xml document with help of TREP map.
            </summary>
            <param name="outDoc">Output document.</param>
            <param name="toXPath">To Xpath.</param>
            <param name="xmlData">The XML data.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.CreateElement(System.String,System.Xml.XmlDocument)">
            <summary>
            Creates XmlElement using Namespace manager (nullable).
            </summary>
            <param name="name">Name of the element (can be with prefix).</param>
            <param name="doc">XmlDocument for new element.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.SelectNodes(System.String,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Selects nodes using Namespace manager.
            </summary>
            <param name="path">XPath to select.</param>
            <param name="root">Root element to search.</param>
            <param name="nsmgr">Namespace manager (nullable).</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.GetNamedProperty(System.String,System.String)">
            <summary>
            Gets the named property.
            </summary>
            <param name="property">parameter from map, like "template=POR;asdas=assas", up to 2 parameters</param>
            <param name="propertyName">name like <code>template</code></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.XmlEntityWriter.TRR#O2I#BusinessLogic#Managers#Flipping#IEntityInit#Init(System.String,System.String,System.String)">
            <summary>
            Initialize instance of object which used by Flipping map.
            </summary>
            <param name="name">The name.</param>
            <param name="className">Name of the class.</param>
            <param name="param">The parameter.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.GoodsReceiptManager">
            <summary>
            Encapsulates the party-related business logic.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.GoodsReceiptManager.#ctor(DataAccess.Services.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.GoodsReceiptManager"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.GoodsReceiptManager.FindLinkedReceipts(System.Int32)">
            <summary>
            Finds the linked to invoice receipts.
            </summary>
            <param name="invoiceId">The invoice id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.GoodsReceiptManager.LinkInvoiceWithReceipt(System.Int32,System.Int32,TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceGoodsReceiptStatus)">
            <summary>
            Links the invoice with receipt.<br />
            Sets status for INV-GR link.
            </summary>
            <param name="invoiceId">The invoice id.</param>
            <param name="receiptId">The receipt id.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.GoodsReceiptManager.ResolveReceiptStatus(System.Int32)">
            <summary>
            Resolves the receipt status.
            </summary>
            <param name="receiptId">The receipt id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.GoodsReceiptManager.ResolveAndUpdateReceiptStatus(System.Int32)">
            <summary>
            Resolves the and update receipt status.
            </summary>
            <param name="receiptId">The receipt id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.GoodsReceiptManager.ResolveAndUpdateLinkedReceiptsStatus(System.Int32,TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceGoodsReceiptStatus)">
            <summary>
            Sets status for INV-GR links.<br />
            Update linked receipts status
            </summary>
            <param name="invoiceId">The invoice id.</param>
            <param name="status">The status.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.InvoiceFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceFactory.CreateInvoiceFromScratch(System.Int32,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings)">
            <summary>
            Creates the invoice from scratch.
            </summary>
            <param name="buyerCompanyId">The buyer company id.</param>
            <param name="businessSettings">The business settings.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceFactory.CreateInvoiceFromOrderLines(System.Collections.Generic.IList{TRR.O2I.DataAccess.Entities.OrderLine},TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceType)">
            <summary>
            Creates the invoice from order lines.
            </summary>
            <param name="orderLines">The basket items.</param>
            <param name="invoiceType"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceFactory.CreateInvoiceFromOrder(System.Int32,System.Nullable{TRR.O2I.Common.Core.SupplierCountry},TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceType)">
            <summary>
            Creates the invoice from order.
            </summary>
            <param name="orderId">The order id.</param>
            <param name="supplierCountry">The supplier country.</param>
            <param name="invoiceType"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceFactory.CreateInvoiceFromOrders(System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{TRR.O2I.Common.Core.SupplierCountry},DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceType)">
            <summary>
            Creates the invoice from orders.
            </summary>
            <param name="orderIds">The order ids.</param>
            <param name="supplierCountry">The supplier country.</param>
            <param name="manager">The manager.</param>
            <param name="invoiceType"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceFactory.CreateInvoiceFromGoodsReceipts(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt},DataAccess.Services.IServiceManager,System.Boolean)">
            <summary>
            Creates the invoice from goods receipts.
            </summary>
            <param name="receipts">The basket items.</param>
            <param name="manager">The service manager.</param>
            <param name="restrictItemsCategory"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceFactory.CreateInvoiceFromGoodsReceipt(TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt,System.Boolean)">
            <summary>
            Creates the invoice from goods receipt.
            </summary>
            <param name="goodsReceipt">The goods receipt.</param>
            <param name="restrictItemsCategory"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceFactory.RecreateInvoiceFromOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Recreates the invoice from order.
            </summary>
            <param name="invoice">The invoice.</param>
            <param name="supplierCountry">The supplier country.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceFactory.RecreateInvoiceFromScratch(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
             Recreate invoice from scratch.
            </summary>
             <param name="invoice">The invoice.</param>
             <param name="supplierCountry">The supplier country.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceFactory.RecreateInvoiceFromGoodsReceipt(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Recreates the invoice from goods receipt.
            </summary>
            <param name="invoice">The invoice.</param>
            <param name="supplierCountry">The supplier country.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceFactory.AllGoodsReceiptsReferenceOneOrderCheck(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.GoodsReceipt})">
            <summary>
            Alls the goods receipts reference one order check.
            </summary>
            <param name="goodsReceipts">The goods receipts.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.InvoiceResponseMerger">
            <summary>
            InvoiceResponseMerger
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceResponseMerger.MergeInvoiceResponseToInvoice(TRR.O2I.BusinessLogic.BusinessEntity.Entities.InvoiceResponse,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.InvoiceResponseLine},TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Merges the invoice response to invoice.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceFromMultiplyOrdersException">
            <summary>
            Exception to throw when it doesn't allowed to create invoice from multiply orders.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceFromNonServiceOrMixedOrderException">
            <summary>
            Exception to throw if invoice creation only from non service PO is allowed.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceFromOrderWithPendingInvoicesException">
            <summary>
            Build Invoice from Order with pending Invoices exception
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceFromOrderWithPendingInvoicesException.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.BuildInvoiceFromOrderWithPendingInvoicesException"/> class.
            </summary>
            <param name="pendingInvoiceIDs">The pending invoices.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableAmountForDebitInvoicingException">
            <summary>
            Thrown during Invoice creation from PO with no lines with available amount for invoicing
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableAmountForDebitInvoicingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Invoicing.Exceptions.NoLinesWithAvailableAmountForDebitInvoicingException"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.ReceiptItemsToInvoiceImporter">
            <summary>
            Imports goods items to invoice.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter">
            <summary>
            Base class for invoice importers
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.TaxStrategy">
            <summary>
            Default TAX strategy.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.BuyerSettings">
            <summary>
            Buyer settings.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.Managers.DefaultTax.IDefaultTaxStrategy)">
            <summary>
            Constructor
            </summary>
            <param name="buyerSettings">Buyer settings.</param>
            <param name="taxStrategy">Default TAX strategy.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.CheckDocumentsBuyers(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order},TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Checks the documents buyers.
            </summary>
            <param name="ordersRelatedToLines">The orders related to lines.</param>
            <param name="invoice">The invoice.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.CheckLinesCount(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine})">
            <summary>
            Checks the lines count.
            </summary>
            <param name="orderLines">The order lines.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.CheckAccountCodesAndCurrency(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order})">
            <summary>
            Checks the consistency of orders( whether all orders have the same accountCode and Currency).
            Throws Validation exceptions if no orders specified or account codes or currency are different
            </summary>
            <param name="invoice">The invoice.</param>
            <param name="ordersRelatedToLines">The orders related to lines.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.FilterRejectedAndDeletedLines(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine})">
            <summary>
            Filters the rejected and deleted lines.
            </summary>
            <param name="orderLines">The order lines.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.FilterLines(System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine},TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order})">
            <summary>
            Filters the lines.
            </summary>
            <param name="orderLines">The order lines.</param>
            <param name="invoice">The invoice.</param>
            <param name="orders">The orders.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.ImportLinesIntoInvoice(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine},System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order})">
            <summary>
            Imports order orderLines into invoice collection.
            </summary>
            <param name="invoice">The invoice.</param>
            <param name="orderLines">The orderLines.</param>
            <param name="ordersList">The orders list.</param>
            <remarks>This method should be moved into invoice or InvoiceLineCollection</remarks>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.CopyParentLine(TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine,TRR.O2I.BusinessLogic.BusinessEntity.Entities.InvoiceLine,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Copies order line into invoice line.
            </summary>
            <remarks>Invoice line changes don't stored into database.</remarks>
            <param name="orderLine">Order line.</param>
            <param name="invoiceLine">Target invocie line.</param>
            <param name="order"></param>
            <param name="invoice"></param>
            <returns>Updated invoice line.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.CopyLine(TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine,TRR.O2I.BusinessLogic.BusinessEntity.Entities.InvoiceLine,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Copies order line into invoice line.
            </summary>
            <remarks>Invoice line changes don't stored into database.</remarks>
            <param name="orderLine">Order line.</param>
            <param name="invoiceLine">Target invocie line.</param>
            <param name="order"></param>
            <param name="invoice"></param>
            <returns>Updated invoice line.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.CheckThatSingleOrderIsImported(System.Collections.Generic.ICollection{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order})">
            <summary>
            Checks the that single order is imported.
            </summary>
            <param name="orders">The orders.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.CheckThatThereIsNoPendingChangeOrder(System.Boolean)">
            <summary>
            Checks the that there is no pending change order.
            </summary>
            <param name="pendingChangeOrder">if set to <c>true</c> [pending change order].</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.ApplyTax(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.Managers.DefaultTax.IDefaultTaxStrategy,TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Applies the tax.
            </summary>
            <param name="invoice">The invoice.</param>
            <param name="taxStrategy">The tax strategy.</param>
            <param name="buyerSettings"></param>
            <param name="actualTypeKey"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.InvoiceImporter.RecalculateInvoice(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Recalculates the invoice.
            </summary>
            <param name="invoice">The invoice.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.ReceiptItemsToInvoiceImporter.#ctor(TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategy,TRR.O2I.BusinessLogic.Managers.DefaultTax.IDefaultTaxStrategy,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemDescriptor},TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Invoicing.ReceiptItemsToInvoiceImporter"/> class.
            </summary>
            <param name="importStrategy">The import strategy.</param>
            <param name="taxStrategy">The default tax strategy.</param>
            <param name="goodsReceiptItems">The goods receipt items.</param>
            <param name="buyerSettings"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.ReceiptItemsToInvoiceImporter.Import(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order},System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine},System.Boolean)">
            <summary>
            Imports the internal.
            </summary>
            <param name="invoice">The inv.</param>
            <param name="orders">The orders related to lines.</param>
            <param name="lines">The purchase order lines.</param>
            <param name="hasPendingChangeOrder">if set to <c>true</c> [has pending change order].</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.HistoryManager">
            <summary>
            Encapsulates the party-related business logic.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IHistoryManager">
            <summary>
            Base interface for history manager.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IHistoryManager.StorePurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,DataAccess.Services.IServiceManager)">
            <summary>
            Stores the order.
            </summary>
            <param name="originalOrder">The original order.</param>
            <param name="serviceManager">The service manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IHistoryManager.StorePurchaseOrderResponse(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,DataAccess.Services.IServiceManager)">
            <summary>
            Stores the order.
            </summary>
            <param name="originalOrder">The original order.</param>
            <param name="serviceManager">The service manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IHistoryManager.StoreChangeOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder,DataAccess.Services.IServiceManager)">
            <summary>
            Stores the change order.
            </summary>
            <param name="changeOrder">The change order.</param>
            <param name="serviceManager">The service manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IHistoryManager.StoreChangeOrderResponse(DataAccess.Services.IServiceManager,System.Int32,System.String)">
            <summary>
            Stores the change order.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="changeOrderId">The change order id.</param>
            <param name="xmlIsland">The XML island.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.HistoryManager.StorePurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,DataAccess.Services.IServiceManager)">
            <summary>
            Stores the order.
            </summary>
            <param name="originalOrder">The original order.</param>
            <param name="serviceManager">The service manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.HistoryManager.StorePurchaseOrderResponse(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,DataAccess.Services.IServiceManager)">
            <summary>
            Stores the order.
            </summary>
            <param name="originalOrder">The original order.</param>
            <param name="serviceManager">The service manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.HistoryManager.StoreChangeOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder,DataAccess.Services.IServiceManager)">
            <summary>
            Stores the change order.
            </summary>
            <param name="changeOrder">The change order.</param>
            <param name="serviceManager">The service manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.HistoryManager.StoreChangeOrderResponse(DataAccess.Services.IServiceManager,System.Int32,System.String)">
            <summary>
            Stores the change order.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="changeOrderId">The change order id.</param>
            <param name="xmlIsland">The XML island.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IChangeOrderManager">
            <summary>
            Provides a set of operations with Change Order
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IChangeOrderManager.MergeChangeOrder(TRR.O2I.DataAccess.Entities.ChangeOrder)">
            <summary>
            Determines whether [is change order bad] [the specified da service].
            </summary>
            <param name="changeOrder">The change order.</param>
            <returns>
            	<c>true</c> if [is change order bad] [the specified da service]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IManagerFactory">
            <summary>
            Base interface for ManagerFactory
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.IManagerFactory.History">
            <summary>
            Gets the history manager.
            </summary>
            <value>The history manager.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.IManagerFactory.RelatedDocuments">
            <summary>
            Gets the related documents manager.
            </summary>
            <value>The related documents manager.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.InvoiceCreator">
            <summary>
            Creates invoices from different documents
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.CreateInvoiceFromPack(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.BusinessLogic.Managers.OrdersAndLinesPack,TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceType)">
            <summary>
            Creates the invoice from order lines.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="businessSettings">The business settings.</param>
            <param name="pack">The pack.</param>
            <param name="invoiceType"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.RecreateInvoiceFromPack(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.Managers.OrdersAndLinesPack)">
            <summary>
            Recreates the invoice from pack (order lines).
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="businessSettings">The business settings.</param>
            <param name="original"></param>
            <param name="pack">The pack.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.RecreateInvoiceFromScratch(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
             Recreate invoice from scratch.
            </summary>
             <param name="serviceManager">The service manager.</param>
             <param name="businessSettings">The business settings.</param>
             <param name="original">Original invoice</param>>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.CreateInvoiceFromGoodsReceiptItems(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategy,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemDescriptor},TRR.O2I.BusinessLogic.Managers.OrdersAndLinesPack)">
            <summary>
            Flips the specified grlines.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="businessSettings">The business settings.</param>
            <param name="strategy">The strategy.</param>
            <param name="items">The items.</param>
            <param name="pack">The pack.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.RecreateInvoiceFromGoodsReceiptItems(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.BusinessLogic.Managers.Invoicing.IReceiptItemsImportStrategy,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.Managers.Invoicing.GoodsReceiptItemsImporting.GoodsReceiptItemDescriptor},TRR.O2I.BusinessLogic.Managers.OrdersAndLinesPack)">
            <summary>
            Recreates the invoice from goods receipt items.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="businessSettings">The business settings.</param>
            <param name="strategy">The strategy.</param>
            <param name="original">The original.</param>
            <param name="items">The items.</param>
            <param name="pack">The pack.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.FromEntrySheet(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,DataAccess.Services.IServiceManager)">
            <summary>
            </summary>
            <param name="entrySheet"></param>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.GetLastInboundOrderByOrderId(System.Int32,DataAccess.Services.IServiceManager)">
            <summary>
             Gets the last inbound document for a given order
            </summary>
            <param name="orderId"></param>
            <param name="serviceManager"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.CreateInvoiceFromScratch(System.Int32,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings)">
            <summary>
            Creates the invoice from scratch.
            </summary>
            <param name="buyerCompanyId">The buyer company id.</param>
            <param name="businessSettings">The business settings.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.CreateSubsequentInvoice(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,DataAccess.Services.IServiceManager,System.Collections.Generic.IEnumerable{System.Int32},TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            </summary>
            <param name="originalInvoice"></param>
            <param name="serviceManager"></param>
            <param name="originalInvoiceLineIdsToCreateSubsequentInvoiceFrom"></param>
            <param name="businessSettings"></param>
            <param name="orderType"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.StoreInvoiceAndUpdateRelatedOrdersStatus(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order})">
            <summary>
            Stores the invoice and updates status of related orders.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="invoice">The invoice.</param>
            <param name="orders">The related orders list.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.StoreInvoice(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,TRR.O2I.BusinessLogic.Managers.Merging.IMergingContext)">
            <summary>
            Stores invoice
            </summary>
            <param name="serviceManager"></param>
            <param name="invoice"></param>
            <param name="context"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoiceCreator.CreateInvoiceFromOrder(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,TRR.O2I.BusinessLogic.Managers.BusinessEntity.BusinessSettingsBusinessLogic.BusinessSettings,TRR.O2I.BusinessLogic.BusinessEntity.Enums.InvoiceType)">
            <summary>
            Creates the new invoice.
            </summary>
            <param name="manager">The manager.</param>
            <param name="order">The order.</param>
            <param name="settings">The settings.</param>
            <param name="invoiceType"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.InvoicesManager">
            <summary>
            Encapsulates the party-related business logic.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoicesManager.GetPredefinedRatesList(TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Gets the predefined rates list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoicesManager.GetDefaultTaxRateInternal(TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Gets predefined tax rates with default value selected.
            </summary>
            <param name="country">The country.</param>
            <returns>Default rate.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoicesManager.GetDefaultTaxRate(TRR.O2I.Common.Core.SupplierCountry)">
            <summary>
            Gets the default tax rate1.
            </summary>
            <param name="country">The country.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoicesManager.UpdateStateTracking(DataAccess.Services.IServiceManager,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the state tracking.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="invoiceId">The invoice id.</param>
            <param name="isSaved">if set to <c>true</c> [is saved].</param>
            <param name="isReadyToSign">if set to <c>true</c> [is ready to sign].</param>
            <param name="updateExistentReadyToSignField">if set to <c>true</c> [update existent ready to sign flag].</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.InvoicesManager.IsSubsequent(TRR.O2I.DataAccess.Entities.IInvoiceRow)">
            <summary>
            Gets a value indicating whether invoice is subsequent.
            </summary>
            <param name="invoice"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentProcessingStatusCalculator.RequeuedCalculator">
            <summary>
            
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IOQueue.IDocumentProcessingStatusCalculator">
            <summary>
            Calculates status of item after processing with error.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IOQueue.IDocumentProcessingStatusCalculator.CalculateProcessingStatus(System.Exception,System.Int32)">
            <summary>
            Calculates the processing status.
            </summary>
            <param name="exception">The exception.</param>
            <param name="retryAttemptNumber">The retry count.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentProcessingStatusCalculator.RequeuedCalculator.CalculateProcessingStatus(System.Exception,System.Int32)">
            <summary>
            Calculates the processing status.
            </summary>
            <param name="exception">The exception.</param>
            <param name="retryAttemptNumber">The retry count.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentProcessingStatusCalculator.RetryCountWithSpecificExceptionsCalculator">
            <summary>
            Calculates status of item after processing with error.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentProcessingStatusCalculator.RetryCountWithSpecificExceptionsCalculator.CalculateProcessingStatus(System.Exception,System.Int32)">
            <summary>
            Calculates the processing status.
            </summary>
            <param name="exception">The exception.</param>
            <param name="retryAttemptNumber">The retry count.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentProcessingStatusCalculator.RetryCountWithSpecificExceptionsCalculator.IsExceededRetryCount(System.Int32)">
            <summary>
            Determines whether we reached the limit of the maximum allowed retries.
            </summary>
            <param name="retryCount">The retry count.</param>
            <returns>
            	<c>true</c> we reached the limit of the maximum allowed retries; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.EnqueuedDocumentsToSendSource">
            <summary>
            Source for documents.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.IDocumentsSource">
            <summary>
            Source of documents.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.IDocumentsSource.GetNextBulkOfItems">
            <summary>
            Gets the enqueued items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.IDocumentsSource.ItemsExistsInDatabase">
            <summary>
            Items exists in database.
            </summary>
            <value>
            	<c>true</c> if [items exists in database]; otherwise, <c>false</c>.
            </value>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.EnqueuedDocumentsToSendSource.GetNextBulkOfItems">
            <summary>
            Gets the enqueued items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.EnqueuedDocumentsToSendSource.ItemsExistsInDatabase">
            <summary>
            Items exists in database.
            </summary>
            <value>
            	<c>true</c> if [items exists in database]; otherwise, <c>false</c>.
            </value>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.EnqueuedDocumentsToShredSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.EnqueuedDocumentsToShredSource.GetNextBulkOfItems">
            <summary>
            Gets the enqueued items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.EnqueuedDocumentsToShredSource.ItemsExistsInDatabase">
            <summary>
            Items exists in database.
            </summary>
            <value>
            	<c>true</c> if [items exists in database]; otherwise, <c>false</c>.
            </value>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.RequeuedDocumentsToSendSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.RequeuedDocumentsToSendSource.GetNextBulkOfItems">
            <summary>
            Gets the enqueued items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.RequeuedDocumentsToSendSource.ItemsExistsInDatabase">
            <summary>
            Items exists in database.
            </summary>
            <value>
            	<c>true</c> if [items exists in database]; otherwise, <c>false</c>.
            </value>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.RequeuedDocumentsToShredSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.RequeuedDocumentsToShredSource.GetNextBulkOfItems">
            <summary>
            Gets the enqueued items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.RequeuedDocumentsToShredSource.ItemsExistsInDatabase">
            <summary>
            Items exists in database.
            </summary>
            <value>
            	<c>true</c> if [items exists in database]; otherwise, <c>false</c>.
            </value>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IOQueue.QueueProcessor">
            <summary>
            Processor to manage document queue.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IOQueue.QueueProcessor.#ctor(TRR.O2I.BusinessLogic.Managers.IOQueue.DocumentSource.IDocumentsSource,TRR.O2I.Common.Core.Logging.ITRLog,TRR.O2I.BusinessLogic.Services.IOQueue.IDocumentProcessingStatusCalculator,TRR.O2I.BusinessLogic.Services.IOQueue.IQueueItemProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.IOQueue.QueueProcessor"/> class.
            </summary>
            <param name="documentsSource">The documents source.</param>
            <param name="log">The log.</param>
            <param name="processingStatusCalculator">The processing status calculator.</param>
            <param name="processor">The processor.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IOQueue.QueueProcessor.ProcessQueue">
            <summary>
            Process all items in queue.
            Throws <see cref="T:TRR.O2I.Common.Exceptions.ApplicationBaseException"/> if error occure.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IOQueue.QueueProcessor.GetGuid(System.String)">
            <summary>
            Gets the GUID.
            </summary>
            <param name="stringGuid">The string GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.SendEnqueuedDocumentsTask">
            <summary>
            Task to send documents.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.SendEnqueuedDocumentsTask.Execute">
            <summary>
            Called by IntegrationService.
            Throws <see cref="T:TRR.O2I.Common.Exceptions.ApplicationBaseException"/> if error occure.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.SendRequeuedDocumentsTask">
            <summary>
            Task to send documents.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.SendRequeuedDocumentsTask.Execute">
            <summary>
            Called by IntegrationService.
            Throws <see cref="T:TRR.O2I.Common.Exceptions.ApplicationBaseException"/> if error occure.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.ShreddingTasksLocker">
            <summary>
            Locker to prevernt parallel executing of shredding tasks.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.IOQueue.ShreddingTasksLocker.Locker">
            <summary>
            Lock object
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.ShredEnqueuedDocumentsTask">
            <summary>
            Task to send documents.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.ShredEnqueuedDocumentsTask.Execute">
            <summary>
            Called by IntegrationService.
            Throws <see cref="T:TRR.O2I.Common.Exceptions.ApplicationBaseException"/> if error occure.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOQueue.ShredRequeuedDocumentsTask">
            <summary>
            Task to send documents.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOQueue.ShredRequeuedDocumentsTask.Execute">
            <summary>
            Called by IntegrationService.
            Throws <see cref="T:TRR.O2I.Common.Exceptions.ApplicationBaseException"/> if error occure.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IOrdersManager">
            <summary>
            Base interface for OrdersManager
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IOrdersManager.UpdateLineTotal(TRR.O2I.DataAccess.Entities.OrderLine)">
            <summary>
            Updates the line total.
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IPartyManager">
            <summary>
            /Interface for PartyManager
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IPartyManager.CreateFromTRCompany(System.Int32,System.Int32)">
            <summary>
            Creates from TR company.
            </summary>
            <param name="companyId">The company id.</param>
            <param name="partyType"></param>
            <returns></returns>
            @TODO: remove this
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IPartyManager.CreateFromCompany(System.Int32,System.Int32)">
            <summary>
            Creates party base on  company information.
            </summary>
            <param name="companyId">The company id.</param>
            <param name="partyType"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.IRelatedDocumentsManager">
            <summary>
            Related document manager.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IRelatedDocumentsManager.UnpackStatus(System.String,TRR.O2I.Common.Core.DocumentType@)">
            <summary>
            Unpack common status string.
            </summary>
            <param name="status">Common status string in format 'documentTypeId_documentStatusId'.</param>
            <param name="type">Resulting document type.</param>
            <returns>Document status.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IRelatedDocumentsManager.StoreCreditAdviceToPurchaseOrder(TRR.O2I.DataAccess.Entities.ICreditAdvice)">
            <summary>
            Create or Update Related document link for CreditAdvice to PO/POR.
            </summary>
            <param name="ca">CreditAdvice entity.</param>
            <returns>Hashtable with RelatedDocumentHistory entities in format: 'OrderId' - 'RelatedDocumentHistory entity'.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IRelatedDocumentsManager.StoreAdvancedShipmentNoticeToPurchaseOrder(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,DataAccess.Services.IServiceManager)">
            <summary>
            Create Related document link for ASN to PO/POR.
            </summary>
            <param name="asn">ASN entity.</param>
            <param name="serviceManager">Service manager</param>
            <returns>Hashtable with RelatedDocumentHistory entities in format: 'OrderId' - 'RelatedDocumentHistory entity'.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IRelatedDocumentsManager.StoreGoodsReceiptToPurchaseOrder(TRR.O2I.DataAccess.Entities.GoodsReceipt)">
            <summary>
            Create Related document link for GoodsReceipt to PO/POR.
            </summary>
            <param name="gr">GoodsReceipt entity.</param>
            <returns>Hashtable with RelatedDocumentHistory entities in format: 'OrderId' - 'RelatedDocumentHistory entity'.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IRelatedDocumentsManager.StoreInvoiceToPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Create or Update Related document link for Invoice to PO/POR.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IRelatedDocumentsManager.StoreInvoiceToPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Func{System.Int32,TRR.O2I.Common.Core.DocumentType,System.String})">
            <summary>
            Create or Update Related document link for Invoice to PO/POR.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IRelatedDocumentsManager.StoreInvoiceResponseToPurchaseOrder(TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseInfo,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Stores the invoice response to purchase order.
            </summary>
            <param name="responseInfo">The response info.</param>
            <param name="invoice">The invoice.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IRelatedDocumentsManager.StoreEntrySheetToPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,DataAccess.Services.IServiceManager)">
            <summary>
            Stores the ses to purchase order.
            </summary>
            <param name="sheet"></param>
            <param name="manager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IRelatedDocumentsManager.StoreRemittanceAdviceToPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.RemittanceAdvice)">
            <summary>
            Stores the remittance advice to purchase order.
            </summary>
            <param name="advice">The remittance advice.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.IRelatedDocumentsManager.UpdateRemittanceAdviceStatus(System.Int32,TRR.O2I.BusinessLogic.BusinessEntity.Enums.RemittanceAdviceStatus)">
            <summary>
            Updates the remittance advice status in related documents history.
            </summary>
            <param name="adviceId">The advice id.</param>
            <param name="status">The status.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ISaveOrderLineInput">
            <summary>
            Save order input
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ISaveOrderLineInput.OrderLineID">
            <summary>
            Gets or sets the order line ID.
            </summary>
            <value>The order line ID.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ISaveOrderLineInput.OrderLineDescriptor">
            <summary>
            Gets the order line descriptor.
            </summary>
            <value>The order line descriptor.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ISaveOrderLineInput.ShipmentDetailsGrid">
            <summary>
            Gets the shippment details grid.
            </summary>
            <value>The shippment details grid.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ISaveOrderLineInput.AutoSave">
            <summary>
            Gets a value indicating whether [auto save].
            </summary>
            <value><c>true</c> if [auto save]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ISaveOrderLineInput.AttachmentList">
            <summary>
            Gets or sets the attachment list.
            </summary>
            <value>The attachment list.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ISupplierSettingsManager">
            <summary>
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.ISupplierSettingsManager.Load(System.Int32)">
            <summary>
            Loads the specified supplier id.
            </summary>
            <param name="supplierId">The supplier id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IOQueue.ItemProcessingFailureException">
            <summary>
            Throws by QueueItemProcessor in case when item processing failed, but 
            item can be processed again next time.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IOQueue.ItemProcessingFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
            <param name="innerException">Reference to inner exception to be enveloped.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.ManagerFactory">
            <summary>
            Manager factory
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ManagerFactory.History">
            <summary>
            Gets the history manager.
            </summary>
            <value>The history manager.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.ManagerFactory.RelatedDocuments">
            <summary>
            Gets the related documents manager.
            </summary>
            <value>The related documents manager.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Persisters.ChangeOrderPersister">
            <summary>
            Saves change orders 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Persisters.ChangeOrderPersister.SaveChangeOrderAsSent(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Saves the change order as sent.
            </summary>
            <param name="manager">The manager.</param>
            <param name="changeOrder">The change order.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Persisters.ChangeOrderPersister.SaveChangeOrder(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Saves the change order.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="changeOrder">The change order.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Persisters.OrderPersister">
            <summary>
            Saves orders
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Persisters.OrderPersister.SaveOrderAsSent(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Saves the order as sent.
            </summary>
            <param name="manager">The manager.</param>
            <param name="po">The po.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Persisters.OrderPersister.SaveOrder(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Saves the order.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Persisters.OrderPersister.SaveOrderAsSaved(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Saves the order as saved.
            </summary>
            <param name="manager">The manager.</param>
            <param name="order">The order.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Sending.DocumentSender">
            <summary>
            Send documents
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Sending.DocumentSender.SendOrderResponse(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Sends the order.
            </summary>
            <param name="currentOrder">The current order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Sending.DocumentSender.SaveOrderResponse(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order,System.String)">
            <summary>
            Saves the order response.
            </summary>
            <param name="currentOrder">The current order.</param>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Services.AsnRelatedOrdersStrategy">
            <summary>
            Gets asn related orders ids.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Services.IRelatedOrdersStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.IRelatedOrdersStrategy.GetPurchaseOrderIdList(System.Int32)">
            <summary>
            Gets the purchase order id list.
            </summary>
            <param name="documentId">The document id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.AsnRelatedOrdersStrategy.GetPurchaseOrderIdList(System.Int32)">
            <summary>
            Gets the purchase order id list.
            </summary>
            <param name="documentId">The document id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Services.ChangeOrderRelatedOrdersStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Services.CommonRelatedOrdersStrategy">
            <summary>
            COntains commonn functionality for Related Orders Strategy classes
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.CommonRelatedOrdersStrategy.GetRelatedOrderIds(System.Int32,TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Gets the related order ids.
            </summary>
            <param name="documentId">The document id.</param>
            <param name="documentType">Type of the document.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.ChangeOrderRelatedOrdersStrategy.GetPurchaseOrderIdList(System.Int32)">
            <summary>
            Gets the purchase order id list.
            </summary>
            <param name="documentId">The document id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Services.ChangeOrderResponseRelatedOrdersStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.ChangeOrderResponseRelatedOrdersStrategy.GetPurchaseOrderIdList(System.Int32)">
            <summary>
            Gets the purchase order id list.
            </summary>
            <param name="documentId">The document id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Services.CreditAdviceRelatedOrdersStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.CreditAdviceRelatedOrdersStrategy.GetPurchaseOrderIdList(System.Int32)">
            <summary>
            Gets the purchase order id list.
            </summary>
            <param name="documentId">The document id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Services.GoodsReceiptRelatedOrdersStrategy">
            <summary>
            Gets related orders for goods receipt
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.GoodsReceiptRelatedOrdersStrategy.GetPurchaseOrderIdList(System.Int32)">
            <summary>
            Gets the purchase order id list.
            </summary>
            <param name="documentId">The document id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Services.InvoiceRelatedOrdersStrategy">
            <summary>
            Gets invoice related order ids.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.InvoiceRelatedOrdersStrategy.GetPurchaseOrderIdList(System.Int32)">
            <summary>
            Gets the purchase order id list.
            </summary>
            <param name="documentId">The document id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Services.OrderResponseRelatedOrdersStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.OrderResponseRelatedOrdersStrategy.GetPurchaseOrderIdList(System.Int32)">
            <summary>
            Gets the purchase order id list.
            </summary>
            <param name="documentId">The document id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Services.PurchaseOrderRelatedOrdersStrategy">
            <summary>
            Gets related orders for purchase order.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.PurchaseOrderRelatedOrdersStrategy.GetPurchaseOrderIdList(System.Int32)">
            <summary>
            Gets the purchase order id list.
            </summary>
            <param name="documentId">The document id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Services.QuantityTrackingService">
            <summary>
            Service to work with Quantity Tracking 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.QuantityTrackingService.GetOrderBasedQuantityTrackingInformation(System.Int32,TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Gets the quantity tracking information.
            </summary>
            <param name="documentId">The document id.</param>
            <param name="documentType">Type of the document.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Services.QuantityTrackingService.GetInvoiceBasedQuantityTrackingInformation(System.Int32)">
            <summary>
            Gets the invoice quantity tracking information.
            </summary>
            <param name="invoiceId">The invoice id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.EntityShredPersisterFactory">
            <summary>
            Factory for shred persisters.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.EntityShredPersisterFactory.GetPersister(TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Gets the persister.
            </summary>
            <param name="documentType">Type of the document.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Exceptions.MixedItemConditionGRException">
            <summary>
            Exception to throw if shredded gr has items with mixed returned/cancelled and other conditions.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Exceptions.MixedItemConditionGRException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.ShredderValidationException">
            <summary>
            DocumentShredderError
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.ShredderValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
            <param name="innerException">Reference to inner exception to be enveloped.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactNumberXmlRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactNumberXmlRow.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactNumberXmlRow.TypeCoded">
            <summary>
            Gets or sets the type coded.
            </summary>
            <value>The type coded.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactNumberXmlRow.TypeCodedOther">
            <summary>
            Gets or sets the type coded other.
            </summary>
            <value>The type coded other.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactXmlRow">
            <summary>
            The domain representation of contact
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactXmlRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactXmlRow"/> class.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactXmlRow.ContactName">
            <summary>
            Gets or sets the name of the contact.
            </summary>
            <value>The name of the contact.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactXmlRow.Ident">
            <summary>
            Gets or sets the ident.
            </summary>
            <value>The ident.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactXmlRow.AgencyCoded">
            <summary>
            Gets or sets the agency coded.
            </summary>
            <value>The agency coded.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactXmlRow.AgencyCodedOther">
            <summary>
            Gets or sets the agency coded other.
            </summary>
            <value>The agency coded other.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactXmlRow.ContactNumbers">
            <summary>
            Gets or sets the contact numbers.
            </summary>
            <value>The contact numbers.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactXmlRow.TelephoneNumber">
            <summary>
            Gets the telephone number.
            </summary>
            <value>The telephone number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactXmlRow.FaxNumber">
            <summary>
            Gets the fax number.
            </summary>
            <value>The fax number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.ContactXmlRow.EmailAddress">
            <summary>
            Gets the email address.
            </summary>
            <value>The email address.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.CurrencyXmlRow">
            <summary>
            Contains currency information
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.CurrencyXmlRow.Value">
            <summary>
            The value for currency
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.CurrencyXmlRow.ValueOther">
            <summary>
            The value for currency, if Value is "Other"
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow">
            <summary>
            Object representation for Address
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.Name1">
            <summary>
            Gets or sets the name1.
            </summary>
            <value>The name1.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.Name2">
            <summary>
            Gets or sets the name2.
            </summary>
            <value>The name2.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.Name3">
            <summary>
            Gets or sets the name3.
            </summary>
            <value>The name3.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.ExternalAddressId">
            <summary>
            Gets or sets the external address id.
            </summary>
            <value>The external address id.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.Street">
            <summary>
            Gets or sets the street.
            </summary>
            <value>The street.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>The city.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
            <value>The postal code.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.CountryCoded">
            <summary>
            Gets or sets the country coded.
            </summary>
            <value>The country coded.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.CountryCodedOther">
            <summary>
            Gets or sets the country coded other.
            </summary>
            <value>The country coded other.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.RegionCoded">
            <summary>
            Gets or sets the region coded.
            </summary>
            <value>The region coded.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.RegionCodedOther">
            <summary>
            Gets or sets the region coded other.
            </summary>
            <value>The region coded other.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.District">
            <summary>
            Gets or sets the district.
            </summary>
            <value>The district.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.StreetSupplement1">
            <summary>
            Gets or sets the street supplement1.
            </summary>
            <value>The street supplement1.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.StreetSupplement2">
            <summary>
            Gets or sets the street supplement2.
            </summary>
            <value>The street supplement2.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.Building">
            <summary>
            Gets or sets the building.
            </summary>
            <value>The building.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.Floor">
            <summary>
            Gets or sets the floor.
            </summary>
            <value>The floor.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.RoomNumber">
            <summary>
            Gets or sets the room number.
            </summary>
            <value>The room number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.InhouseMail">
            <summary>
            Gets or sets the inhouse mail.
            </summary>
            <value>The inhouse mail.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.NameAddressXmlRow.POBox">
            <summary>
            Gets or sets the PO box.
            </summary>
            <value>The PO box.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.PartyXmlRow">
            <summary>
            Object representation for Xml party
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.PartyXmlRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.PartyXmlRow"/> class.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.PartyXmlRow.AgencyCoded">
            <summary>
            Gets or sets the agency coded.
            </summary>
            <value>The agency coded.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.PartyXmlRow.Ident">
            <summary>
            Gets or sets the ident.
            </summary>
            <value>The ident.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.PartyXmlRow.NameAddress">
            <summary>
            Gets or sets the name address.
            </summary>
            <value>The name address.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.PartyXmlRow.PrimaryContact">
            <summary>
            Gets or sets the primary contact.
            </summary>
            <value>The primary contact.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.PartyXmlRow.OtherContacts">
            <summary>
            Gets or sets the other contacts.
            </summary>
            <value>The other contacts.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceInvoicingDetailsXmlRow">
            <summary>
            The class representation of Xml 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceInvoicingDetailsXmlRow.SequenceNumber">
            <summary>
            The sequence number
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceInvoicingDetailsXmlRow.BuyerLineNumber">
            <summary>
            Buyer line item number
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceInvoicingDetailsXmlRow.SellerLineNumber">
            <summary>
            Seller line number
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceInvoicingDetailsXmlRow.InvoiceNumber">
            <summary>
            Invoice Number
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceInvoicingDetailsXmlRow.AmountDue">
            <summary>
            Amount due
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceInvoicingDetailsXmlRow.AmountDueCurrency">
            <summary>
            The currency for amount due
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceInvoicingDetailsXmlRow.AmountPaid">
            <summary>
            Amount paid
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceInvoicingDetailsXmlRow.AmountPaidCurrency">
            <summary>
            The curreny for amount paid
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.RemittanceAdviceShredder">
            <summary>
            Shredder for remittance advice
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.RemittanceAdviceShredder.#ctor(TRR.O2I.DataAccess.Services.IServiceManagerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.RemittanceAdviceShredder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.RemittanceAdviceShredder.Shred(TRR.O2I.Common.Core.XMLDocumentParser,System.String)">
            <summary>
            Shreds the specified document.
            </summary>
            <param name="parser">The parser.</param>
            <param name="uniqueIdentifier">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.RemittanceAdviceXmlParser">
            <summary>
             Xml Parser for remittance advice
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.RemittanceAdviceXmlParser.Parse(System.String)">
            <summary>
            Parses the Xml.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceSubsidiaryXmlRow">
            <summary>
            The class representation of Remittance Advice Subsidiary's Xml
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceSubsidiaryXmlRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceSubsidiaryXmlRow"/> class.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceSubsidiaryXmlRow.InvoicingDetails">
            <summary>
            Invoicing details
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceSubsidiaryXmlRow.Ident">
            <summary>
            Gets or sets the ident.
            </summary>
            <value>The ident.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow">
            <summary>
            A class representation of Xml
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow"/> class.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.DocumentNumber">
            <summary>
            Remittance advice document number
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.IssueDate">
            <summary>
            Issue date
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.PayerParty">
            <summary>
            Gets or sets the payer party.
            </summary>
            <value>The payer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.PayeeParty">
            <summary>
            Gets or sets the payer party.
            </summary>
            <value>The payer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.Currency">
            <summary>
            Currency information
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.TotalAmountDue">
            <summary>
            Total amount due
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.TotalAmountDueCurrency">
            <summary>
            Curency for total amount due
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.TotalAmountPaid">
            <summary>
            Total amount paid
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.TotalAmountPaidCurrency">
            <summary>
            Currency for total amount paid
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.Subsidiaries">
            <summary>
            The list of Subsidiaries. Should be populated onle if Subsidiaries section was the choice in XML
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.RemittanceAdviceXmlRow.InvoicingDetails">
            <summary>
            The list of InvoicingDetails. Should be populated onle if InvoicingDetails section was the choice in XML
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapAccessor">
            <summary>
            Source for shredding mapps
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapAccessor.GetMap(TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Gets the shredding map from resources.
            </summary>
            <param name="documentType">Type of the document.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CAUniquenessValidationRule">
            <summary>
            Do duplicate check on CA
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CAUniquenessValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.CreditAdvice,System.String)">
            <summary>
            Do duplicate check on CA
            </summary>
            <param name="document">CreditAdvice document</param>
            <param name="documentGuid">document guid</param>
            <returns></returns>	
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.GoodsReceiptUpdateCategoryValidationRule">
            <summary>
            Rule, that calculates GR category
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.GoodsReceiptUpdateCategoryValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IExceptionFactory">
            <summary>
            GoodsReceipt validtion exceptions factory interface
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IExceptionFactory.CreateGoodsReceiptItemWithoutOrderLineException(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String,TRR.O2I.DataAccess.Entities.GoodsReceiptItem)">
            <summary>
            Creates the goods receipt item without order line exception.
            </summary>
            <param name="goodsReceipt">The goods receipt.</param>
            <param name="guid">The GUID.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IExceptionFactory.CreateGoodsReceiptWithoutOrderException(TRR.O2I.DataAccess.Entities.GoodsReceiptItem)">
            <summary>
            Creates the goods receipt without order referenced by receipt item exception.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ExceptionFactory">
            <summary>
            GoodsReceipt validtion exceptions factory
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ExceptionFactory.CreateGoodsReceiptItemWithoutOrderLineException(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String,TRR.O2I.DataAccess.Entities.GoodsReceiptItem)">
            <summary>
            Creates the goods receipt item without order line exception.
            </summary>
            <param name="goodsReceipt">The goods receipt.</param>
            <param name="guid">The GUID.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ExceptionFactory.CreateGoodsReceiptWithoutOrderException(TRR.O2I.DataAccess.Entities.GoodsReceiptItem)">
            <summary>
            Creates the goods receipt without order referenced by receipt item exception.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.GoodsReceiptCheckLinesForReturnedValidationRule">
            <summary>
            Validates items in returned goods receipts.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.GoodsReceiptCheckLinesForReturnedValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.InvoiceResponses.IInvoiceResponseValidationRule">
            <summary>
            Validation rule for invoice response.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.InvoiceResponses.IInvoiceResponseValidationRule.Validate(TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseInfo,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Validates the specified document.
            </summary>
            <param name="responseInfo">The document.</param>
            <param name="invoice">The invoice.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ChangeOrder.ChangeOrderValidateChangeTypeCodeValidationRule">
            <summary>
            Validates lines Change Type Code.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ChangeOrder.ChangeOrderValidateChangeTypeCodeValidationRule.Validate(TRR.O2I.DataAccess.Entities.PurchaseOrder,TRR.O2I.DataAccess.Entities.IOrderComposite)">
            <summary>
            Validates the lines change type code.
            </summary>
            <param name="changeOrderMain">The change order main.</param>
            <param name="relatedOrder">The related order.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ChangeOrder.ChangeOrderValidateChangeTypeCodeValidationRule.ValidateChangeTypeCode(TRR.O2I.DataAccess.Entities.IOrderLineLite,TRR.O2I.DataAccess.Entities.IOrderComposite,System.String)">
            <summary>
            Validates the change type code.
            </summary>
            <param name="line">The line.</param>
            <param name="relatedOrder">The related order.</param>
            <param name="changeOrderDocumentID">The change order document ID.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.UpdateOrderTypeValidationRule">
            <summary>
            Order subtype definition rule
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.UpdateOrderTypeValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Validates the account code.
            </summary>
            <param name="documentGuid">The document guid.</param>
            <param name="order">The order to validate.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateControlKeyValidationRule">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateControlKeyValidationRule.#ctor(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings)">
            <summary>
             Parametrized constructor (for test purposes only)
            </summary>
            <param name="buyerSettings">Buyer Settings</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateControlKeyValidationRule.#ctor">
            <summary>
             Default constructor
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateControlKeyValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Validates the account code.
            </summary>
            <param name="documentGuid">The document guid.</param>
            <param name="order">The order to validate.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderLineDuplicationValidationRule">
            <summary>
            Checks order for lines with equal buyer item number.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderLineDuplicationValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Checks for line duplication.
            </summary>
            <param name="documentGuid">The document GUID.</param>
            <param name="order">The order.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateSecurityFieldsValidationRule">
            <summary>
            Security fields validation rule.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateSecurityFieldsValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Updates the security fields.
            </summary>
            <param name="documentGuid">The document guid.</param>
            <param name="order">The order main.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderAccountCodeValidationRule">
            <summary>
            Validates order account code.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderAccountCodeValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Validates the account code.
            </summary>
            <param name="documentGuid">The document guid.</param>
            <param name="order">The order to validate.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderCheckSubLinesParentsValidationRule">
            <summary>
            Order check sub lines parents validation rule.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderCheckSubLinesParentsValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Checks the sub lines parents.
            </summary>
            <param name="documentGuid">The document GUID.</param>
            <param name="order">The document.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderCreateAndInsertTransportValidationRule">
            <summary>
            Create and insert transport validation rule.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderCreateAndInsertTransportValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Creates the and insert transport.
            </summary>
            <param name="documentGuid">The document guid.</param>
            <param name="order">The order.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderDuplicationValidationRule">
            <summary>
            Order duplication validation rule.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderDuplicationValidationRule.#ctor(System.String)">
            <summary>
            public constrcutor
            </summary>
            <param name="bizDocID"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderDuplicationValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Checks for duplication.
            </summary>
            <param name="documentGuid">The GUID.</param>
            <param name="order">The order.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderPartyValidationRule">
            <summary>
            Validates order party.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderPartyValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Validates the order party.
            </summary>
            <param name="documentGuid">The document guid.</param>
            <param name="order">The order to validate.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderPartyValidationRule.ValidateBuyerCompany(TRR.O2I.Common.Core.TRUEIntegration.FacadeEntities.ITRUECompany)">
            <summary>
            Validates the buyer company.
            </summary>
            <param name="buyerCompany">The buyer company.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderRemoveAttachmentsNotFoundInDBValidationRule">
            <summary>
            Removes attachment that wasn't found in the database.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderRemoveAttachmentsNotFoundInDBValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Removes the attachments not found in DB.
            </summary>
            <param name="documentGuid">The document guid.</param>
            <param name="order">The order main.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateResponseFieldValidationRule">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateResponseFieldValidationRule.Validate(System.String,TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland)">
            <summary>
            Updates the response prefixed fields and requested delivery date.
            </summary>
            <param name="documentGuid">The document guid.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateResponseFieldValidationRule.UpdateLineProperties(TRR.O2I.DataAccess.Entities.IOrderLineLite)">
            <summary>
            Updates the line properties.
            </summary>
            <param name="line">The one line.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateResponseFieldValidationRule.UpdateRequestedDeliveryDateAndTransport(TRR.O2I.DataAccess.Entities.OrderLine)">
            <summary>
            Updates the requested delivery date and transport.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateResponseFieldValidationRule.RunOrderLineValidationRules(TRR.O2I.DataAccess.Entities.OrderLine)">
            <summary>
            Runs the order line validation rules.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrder.OrderUpdateResponseFieldValidationRule.InitResponseFields(TRR.O2I.DataAccess.Entities.IOrderComposite)">
            <summary>
            Inits the response fields.
            </summary>
            <param name="order">The change order main.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DefaultTax.StateTypeTaxStrategy">
            <summary>
            18
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.StateTypeTaxStrategy.ShallDefaultTaxBeApplied(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Gets a value indicating whether default tax should be applied on invoice lines while invoice is being created based on buyer settings.
            </summary>
            <value><c>true</c> if default tax should be applied on invoice lines while invoice is being created; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.SIRENNumberValidator">
            <summary>
            SIREN Number validator
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.SIRENNumberValidator.IsSIRENNumberValid(System.String)">
            <summary>
            Gets a value indicating whether SIREN Number is valid.
            </summary>
            <param name="sirenNumber"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.TaxesCombine">
            <summary>
            Taxes combine. Produce aggregated tax from plain tax collection and vice versa.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.TaxesCombine.DefaultRegion">
            <summary>
            Default Region (Canada-Alberta)
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.TaxesCombine.Combine(TRR.O2I.BusinessLogic.Framework.IEntityCollection{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Tax})">
            <summary>
            Combine plain tax collection into aggregated tax
            </summary>
            <param name="taxes">The taxes.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.TaxesCombine.Decombine(TRR.O2I.BusinessLogic.Managers.CombinedTax,TRR.O2I.BusinessLogic.Framework.IEntityCollection{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Tax})">
            <summary>
            Decombines aggregated tax into plain taxes collection
            </summary>
            <param name="taxes">The taxes.</param>
            <param name="combinedTax">The combined tax.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.TaxesCombine.CreateDefaultCombinedTax">
            <summary>
            Creates the default combined tax.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.TaxesCombine.IsNonTaxable(TRR.O2I.BusinessLogic.Managers.CombinedTax)">
            <summary>
             Gets a value indicating whether [tax category is nontaxable].
            </summary>
            <param name="tax"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.TaxesCombine.CreateCombinedNonTaxable(System.Int32)">
            <summary>
            Creates Nontaxable tax
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Exceptions.UnableToCreateInvoicingDocumentDueToNotEnoughAvailableAmount">
            <summary>
             Indicates that there is not enough available amount for SES creation
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Exceptions.UnableToCreateInvoicingDocumentDueToNotEnoughAvailableAmount.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.NotificationsManager">
            <summary>
            Notifications manager.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.NotificationsManager.CancelNotificationsAboutNewPurchaseOrder(System.Int32,System.Int32)">
            <summary>
            Cancels the notifications about new purchase order.
            </summary>
            <param name="buyerId">The buyer id.</param>
            <param name="orderCompositeId">The order composite id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.NotificationsManager.StartNotificationsAboutNewChangeOrder(System.Int32,System.Int32)">
            <summary>
            Starts the notifications about new change order.
            </summary>
            <param name="buyerId">The buyer id.</param>
            <param name="changeOrderId">The destination id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.NotificationsManager.StartNotificationsAboutNewPurchaseOrder(System.Int32,System.Int32)">
            <summary>
            Starts the notifications about new purchase order.
            </summary>
            <param name="buyerId">The buyer id.</param>
            <param name="orderCompositeId">The order composite id.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.NotificationsManager.CancelNotificationsAboutNewChangeOrder(System.Int32,System.Int32)">
            <summary>
            Cancels notifications about new change order.
            </summary>
            <param name="buyerId"></param>
            <param name="changeOrderId"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Invoicing.OrderLinesToInvoiceImporter">
            <summary>
            Imports order lines to the invoice.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.OrderLinesToInvoiceImporter.#ctor(TRR.O2I.BusinessLogic.Managers.Invoicing.IOrderLinesImportStrategy,TRR.O2I.BusinessLogic.Managers.DefaultTax.IDefaultTaxStrategy,TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Invoicing.OrderLinesToInvoiceImporter"/> class.
            </summary>
            <param name="importStrategy">The import strategy.</param>
            <param name="taxStrategy">The default tax strategy.</param>
            <param name="buyerSettings"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Invoicing.OrderLinesToInvoiceImporter.Import(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.OrderLine},System.Collections.Generic.IList{TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order})">
            <summary>
            Creates the invoice from order lines internal.
            </summary>
            <param name="invoice">The invoice.</param>
            <param name="orderLines">The order lines.</param>
            <param name="orders">The orders related to lines.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.OrderLineSubItemListDescriptor">
            <summary>
            Holds information about the 
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineSubItemListDescriptor.#ctor(System.Collections.ArrayList)">
            <summary>
            Instantiates a new description class
            </summary>
            <param name="subItemList"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineSubItemListDescriptor.#ctor">
            <summary>
            Instantiates a new descriptor class
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineSubItemListDescriptor.SubItemList">
            <summary>
            Returns the collection of the sub items
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter">
            <summary>
            Adaptes old-fashioned OrderLine class to new-fashioned IOrderLineRow in order to allow new alghorythms usage
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.#ctor(TRR.O2I.DataAccess.Entities.OrderLine)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter"/> class.
            </summary>
            <param name="orderLine">The order line.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.Save(TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.DataAccess.Core.SaveOptions)">
            <summary>
            Saves entity using specified DA service, no transaction handling inside the method.
            </summary>
            <param name="daService">The da service.</param>
            <param name="saveOptions">The save options.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.IsPropertyDirty(System.String)">
            <summary>
            Returns true if a property's values was modified ...
            </summary>
            <param name="propertyName">The name of the property in question</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.IsDBNull(System.String)">
            <summary>
            Returns if a field in the persistent entity is DB null or it is not
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.SetDBNull(System.String)">
            <summary>
            Sets the specified property to null
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.GetPropertyValue(System.String)">
            <summary>
            Returns a property's value. Throws an exception in the explicit operator
            if the value is null
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.GetUncompressedPropertyValue(System.String)">
            <summary>
            Returns a property's value. Throws an exception in the explicit operator
            if the value is null
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.SetCompressedPropertyValue(System.String,System.Object)">
            <summary>
            Sets the compressed property value.
            </summary>
            <param name="propName">Name of the prop.</param>
            <param name="propValue">Value.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.SetPropertyValue(System.String,System.Object)">
            <summary>
            Sets the value for the specified property.
            </summary>
            <param name="propertyName"></param>
            <param name="propValue"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.Clone">
            <summary>
            Return a shallow copy to this object, and set the IsNew property to true
            If this object contains references like lists, they will NOT be copied, and 
            they will be instanciated with empty IList instances.
            This also puts the primary key properties to NULL, and sets the IsNew property to true
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.Equals(TRR.O2I.DataAccess.Core.Entities.Interfaces.IPersistentEntity)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.OrderLineId">
            <summary>
            The primary key for the order line
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ParentLineFK">
            <summary>
            The foreign key for the parent line
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.OrderCompositeFK">
            <summary>
            The foreign key to the order.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.Status">
            <summary>
            The foreign key of the status.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.BuyerLineItemNum">
            <summary>
            Gets or sets BuyerLineItemNum.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.PrimaryReference">
            <summary>
            Gets or sets PrimaryReference.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.LineItemTypeFK">
            <summary>
            Gets or sets the line item type FK.
            </summary>
            <value>The line item type FK.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.BuyerPartNumberExt">
            <summary>
            Gets or sets BuyerPartNumberExt
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.OrderLineTypeFK">
            <summary>
            Gets or sets OrderLineTypeFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.SellerLineItemNum">
            <summary>
            Gets or sets SellerLineItemNum.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.SellerPartNumber">
            <summary>
            Gets or sets SellerPartNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.BuyerPartNumber">
            <summary>
            Represents the Buyer Part Number
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ManufacturerPartNumber">
            <summary>
            Gets or sets ManufacturerPartNumber
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ItemDescription">
            <summary>
            Gets or sets ItemDescription
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.RequestedDeliveryDate">
            <summary>
            Gets or sets RequestedDeliveryDate
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.TotalQuantityValue">
            <summary>
            Gets or sets TotalQuantityValue
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.UnitPriceValue">
            <summary>
            Gets or sets UnitPriceValue
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.UnitPriceCurrencyCodedFK">
            <summary>
            Gets or sets UnitPriceCurrencyCodedFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.PerQuantityValue">
            <summary>
            Gets or sets PerQuantityValue
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.PriceUnitUOMFK">
            <summary>
            Gets or sets PriceUnitUOMFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.MonetaryAmount">
            <summary>
            Gets or sets MonetaryAmount
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.UOMCodeFK">
            <summary>
            Gets or sets UOMCodeFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.FinalRecipientFK">
            <summary>
            Get/Set for FinalRecipientFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ChangeTypeCode">
            <summary>
            Get/set for ChangeTypeCodeFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.PBQQuantityValue">
            <summary>
            Gets or sets PBQQuantityValue
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.PBQUOMCodeFK">
            <summary>
            Gets or sets PBQUOMCodeFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.DiscountPercent">
            <summary>
            Gets or sets DiscountPercent
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.TransportFK">
            <summary>
            Get/set for TransportFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ResponseUnitPriceValue">
            <summary>
            Gets or sets ResponseUnitPriceValue
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ResponseTotalQuantityValue">
            <summary>
            Gets or sets ResponseTotalQuantityValue
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ResponseUOMCodeFK">
            <summary>
            Gets or sets ResponseUOMCodeFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ResponsePBQQuantityValue">
            <summary>
            Gets or sets ResponsePBQQuantityValue
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ResponsePBQUOMCodeFK">
            <summary>
            Gets or sets ResponsePBQUOMCodeFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ShipToLocationFK">
            <summary>
            Gets or sets ShipToLocationFK
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ResponseDeliveryDate">
            <summary>
            Gets or sets ResponseDeliveryDate
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ResponseSubTotal">
            <summary>
            Get/Set for ResponseSubTotal
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ResponseTaxTotal">
            <summary>
            Get/Set for ResponseTaxTotal
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ResponseTotalAmount">
            <summary>
            Get/Set for ResponseTotalAmount
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ServiceNumber">
            <summary>
            Gets or sets ServiceNumber 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.Note">
            <summary>
            Line note
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.StructuredNote">
            <summary>
            Structured note
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.ParentLineItemNum">
            <summary>
            This property is used only durring the shredding process. It holds the temporary value for the 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.IsDirty">
            <summary>
            Returns true when a field was modified in the business entity
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.IsPrimaryKeyNull">
            <summary>
            Returns whatever the primary key of this entity is null or not
            </summary>
            <value></value>
        </member>
        <member name="E:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.OnSave">
            <summary>
            Called after saving the entity
            </summary>
        </member>
        <member name="E:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.OnInsert">
            <summary>
            Called after an entity has been inserted to the DB
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.SupplierID">
            <summary>
            Defines the SupplierID
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.AccountCode">
            <summary>
            Defines the AccountCode 
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.DocumentLineID">
            <summary>
            Primary key of the Line in DB.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.DocumentLineParentID">
            <summary>
            Primary key of the Line's parent in DB or int.MinValue.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.XMLIsland">
            <summary>
            Gets or sets the XML island.
            </summary>
            <value>The XML island.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.OrderLineToOrderLineRowAdapter.TermsOfDeliveryFK">
            <summary>
            Gets or sets the terms of delivery FK.
            </summary>
            <value>The terms of delivery FK.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.OrdersManager">
            <summary>
            Encapsulates the party-related business logic.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.GetLastHistoryLines(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Order)">
            <summary>
            Gets the history lines for order.
            </summary>
            <param name="currentOrder">The current order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.GetLastHistoryLinesForChangeOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.ChangeOrder)">
            <summary>
            Gets the history lines for change order.
            </summary>
            <param name="changeOrder">The current change order.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.CalculatePurchaseOrderHistoryStatus(System.Int32)">
            <summary>
            Calculates the purchase order history status.
            </summary>
            <param name="statusId">The status FK.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.UpdateOrderTotal(TRR.O2I.DataAccess.Entities.IOrderComposite,System.Collections.IList,TRR.O2I.DataAccess.Entities.ITaxRow)">
            <summary>
            Updates the order total.
            </summary>
            <param name="order">The order.</param>
            <param name="lines">The lines.</param>
            <param name="orderTax">The order tax.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.UpdateOrderTotal(TRR.O2I.DataAccess.Entities.IOrderComposite,System.Collections.IList,TRR.O2I.DataAccess.Entities.ITaxRow,System.Boolean)">
            <summary>
            Updates the order total.
            </summary>
            <param name="order">The order.</param>
            <param name="lines">The lines.</param>
            <param name="orderTax">The order tax.</param>
            <param name="updateLinesParentReferences">if set to <c>true</c> [update lines parent references].</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.LoadOrderTax(System.Int32)">
            <summary>
            Loads the order tax.
            </summary>
            <param name="orderCompositeId">The order composite id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.UpdateLineTotal(TRR.O2I.DataAccess.Entities.OrderLine)">
            <summary>
            Updates selected Order Line total calculated values.
            </summary>
            <remarks>This method doesn't update entity in database.</remarks>
            <param name="line">Order Line entity.</param>        
            <returns>Newly calculated order line total (without taxes).</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.CalculateResponseSubTotal(TRR.O2I.DataAccess.Entities.OrderLineLite)">
            <summary>
            Calculates line's total value
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.OrderCompositeReferenceCoded(System.Int32)">
            <summary>
            Load Reference for the order
            </summary>
            <param name="orderCompositeId">The order composite id.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.FindOrderLine(System.Int32,System.String)">
            <summary>
            Returns the line item with the specified line number
            </summary>
            <param name="parentOrderId">The parent order id.</param>
            <param name="buyerLineItemNumber">The buyer line item number.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.FillParentLineItemNumbers(System.Collections.IList)">
            <summary>
            Fills ParentLineItemNum of subitem based on ParentLineFK.
            </summary>
            <param name="orderLines"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.SetParentsToSubItems(System.Collections.IList)">
            <summary>
            Update the foreign keys of the sub line items. 
            </summary>
            <param name="orderLines">The collection of the order lines which have to be updated.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.ValidCanceledOrder(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.BusinessEntity.Entities.ParentOrderLine})">
            <summary>
            Checks if all the sub-items for each rejected parent line are also rejected
            </summary>
            <param name="allOrderLines"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.IsDecimalDatabaseCompiliant(System.Decimal)">
            <summary>
            Determines whether [is decimal database compiliant] [the specified total].
            </summary>
            <param name="total">The total.</param>
            <returns>
            	<c>true</c> if [is decimal database compiliant] [the specified total]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.GetDocType(TRR.O2I.BusinessLogic.BusinessEntity.Enums.OrderStatus)">
            <summary>
            Gets the type of the doc.
            </summary>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.LoadOrderTypeKey(System.Int32,System.Int32,DataAccess.Services.IServiceManager)">
            <summary>
            Loads the order type key.
            </summary>
            <param name="orderId">The order id.</param>
            <param name="buyerId">The buyer id.</param>
            <param name="serviceManager">The service manager.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.OrdersManager.GetOrderTypeKey(System.Int32,System.Int32)">
            <summary>
            Bridge from foreign keys to business object
            </summary>
            <param name="orderTypeFK">The order type FK.</param>
            <param name="orderSubTypeFK">The order sub type FK.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.PartyManager">
            <summary>
            Encapsulates the party-related business logic.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PartyManager.#ctor(TRR.O2I.Common.Core.TRUEIntegration.ITRUEIntegrationFacade)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.PartyManager"/> class.
            </summary>
            <param name="facade">The facade.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PartyManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.PartyManager"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PartyManager.CreateFromTRCompany(System.Int32,System.Int32)">
            <summary>
            Creates party instance given the TRCompany.
            </summary>
            <param name="companyId">TRCompany id.</param>
            <param name="partyType"></param>
            <returns>Newly created party instance.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.PartyManager.CreateFromCompany(System.Int32,System.Int32)">
            <summary>
            Creates party based on company information.
            </summary>
            <param name="companyId">The company id.</param>
            <param name="partyType"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Properties.Resources.ChangeOrder_ShreddingMap">
             <summary>
               Looks up a localized string similar to &lt;shredding-map BusinessObject=&quot;TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland&quot; DocumentTypeFK=&quot;1&quot;&gt;
            
            	&lt;shorthands&gt;
            		&lt;shorthand name=&quot;~&quot; value=&quot;ChangeOrder&quot; /&gt;
            	&lt;/shorthands&gt;
            
            	&lt;!-- Shred the Order properties --&gt;
            	&lt;constant dto=&quot;BuyerOrderIdInternal&quot; value=&quot;1&quot; /&gt;
            
            	&lt;constant dto=&quot;DocumentTypeFK&quot; value=&quot;1&quot; /&gt;
            	&lt;constant dto=&quot;StatusFK&quot; value=&quot;8&quot; /&gt;
            	&lt;constant dto=&quot;IsSent&quot; value=&quot;false&quot; /&gt;
            	&lt;constant dto=&quot;IsSaved&quot; value=&quot;false&quot; /&gt;
            
            	&lt;xmlisland dto=&quot;XMLIsland&quot; xmlfield=&quot;~&quot; /&gt;
            	&lt;xmlisland dto= [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Properties.Resources.CreditAdvice_ShreddingMap">
             <summary>
               Looks up a localized string similar to &lt;shredding-map BusinessObject=&quot;TRR.O2I.DataAccess.Entities.CreditAdviceXMLIsland&quot; 
            	DocumentTypeFK=&quot;22&quot; xmlns=&quot;http://schemas.microsoft.com/AspNet/Hubwoo-Shredding-Map&quot;&gt;
            
            	&lt;shorthands&gt;
            		&lt;shorthand name=&quot;~&quot; value=&quot;Invoice&quot; /&gt;
            	&lt;/shorthands&gt;
            
            	&lt;!-- Constants --&gt;
            	&lt;constant dto=&quot;CAStatusFK&quot; value=&quot;1&quot; /&gt;
            	&lt;constant dto=&quot;AllowanceMonetaryAmount&quot; value=&quot;0&quot; /&gt;
            	&lt;constant dto=&quot;ChargeMonetaryAmount&quot; value=&quot;0&quot; /&gt;
            	&lt;constant dto=&quot;FreightMonetaryAmount&quot; value=&quot;0&quot; /&gt;
            
            	&lt;xmlisland dto=&quot;XMLIsland&quot; xmlfield=&quot; [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Properties.Resources.GoodsReceipt_ShreddingMap">
             <summary>
               Looks up a localized string similar to &lt;shredding-map BusinessObject=&quot;TRR.O2I.DataAccess.Entities.GoodsReceipt&quot;
            	DocumentTypeFK=&quot;5&quot; xmlns=&quot;http://schemas.microsoft.com/AspNet/Hubwoo-Shredding-Map&quot;&gt;
            
            
            	&lt;shorthands&gt;
            		&lt;shorthand name=&quot;~&quot; value=&quot;GoodsReceipt&quot; /&gt;
            	&lt;/shorthands&gt;
            
            	&lt;xmlisland dto=&quot;XMLIsland&quot; xmlfield=&quot;GoodsReceipt&quot; /&gt;
            
            	&lt;constant dto=&quot;GoodsReceiptStatusFK&quot; value=&quot;1&quot; /&gt;
            
            	&lt;property xmlfield=&quot;~/~Header/~ID&quot; dto=&quot;ReceiptId&quot; /&gt;
            	&lt;property xmlfield=&quot;~/~Header/~Purpose/Purpose/PurposeCoded&quot; dto=&quot;PurposeCodedFK&quot; enum=&quot;PurposeCod [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Properties.Resources.Invoice_ShreddingMap">
             <summary>
               Looks up a localized string similar to &lt;!-- 
            	Created by Ilya Petrushenka 2005-11-17
            --&gt;
            &lt;shredding-map BusinessObject=&quot;TRR.O2I.DataAccess.Entities.InvoiceXMLIsland&quot; 
            	DocumentTypeFK=&quot;4&quot; xmlns=&quot;http://schemas.microsoft.com/AspNet/Hubwoo-Shredding-Map&quot;&gt;
            
            
            	&lt;shorthands&gt;
            		&lt;shorthand name=&quot;~&quot; value=&quot;Invoice&quot; /&gt;
            	&lt;/shorthands&gt;
            
            	&lt;!-- Constants --&gt;
            	&lt;constant dto=&quot;InvoiceStatusFK&quot; value=&quot;1&quot; /&gt;
            	&lt;constant dto=&quot;AllowanceMonetaryAmount&quot; value=&quot;0&quot; /&gt;
            	&lt;constant dto=&quot;ChargeMonetaryAmount&quot; value=&quot;0&quot; /&gt;
            	&lt;constant dto=&quot;FreightMonetaryAmount&quot;  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Properties.Resources.PurchaseOrder_ShreddingMap">
             <summary>
               Looks up a localized string similar to &lt;shredding-map BusinessObject=&quot;TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland&quot; DocumentTypeFK=&quot;0&quot; &gt;
              &lt;shorthands&gt;
                &lt;shorthand name=&quot;Order&quot; value=&quot;Order&quot; /&gt;
              &lt;/shorthands&gt;
            
              &lt;!-- Shred the Order properties --&gt;
              &lt;constant dto=&quot;BuyerOrderIdInternal&quot; value=&quot;1&quot; /&gt;
            
              &lt;constant dto=&quot;DocumentTypeFK&quot; value=&quot;0&quot; /&gt;
              &lt;constant dto=&quot;StatusFK&quot; value=&quot;3&quot; /&gt;
              &lt;constant dto=&quot;IsSent&quot; value=&quot;false&quot; /&gt;
              &lt;constant dto=&quot;IsSaved&quot; value=&quot;false&quot; /&gt;
            
              &lt;xmlisland dto=&quot;XMLIsland&quot;                  xmlfield [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IOQueue.QueueItemSavingException">
            <summary>
            This exception throws by QueueCOntroleer when item saving failed.
            	
            The InnerException field containes additional infprmation about failure.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IOQueue.QueueItemSavingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
            <param name="innerException">Reference to inner exception to be enveloped.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager">
            <summary>
            Encapsulates the party-related business logic.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StatusFormat">
            <summary>
            Status format string for related documents records.
            Pass it into the string.Format method.
            {0} - document type id.
            {1} - document status id.
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StatusPattern">
            <summary>
            Status format pattern for related documents records.
            Use it parse document status identificators.
            type - document type id.
            status - document status id.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.UnpackStatus(System.String,TRR.O2I.Common.Core.DocumentType@)">
            <summary>
            Unpack common status string.
            </summary>
            <remarks>Use <see cref="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.PackStatus(TRR.O2I.Common.Core.DocumentType,System.Int32)"/> to pack status into string.</remarks>
            <param name="status">Common status string in format 'documentTypeId_documentStatusId'.</param>
            <param name="type">Resulting document type.</param>
            <returns>Document status.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.ExtractStatus(System.String)">
            <summary>
            Extracts the status.
            </summary>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StoreCreditAdviceToPurchaseOrder(TRR.O2I.DataAccess.Entities.ICreditAdvice)">
            <summary>
            Create or Update Related document link for CreditAdvice to PO/POR.
            </summary>
            <param name="ca">CreditAdvice entity.</param>
            <returns>Hashtable with RelatedDocumentHistory entities in format: 'OrderId' - 'RelatedDocumentHistory entity'.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StoreAdvancedShipmentNoticeToPurchaseOrder(TRR.O2I.BusinessLogic.Managers.BusinessEntity.AdvanceShipmentNoticeBusinessLogic.IAdvanceShipmentNotice,DataAccess.Services.IServiceManager)">
            <summary>
            Create Related document link for ASN to PO/POR.
            </summary>
            <param name="asn">ASN entity.</param>
            <param name="serviceManager"></param>
            <returns>Hashtable with RelatedDocumentHistory entities in format: 'OrderId' - 'RelatedDocumentHistory entity'.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StoreGoodsReceiptToPurchaseOrder(TRR.O2I.DataAccess.Entities.GoodsReceipt)">
            <summary>
            Create Related document link for GoodsReceipt to PO/POR.
            </summary>
            <param name="gr">GoodsReceipt entity.</param>
            <returns>Hashtable with RelatedDocumentHistory entities in format: 'OrderId' - 'RelatedDocumentHistory entity'.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.GetSenderName(System.Int32,TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Get Sender Name
            </summary>
            <param name="relDocId"></param>
            <param name="docType"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.GetPartyBuyerName(System.Int32,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Get Party Buyer Name
            </summary>
            <param name="buyerPartyId"></param>
            <param name="da"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StoreInvoiceToPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Create or Update Related document link for Invoice to PO/POR.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StoreInvoiceToPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Func{System.Int32,TRR.O2I.Common.Core.DocumentType,System.String})">
            <summary>
            Create or Update Related document link for Invoice to PO/POR.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StoreInvoiceResponseToPurchaseOrder(TRR.O2I.BusinessLogic.Managers.BusinessEntity.InvoiceResponseBusinessLogic.InvoiceResponseInfo,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Stores the invoice response to purchase order.
            </summary>
            <param name="responseInfo">The response info.</param>
            <param name="invoice">The invoice.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StoreEntrySheetToPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet,DataAccess.Services.IServiceManager)">
            <summary>
            Add or updates info on the ES to the related docs for order.
            </summary>
            <param name="entrySheet">Entry Sheet</param>
            <param name="serviceManager"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StoreEntrySheetResponseToPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheetResponse,TRR.O2I.BusinessLogic.BusinessEntity.Entities.EntrySheet)">
            <summary>
            Stores the ses response to purchase order.
            </summary>
            <param name="response">The response.</param>
            <param name="entrySheet">The entry sheet.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StoreRemittanceAdviceToPurchaseOrder(TRR.O2I.BusinessLogic.BusinessEntity.Entities.RemittanceAdvice)">
            <summary>
            Stores the remittance advice to purchase order.
            </summary>
            <param name="advice">The advice.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.UpdateRemittanceAdviceStatus(System.Int32,TRR.O2I.BusinessLogic.BusinessEntity.Enums.RemittanceAdviceStatus)">
            <summary>
            Updates the remittance advice status in related documents history.
            </summary>
            <param name="adviceId">The advice id.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.StoreCAToPO(TRR.O2I.DataAccess.Entities.ICreditAdvice,System.Int32)">
            <summary>
            Create Related document link for CreditAdvice to PO/POR.
            </summary>
            <param name="ca">CreditAdvice entity.</param>
            <param name="orderId">Related order identificator.</param>
            <returns>New Related document entity.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.PackStatus(TRR.O2I.Common.Core.DocumentType,System.Int32)">
            <summary>
            Packs document type and document status into one common status string.
            </summary>
            <remarks>Use <see cref="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.UnpackStatus(System.String,TRR.O2I.Common.Core.DocumentType@)"/> to parse resulting string back.</remarks>
            <param name="type">Document type.</param>
            <param name="statusId">Document status.</param>
            <returns>Formatted common status string.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.FindRelatedDocumentForInvoice(System.Int32,System.Int32)">
            <summary>
            Looks up for related invoice record.
            </summary>
            <param name="rootId">Root document identificator.</param>
            <param name="invoiceId">Related invoice identificator.</param>
            <returns>RelatedDocumentHistory entity or null, if not found.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.UpdateInvoiceToPO(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice,System.Int32,System.Func{System.Int32,TRR.O2I.Common.Core.DocumentType,System.String})">
            <summary>
            Update existent Related document entity.
            </summary>
            <param name="invoice">Invoice entity.</param>
            <param name="orderId">Related order identificator.</param>
            <param name="senderNameGetter"></param>
            <returns>New Related document entity.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.FindRelatedCreditAdvice(System.Int32,System.Int32)">
            <summary>
            Looks up for related CreditAdvice record.
            </summary>
            <param name="rootId">Root document identificator.</param>
            <param name="caId">Related CreditAdvice identificator.</param>
            <returns>RelatedDocumentHistory entity or null, if not found.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.UpdateCAToPO(TRR.O2I.DataAccess.Entities.ICreditAdvice,System.Int32)">
            <summary>
            Update existent Related document entity.
            </summary>
            <param name="ca">CreditAdvice entity.</param>
            <param name="orderId">Related order identificator.</param>
            <returns>New Related document entity.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.RelatedDocumentsManager.GetInvoiceRelatedOrders(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoice)">
            <summary>
            Gets the invoice related orders keys.
            </summary>
            <param name="invoice">The invoice.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.BulkAction">
            <summary>
            Stores items in the bulk container
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction">
            <summary>
            It is the basic action class for every action in the shredding process
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Public constructor which stores the given values ...
            </summary>
            <param name="xmlPath">The XML path.</param>
            <param name="dtoName">Name of the dto.</param>
            <param name="listNumber">The list number.</param>
            <param name="enumType">Type of the enum.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Public constructor which stores the given values ...
            </summary>
            <param name="xmlPath">The XML path.</param>
            <param name="dtoName">Name of the dto.</param>
            <param name="listNumber">The list number.</param>
            <param name="enumType">Type of the enum.</param>
            <param name="defaultValue">The default value.</param>
            <param name="replaceValue">The replace value.</param>
            <param name="replaceToValue">The replace to value.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.GetKey">
            <summary>
            Return a unique key based on the class' values
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.ConvertToDestinationType(System.Type,System.String)">
            <summary>
            Converts this value to the type of the entitie's destination type
            </summary>
            <param name="destinationType">Type of the destination.</param>
            <param name="valueToConvert">The valueToConvert.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.DoAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Must be overridden to handle the incoming xml nodes
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
            <param name="documentReader">The document reader.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.DoEndAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Must be overridden to handle the outgoing xml nodes
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.ClearAction">
            <summary>
            This is called immediately before somebody will use class
            We need this to allow stateful actions, while the action list
            still is being cached ...
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.CreatePersistentEntity(System.Type)">
            <summary>
            Creates the persistent entity.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.XmlPath">
            <summary>
            Returns the xml field for this action
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.DtoName">
            <summary>
            Return the dto's name for this action
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.EnumType">
            <summary>
            Return the name of the enum used for the conversion
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.ListNumber">
            <summary>
            The list's number to which this action belongs to
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.InstanceClassName">
            <summary>
            Returns the class name on which instnace this action supposed to be run
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.DefaultValue">
            <summary>
            Default value for XML field
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.ReplaceValue">
            <summary>
            XML field replace property
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction.ReplaceToValue">
            <summary>
            XML field replace-to property
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.BulkAction.#ctor(System.String,System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="xmlPath"></param>
            <param name="dtoName"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.BulkAction.DoAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Do the 'DoAction'
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
            <param name="documentReader"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.BulkAction.DoEndAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Do the 'EndAction'
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.BulkAction.ClearAction">
            <summary>
            Clear the action
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ConstantAction">
            <summary>
            Constant Shredder Action
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ConstantAction.value_DOCUMENTGUID">
            <summary>
            When this is specified in the constant value
            the DocumentIO's ID field will be used to populate
            the constant's value
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ConstantAction.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Public constructor for this constant action
            </summary>
            <param name="dtoName">Name of the dto.</param>
            <param name="constantValue">The constant value.</param>
            <param name="listNumber">The list number.</param>
            <param name="constantCount">The constant count.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ConstantAction.ClearAction">
            <summary>
            Clears the current action
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ConstantAction.DoAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Do the action for this constant action
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
            <param name="documentReader"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ConstantAction.DoEndAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Do the end action for this action type
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ConstantAction.GetKey">
            <summary>
            Constant actions will have a different key
            </summary>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ConstantAction.ConstantValue">
            <summary>
            The constant value
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ExternalAction">
            <summary>
            Extenral action.
            Use to shred value from another subpath
            than current entity have
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.PropertyAction">
            <summary>
            Property action
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.PropertyAction.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Public constructor for property action
            </summary>
            <param name="xmlPath">The XML path.</param>
            <param name="dtoName">Name of the dto.</param>
            <param name="listNumber">The list number.</param>
            <param name="enumType">Type of the enum.</param>
            <param name="defaultValue">The default value.</param>
            <param name="replaceValue">The replace value.</param>
            <param name="replaceToValue">The replace to value.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.PropertyAction.DoAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Do the action associated with this property action
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
            <param name="documentReader"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.PropertyAction.ClearAction">
            <summary>
            Clears the current action
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.PropertyAction.DoEndAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Do the end action for this action type
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.PropertyAction.ParseValueFromXml(TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Read property value from xml
            and parse it.
            </summary>
            <param name="documentReader">The document reader.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.PropertyAction.SetValue(System.Object,System.String)">
            <summary>
            Set correspoding property value
            </summary>
            <param name="value"></param>
            <param name="entityInstance"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ExternalAction.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Public constructor for external property action
            </summary>
            <param name="xmlPath">The XML path.</param>
            <param name="dtoName">Name of the dto.</param>
            <param name="listNumber">The list number.</param>
            <param name="enumType">Type of the enum.</param>
            <param name="extPath">The ext path.</param>
            <param name="defaultValue">The default value.</param>
            <param name="replaceValue">The replace value.</param>
            <param name="replaceToValue">The replace to value.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ExternalAction.DoAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Do the action associated with this property action
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
            <param name="documentReader"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ExternalAction.DoEndAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Do the end action for this action type
            </summary>
            <param name="shredderState"></param>
            <param name="daService"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ExternalAction.ClearAction">
            <summary>
            Clear the action
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ListAction">
            <summary>
            List action
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ListAction.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Public constructor for this list action
            </summary>
            <param name="xmlPath">The XML path.</param>
            <param name="dtoName">Name of the dto.</param>
            <param name="listCount">The list count.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ListAction.ClearAction">
            <summary>
            Clears the current action
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ListAction.DoEndAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Do the end action for this action type
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ListAction.DoAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Do the action for this list action
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
            <param name="documentReader"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ListNewItemAction">
            <summary>
            Starts a new element for the lists
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ListNewItemAction.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Public constructor for the list new item creator action
            with support of bulk Handler
            </summary>
            <param name="xmlPath">The XML path.</param>
            <param name="dtoName">Name of the dto.</param>
            <param name="listCount">The list count.</param>
            <param name="itemNode">The item node.</param>
            <param name="className">Name of the class.</param>
            <param name="bulkHandler">The bulk handler.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ListNewItemAction.ClearAction">
            <summary>
            Clears the current action
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ListNewItemAction.DoAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Create a new list element and fill this element with the constants
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
            <param name="documentReader"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ListNewItemAction.DoEndAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Execute the end action for this list new item action ...
            </summary>
            <param name="shredderState"></param>
            <param name="daService"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ListNewItemAction.GetKey">
            <summary>
            Returns a different key for the list new item creator action
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.OneToMany">
            <summary>
            Keeps information on the one-to-many relationships
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.OneToMany.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="xmlPath">The XML path.</param>
            <param name="dtoName">Name of the dto.</param>
            <param name="listCount">The list count.</param>
            <param name="className">Name of the class.</param>
            <param name="primaryKey">The primary key.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.SubClassAction">
            <summary>
            Implements action for the 'many-to-one' shredder element
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.SubClassAction.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="xmlPath">The XML path.</param>
            <param name="dtoName">Name of the dto.</param>
            <param name="listCount">The list count.</param>
            <param name="className">Name of the class.</param>
            <param name="primaryKey">The primary key.</param>
            <param name="bulkHandler">The bulk handler.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.SubClassAction.ClearAction">
            <summary>
            Clears the current action
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.SubClassAction.DoAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Creates the class specified, and puts it on the stack
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
            <param name="documentReader"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.SubClassAction.DoEndAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Saves immediately the specified class, and set's the parent's foreign key to
            the new primary key
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.XMLIslandAction">
            <summary>
            XMLIsland shredding map
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.XMLIslandAction.#ctor(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="xmlPath"></param>
            <param name="dtoName"></param>
            <param name="listCount"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.XMLIslandAction.ClearAction">
            <summary>
            Clears the current action
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.XMLIslandAction.DoAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Call the internal action
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
            <param name="documentReader"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.XMLIslandAction.DoAction(TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Additional action ...
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.XMLIslandAction.DoEndAction(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Writes the xmlIsland to the specified DTO, and deletes the
            xmlIsland builder
            </summary>
            <param name="shredderState">State of the shredder.</param>
            <param name="daService">The da service.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.XMLIslandAction.GetKey">
            <summary>
            Returns the key without the trailing slash character
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder">
            <summary>
            Performs shredding of the incoming documents
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IDocumentShredder">
            <summary>
            Base interface for Document Shredder
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IDocumentShredder.Process(System.String,System.String,TRR.O2I.Common.Core.DocumentType,System.String)">
            <summary>
            Process with incoming external data
            </summary>
            <param name="uniqueIdentifier">Unique identifier, it should be Guid.New if identifier not present</param>
            <param name="documentContent">Content to parse</param>
            <param name="documentType">Document Type</param>
            <param name="bizDocID"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IDocumentShredder.Shred(System.String,TRR.O2I.Common.Core.DocumentType,System.String,TRR.O2I.Common.Core.XMLDocumentParser,TRR.O2I.Common.Core.Logging.DocumentInfo,System.String)">
            <summary>
            Shreds the specified document content.
            </summary>
            <param name="documentContent">Content of the document.</param>
            <param name="documentType">Type of the document.</param>
            <param name="uniqueIdentifier">The unique identifier.</param>
            <param name="parser">The parser.</param>
            <param name="documentInfo">The document info.</param>
            <param name="bizDocID"></param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.IDocumentShredder.LastProcessedDocumentId">
            <summary>
            Gets or sets the last processed document id.
            </summary>
            <value>The last processed document id.</value>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder.TRR#O2I#BusinessLogic#Services#IDocumentShredder#Process(System.String,System.String,TRR.O2I.Common.Core.DocumentType,System.String)">
            <summary>
            Process with incoming external data
            </summary>
            <param name="uniqueIdentifier">Unique identifier, it should be Guid.New if identifier not present</param>
            <param name="documentContent">Content to parse</param>
            <param name="documentType">Document Type</param>
            <param name="bizDocID"></param>
            <returns>processed document id</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder.TRR#O2I#BusinessLogic#Services#IOQueue#IQueueItemProcessor#Process(TRR.O2I.DataAccess.Entities.DocumentIO)">
            <summary>
            The main method which reads the documents from the table, and calls 
            the shredder for each of them....
            
            Throws QueueItemProcessingException if processing filed.
            </summary>
            <param name="item">Document item to process.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder.TRR#O2I#BusinessLogic#Services#IDocumentShredder#Shred(System.String,TRR.O2I.Common.Core.DocumentType,System.String,TRR.O2I.Common.Core.XMLDocumentParser,TRR.O2I.Common.Core.Logging.DocumentInfo,System.String)">
            <summary>
            Shred the given xmlDocument using the shredding map defined by the <c>documentType</c>
            </summary>
            <param name="documentContent">Contains the xml document needed to be shred</param>
            <param name="documentType">The document type of the xml document</param>
            <param name="uniqueIdentifier">The unique identifier.</param>
            <param name="parser">The parser.</param>
            <param name="documentInfo">The document info.</param>
            <param name="bizDocID"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder.GetExtendedDetails(TRR.O2I.Common.Exceptions.ApplicationBaseException)">
            <summary>
            Gets the details from all exceptions in stack trace in reverced order.
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder.LastProcessedDocumentId">
            <summary>
            Gets or sets the last processed document id.
            </summary>
            <value>The last processed document id.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.DuplicatingDictionary">
            <summary>
            A Hashtable implementation where inserting with duplicate key
            does not throw an exception but creates for that key an array
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.DuplicatingDictionary.Add(System.String,TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="shredderAction">The shredder action.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.DuplicatingDictionary.GetActionsByPrefix(System.String)">
            <summary>
            Gets the actions by prefix.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.DuplicatingDictionary.GetActionsByKey(System.String)">
            <summary>
            Gets the action by key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.DuplicatingDictionary.GetActions">
            <summary>
            Gets the actions.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.EntityWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.AfterReadEventHandler">
            <summary>
            Defines the delegate for the EventbaseXMLReader.OnAfterRead event
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.EventBasedXMLReader">
            <summary>
            Simple override of the XmlTextReader class, to provide events ...
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EventBasedXMLReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
            <summary>
            Public constructor
            </summary>
            <param name="input"></param>
            <param name="nodeType"></param>
            <param name="parserContext"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.EventBasedXMLReader.Read">
            <summary>
            Call the base Read() method, then fire the OnAfterRead event
            </summary>
            <returns></returns>
        </member>
        <member name="E:TRR.O2I.BusinessLogic.Services.EventBasedXMLReader.OnAfterRead">
            <summary>
            Fired when a read operation occurs
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.EventBasedXMLReader.Path">
            <summary>
            Current Xml Path
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Exceptions.CABadPOLineReferenceException">
            <summary>
            CA Line has a bad PO Line reference
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Exceptions.CABadPOLineReferenceException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Exceptions.CABadPOReferenceException">
            <summary>
            CA has a bad PO reference
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Exceptions.CABadPOReferenceException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.COWithoutPOException">
            <summary>
            COWithoutPO Exception
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.COWithoutPOException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DocumentShredderException">
            <summary>
            DocumentShredderError
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DocumentShredderException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
            <param name="innerException">Reference to inner exception to be enveloped.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Exceptions.DuplicateCAException">
            <summary>
            Duplicate CA was found
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Exceptions.DuplicateCAException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DuplicateGRException">
            <summary>
            Duplicate PO was found
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DuplicateGRException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DuplicateInvoiceNumberException">
            <summary>
            Duplicate PO was found
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DuplicateInvoiceNumberException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DuplicateLineItemNumberException">
            <summary>
            Duplicate LineItem was found
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DuplicateLineItemNumberException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DuplicatePOException">
            <summary>
            Duplicate PO was found
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DuplicatePOException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.GRLineWithoutPOLineException">
            <summary>
            GRLineWithoutPOLine Exception
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.GRLineWithoutPOLineException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.GRWithoutPOException">
            <summary>
            GRWithoutPO Exception
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.GRWithoutPOException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message and inner exception for enveloping.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.NoQuantityForCancellationGRException">
            <summary>
            Duplicate LineItem was found
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.NoQuantityForCancellationGRException.#ctor(System.String)">
            <summary>
            Constructs exception class given exception detail message.
            </summary>
            <param name="details">Exception detail message.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IBulkHandler">
            <summary>
            Bulk handler interface declaration
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IBulkHandler.HandleBulkValues(System.Object,System.Collections.ArrayList)">
            <summary>
            The method is called by <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder"/> before an
            entity is saved to hand
            </summary>
            <param name="entityToHandle">The entity to handle.</param>
            <param name="bulkValues">The bulk values.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.InvoiceResponseXmlParser">
            <summary>
            Parser for a invoice response
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.InvoiceResponseXmlParser.Parse(System.String)">
            <summary>
            Parses the specified XML.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow">
            <summary>
            InvoiceResponse xml row
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow"/> class.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow.InvoiceResponseNumber">
            <summary>
            Gets or sets the buyer invoice number.
            </summary>
            <value>The buyer invoice number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow.InvoiceResponseIssueDate">
            <summary>
            Gets or sets the invoice response issue date.
            </summary>
            <value>The invoice response issue date.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow.InvoiceReferenceNumber">
            <summary>
            Gets or sets the invoice reference number.
            </summary>
            <value>The invoice reference number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow.BuyerPartyIdent">
            <summary>
            Gets or sets the buyer party ident.
            </summary>
            <value>The buyer party ident.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow.SellerPartyIdent">
            <summary>
            Gets or sets the invoicing party ident.
            </summary>
            <value>The invoicing party ident.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow.InvoiceResponseCoded">
            <summary>
            Gets or sets the invoice response coded.
            </summary>
            <value>The invoice response coded.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow.InvoiceResponseCodedOther">
            <summary>
            Gets or sets the invoice response coded other.
            </summary>
            <value>The invoice response coded other.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow.BuyerPartyName">
            <summary>
            Gets or sets the name of the buyer party.
            </summary>
            <value>The name of the buyer party.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseXmlRow.Lines">
            <summary>
            Gets or sets the lines.
            Note: ListOfInvoiceResponseDetail is required by XSD schema, but application consider that it is not mandatory.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseLineXmlRow">
            <summary>
            Represents a single row for a line in Invoice Response XML
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseLineXmlRow.BuyerLineItemNum">
            <summary>
            Gets or sets the buyer line item number.
            </summary>
            <value>The buyer line item number.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseLineXmlRow.ParentItemNumber">
            <summary>
            Gets or sets parent item number
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseLineXmlRow.InvoiceResponseCoded">
            <summary>
            Gets or sets the invoice response coded.
            </summary>
            <value>The invoice response coded.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.Parsers.XmlRows.InvoiceResponseLineXmlRow.InvoiceResponseCodedOther">
            <summary>
            Gets or sets the invoice response coded other.
            </summary>
            <value>The invoice response coded other.</value>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.InvoiceResponseShredder">
            <summary>
            Shreds invoice response.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.InvoiceResponseShredder.#ctor(TRR.O2I.DataAccess.Services.IServiceManagerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.InvoiceResponseShredder"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.InvoiceResponseShredder.Shred(TRR.O2I.Common.Core.XMLDocumentParser,System.String)">
            <summary>
            Shreds the specified invoice response xml.
            </summary>
            <param name="parser">The parser.</param>
            <param name="uniqueIdentifier">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.IShredderValidator">
            <summary>
            Defines a common interface for all shredder validators.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.IShredderValidator.Validate(TRR.O2I.DataAccess.Core.IDataAccessService,System.Object[])">
            <summary>
            This method is called by <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder"/> after the 
            shredding is complete.
            </summary>
            <param name="daService"></param>
            <param name="entityToValidate"></param>
            <returns>True if validation succeeded, false otherwise</returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.IShredderValidator.DocumentGuid">
            <summary>
            Gets or sets the document GUID.
            </summary>
            <value>The document GUID.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.IShredderValidator.BizDocID">
            <summary>
            Gets or sets BizDocID.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.LineNoteBulkHandler">
            <summary>
            Combines Line Notes
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.LineNoteBulkHandler.HandleBulkValues(System.Object,System.Collections.ArrayList)">
            <summary>
            The method is called by <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder"/> before an
            entity is saved to hand 
            </summary>
            <param name="entityToHandle"></param>
            <param name="bulkValues"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.NameValuePair">
            <summary>
            Holds a pair of a name and a value
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.NameValuePair.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Services.NameValuePair"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.NameValuePair.Name">
            <summary>
            Returns the name of this bulk value
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.NameValuePair.Value">
            <summary>
            Returns the value of this bulk value
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.PartyBulkHandler">
            <summary>
            Handle the bulk values of a party entity
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.PartyBulkHandler.HandleBulkValues(System.Object,System.Collections.ArrayList)">
            <summary>
            Party bulk values handler
            </summary>
            <param name="entityToHandle"></param>
            <param name="bulkValues"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.DateBulkHandler">
            <summary>
             Bulk handler for dates coded
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.DateBulkHandler.HandleBulkValues(System.Object,System.Collections.ArrayList)">
            <summary>
            The method is called by <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder"/> before an
            entity is saved to hand
            </summary>
            <param name="entityToHandle"></param>
            <param name="bulkValues"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.SaveAsChangeOrderStrategy.GetChangeOrderToMerge(System.Int32,System.Int32,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Decide if we have to merge the change order to the last one, and if yes, 
            then return the ChangeOrder object onto which the new ChangeOrder has to be merged
            </summary>
            <param name="parentOrderId"></param>
            <param name="changeOrderId"></param>
            <param name="daService"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.SaveAsCreditAdviceStrategy.UpdateSubItems(System.Collections.IList,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Update the foreign keys of the sub line items.
            </summary>
            <param name="lines">The collection of the CreditAdvice lines which have to be updated</param>
            <param name="daService">The DataAccessService to be used when saving the line changes</param>
            <remarks>This method is used currently only durring the shredding process</remarks>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.SaveAsCreditAdviceStrategy.UpdateRelatedOrdersStatus(TRR.O2I.DataAccess.Entities.ICreditAdvice)">
            <summary>
            Updates CreditAdvice related Orders with status POStatus.CAProcessed
            </summary>
            <param name="ca">CreditAdvice to process</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.SaveAsCreditAdviceStrategy.FindCreditAdviceLine(System.Collections.IList,System.String)">
            <summary>
            Returns Credit Advice Line with specified BuyerLineItemNumber
            </summary>
            <param name="creditAdviceLines">Lines to search through</param>
            <param name="buyerLineItemNumber">Buyer Line Item Number</param>
            <returns>Line if it was found. Null otherwise</returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderHelper">
            <summary>
            Help class for just xml shredding
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderHelper.DoShred(TRR.O2I.DataAccess.Core.IDataAccessService,System.String,System.String,TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapDefinition)">
            <summary>
            Do shredding
            </summary>
            <returns>Returns main entity produced by shredding process</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderHelper.ShredXml(TRR.O2I.BusinessLogic.Services.EventBasedXMLReader,System.Object,TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Main method which reads the nodes from the xmlInputDoc, and calls the actions
            </summary>
            <param name="documentReader">The XML input doc.</param>
            <param name="aNewEntity">A new entity.</param>
            <param name="service">The service.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderHelper.ExecuteAction(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction},TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Execute
            </summary>
            <param name="actions">The actions.</param>
            <param name="service">The service.</param>
            <param name="documentReader">The document reader.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderHelper.ExecuteEndAction(System.Collections.Generic.IEnumerable{TRR.O2I.BusinessLogic.Managers.Shredding.ShredderActions.ShredderAction},TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Do the end action for the action specified ...
            </summary>
            <param name="actions">The actions.</param>
            <param name="daService">The da service.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderHelper.UpdateOneToManyRelations(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Update the relationsships
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderHelper.GetEntitiesToValidate(TRR.O2I.DataAccess.Core.Entities.Interfaces.IPersistentEntity)">
            <summary>
            Gets the entities to validate.
            </summary>
            <param name="newEntity">The new entity.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderHelper.ApplyConstants(TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState,System.Int32,TRR.O2I.DataAccess.Core.IDataAccessService,TRR.O2I.BusinessLogic.Services.EventBasedXMLReader)">
            <summary>
            Apply the constants from the current list to the instance specified ...
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState">
            <summary>
            This class holds the state information of the shredder object
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState.entityStack">
            <summary>
            The stack of the entities. On the top of the stack is the entity on
            which the current actions are performed
            </summary>		
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState.listStack">
            <summary>
            This contains the stack of the lists
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState.oneToManyHash">
            <summary>
            This will contain the entities of one to many relationships
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState.actionList">
            <summary>
            Store here all the actions mapped from the shredding map
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState.bulkItems">
            <summary>
            Contains bulk items
            </summary>
        </member>
        <member name="F:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderState.documentUniqueID">
            <summary>
            Stores the Unique identifier of the document item
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderValidatorBase">
            <summary>
            Base class for all shredder validators. Implements common logic for all of them.
            </summary>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderValidatorBase.DocumentGuid">
            <summary>
            Gets the document GUID.
            </summary>
            <value>The document GUID.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShredderValidatorBase.BizDocID">
            <summary>
            Gets or sets BizDocID
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapDefinition">
            <summary>
            Shredding map definition
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapDefinition.#ctor(TRR.O2I.BusinessLogic.Managers.Shredding.DuplicatingDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapDefinition"/> class.
            </summary>
            <param name="actionList">The action list.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapDefinition.ActionList">
            <summary>
            Gets the action list.
            </summary>
            <value>The action list.</value>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapDefinition.BusinessObjectType">
            <summary>
            Gets or sets the type of the business object.
            </summary>
            <value>The type of the business object.</value>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapParser.BuildShreddingDefinition(System.Xml.XmlNodeList,System.Int32@,System.String)">
            <summary>
            Recursive method to load the shredding map
            </summary>
            <param name="nodeList">The node list.</param>
            <param name="currentListNumber">The current list number.</param>
            <param name="parentXMLField">The parent XML field.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapParser.ResolveShorthands(System.Collections.IDictionary,System.Xml.XmlNode)">
            <summary>
            Formats a string based on the shorthands defined in the xml document
            </summary>
            <param name="shortHands">The short hands.</param>
            <param name="oneAttribute">The one attribute.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapProvider">
            <summary>
            Provides an access to O2I shredding maps
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.ShreddingMapProvider.GetShreddingMap(TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Gets the shredding map.
            </summary>
            <param name="documentType">Type of the document.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CAAccountCodeValidationRule">
            <summary>
            Initialize CreditAdvice account code with default value (string.Empty)
            if corresponding element is absent in original XML
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CAAccountCodeValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.CreditAdvice,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CABuyerIdValidationRule">
            <summary>
            Validate CA against BuyerID
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CABuyerIdValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.CreditAdvice,System.String)">
            <summary>
            Validate CA against BuyerID
            </summary>
            <param name="document">CreditAdvice document</param>
            <param name="documentGuid">document guid</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CACustomUpdateValidationRule">
            <summary>
            Apply custom updates to document.
            Set CAIssueDate to current date.
            Set version of software
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CACustomUpdateValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.CreditAdvice,System.String)">
            <summary>
            Apply custom updates to document
            </summary>
            <param name="document">Credit advice document</param>
            <param name="documentGuid">Document <c>guid</c></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CALineValidationRule">
            <summary>
            Apply tie and security logic to CA lines
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CALineValidationRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CALineValidationRule"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CALineValidationRule.#ctor(TRR.O2I.DataAccess.Services.IServiceManagerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CALineValidationRule"/> class.
            </summary>
            <param name="serviceManagerFactory">The service manager factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CALineValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.CreditAdvice,System.String)">
            <summary>
            Apply tie and security logic to CA lines
            </summary>
            <param name="document">CreditAdvice document</param>
            <param name="documentGuid">document guid</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CASellerIdValidationRule">
            <summary>
            Validate CA for valid Seller ID
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdvices.CASellerIdValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.CreditAdvice,System.String)">
            <summary>
            Validate CA for valid Seller ID
            </summary>
            <param name="document">CreditAdvice document</param>
            <param name="documentGuid">document guid</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ChangeOrderValidator">
            <summary>
            Validates the Change Order entity
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ChangeOrderValidator.Validate(TRR.O2I.DataAccess.Core.IDataAccessService,System.Object[])">
            <summary>
            Validates the entities specified in the parameter
            </summary>
            <param name="daService"></param>
            <param name="entityToValidate"></param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdviceValidationRuleFactory">
            <summary>
            CreditAdviceValidationRuleFactory implementation
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ICreditAdviceValidationRuleFactory">
            <summary>
            Base interface for CreditAdviceValidationRuleFactory
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ICreditAdviceValidationRuleFactory.CreateAccountCodeValidationRule">
            <summary>
            Creates the account code validation rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ICreditAdviceValidationRuleFactory.CreateSellerIdValidationRule(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Creates the seller id validation rule.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ICreditAdviceValidationRuleFactory.CreateBuyerIdValidationRule(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Creates the buyer id validation rule.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ICreditAdviceValidationRuleFactory.CreateUniquenessValidationRule(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Creates the uniqueness validation rule.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ICreditAdviceValidationRuleFactory.CreateLineValidationRule(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Creates the line validation rule.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ICreditAdviceValidationRuleFactory.CreateCustomUpdateValidationRule">
            <summary>
            Creates the custom update validation rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ICreditAdviceValidationRuleFactory.CreateAccountCodeUpdateRule(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Creates the account code validation rule for CAs
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdviceValidator">
            <summary>
            Performs validation of incoming CA.
            </summary>
            <remarks>
            Valid Seller TPID
            Valid Buyer TPID
            Buyer TPID, Seller TPID and CA Document No. must be unique
            Valid Document Type Name
            Valid Sender Corporation Name 
            Valid Receiver Corporation Name
            </remarks>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdviceValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdviceValidator"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdviceValidator.#ctor(TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ICreditAdviceValidationRuleFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdviceValidator"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.CreditAdviceValidator.Validate(TRR.O2I.DataAccess.Core.IDataAccessService,System.Object[])">
            <summary>
            This method is called by <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.DocumentShredder"/> after the
            shredding is complete.
            </summary>
            <param name="daService">DataAccessService object</param>
            <param name="entityToValidate">Array of entites to validate</param>
            <returns>
            True if validation succeeded, false otherwise
            </returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DocumentValidator">
            <summary>
            Validates document with using of specified document parser
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.IDocumentValidator">
            <summary>
            Validates document with using of specified document parser
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.IDocumentValidator.Validate(TRR.O2I.Common.Core.XMLDocumentParser,System.String,System.String,TRR.O2I.Common.Core.DocumentType,System.String)">
            <summary>
            Validates input with using of parser.
            </summary>
            <param name="parser">The parser.</param>
            <param name="documentUniqueId">The document unique ID.</param>
            <param name="xml">The XML.</param>
            <param name="documentType">Type of the document.</param>
            <param name="bizDocID"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DocumentValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DocumentValidator"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DocumentValidator.#ctor(TRR.O2I.Common.Core.TRUEIntegration.ITRUETRxManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DocumentValidator"/> class.
            </summary>
            <param name="trxManager">The TRX manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DocumentValidator.ApplyCustomXmlValidation(TRR.O2I.Common.Core.DocumentType,System.String)">
            <summary>
            Apply custom xml validation
            </summary>
            <param name="documentTypeId">Document type</param>
            <param name="doc">document</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DocumentValidatorExceptionRaiser">
            <summary>
            Raises exceptions acquired during Document Validation process
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.IDocumentValidatorExceptionRaiser">
            <summary>
            Raises exceptions acquired during Document Validation process
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.IDocumentValidatorExceptionRaiser.RaiseDocumentXmlInvalidException(System.String,TRR.O2I.Common.Core.XMLDocumentParser,System.Xml.XmlException,System.String)">
            <summary>
            Raises the document XML invalid exception.
            </summary>
            <param name="documentUniqueId">The document unique id.</param>
            <param name="parser">The parser.</param>
            <param name="exception">The exception.</param>
            <param name="bizDocID"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.IDocumentValidatorExceptionRaiser.RaiseXsdValidationException(System.String,System.Exception,TRR.O2I.Common.Core.XMLDocumentParser,System.String)">
            <summary>
            Raises the XSD validation exception.
            </summary>
            <param name="documentUniqueId">The document unique id.</param>
            <param name="exception">The exception.</param>
            <param name="parser">The parser.</param>
            <param name="bizDocID"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DocumentValidatorExceptionRaiser.#ctor(TRR.O2I.Common.Core.TRUEIntegration.ITRUETRxManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DocumentValidatorExceptionRaiser"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DocumentValidatorExceptionRaiser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.DocumentValidatorExceptionRaiser"/> class.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceiptValidator">
            <summary>
            Validates a GoodsReceipt entity
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceiptValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceiptValidator"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceiptValidator.#ctor(TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IValidationRuleFactory,TRR.O2I.Common.Core.DateTimeUtil.IDateTimeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceiptValidator"/> class.
            </summary>
            <param name="ruleFactory">The rule factory.</param>
            <param name="timeFactory">The time factory.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceiptValidator.Validate(TRR.O2I.DataAccess.Core.IDataAccessService,System.Object[])">
            <summary>
            Validates the goods receipt and returns the result of the validation
            </summary>
            <param name="daService"></param>
            <param name="entityToValidate"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.DuplicateGRValidationRule">
            <summary>
            Check GR for duplication
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.DuplicateGRValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.DuplicateLineItemsValidationRule">
            <summary>
            Check for duplicate line items
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.DuplicateLineItemsValidationRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.DuplicateLineItemsValidationRule"/> class.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.DuplicateLineItemsValidationRule.#ctor(TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IExceptionRaiser)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.DuplicateLineItemsValidationRule"/> class.
            </summary>
            <param name="exceptionRaiser">The exception raiser.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.DuplicateLineItemsValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ExceptionRaiser">
            <summary>
            Goods Receipt validation exception raiser
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IExceptionRaiser">
            <summary>
            Base interface for GoodsReceipt exception raiser
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IExceptionRaiser.RaiseDuplicateLineItemNumberException(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String,System.String)">
            <summary>
            Raises the duplicate line item number exception.
            </summary>
            <param name="goodsReceipt">The goods receipt.</param>
            <param name="guid">The GUID.</param>
            <param name="lineItemNumber">The line item number.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ExceptionRaiser.GetPlantId(DataAccess.Services.IServiceManager,TRR.O2I.DataAccess.Entities.GoodsReceipt)">
            <summary>
            Gets the plant id.
            </summary>
            <param name="grEntity">The gr entity.</param>
            <param name="serviceManager">The service manager.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IValidationRuleFactory">
            <summary>
            Base interface for GR ValidationRuleFactory
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IValidationRuleFactory.CreateUpdateSellerAndBuyerRule(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Creates the update seller and buyer rule.
            </summary>
            <param name="daService">The da service.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IValidationRuleFactory.CreateDuplicateGRRule(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Creates the duplicate gr rule.
            </summary>
            <param name="daService">The da service.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IValidationRuleFactory.CreateOrderReferenceRule(TRR.O2I.DataAccess.Core.IDataAccessService,System.String)">
            <summary>
            Creates the order reference rule.
            </summary>
            <param name="daService">The da service.</param>
            <param name="bizDocID"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IValidationRuleFactory.CreateOrderLineReferencesRule(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Creates the order line references rule.
            </summary>
            <param name="daService">The da service.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IValidationRuleFactory.CreateSecurityRule">
            <summary>
            Creates the security rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IValidationRuleFactory.CreateDuplicateLineItemsRule">
            <summary>
            Creates the duplicate line items rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IValidationRuleFactory.CreateStatusesAndQuantitiesRule">
            <summary>
            Creates the statuses and quantities rule.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.OrderLineReferencesValidationRule">
            <summary>
            Establishes the po line item references.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.OrderLineReferencesValidationRule.#ctor(DataAccess.Services.IServiceManager,TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.IExceptionFactory,TRR.O2I.BusinessLogic.Managers.IAlertSender)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.OrderLineReferencesValidationRule"/> class.
            </summary>
            <param name="serviceManager">The service manager.</param>
            <param name="exceptionFactory">The exception factory.</param>
            <param name="alertsSender">The alerts sender.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.OrderLineReferencesValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.OrderReferenceValidationRule">
            <summary>
            Establishes the link to purchase order.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.OrderReferenceValidationRule.#ctor(TRR.O2I.DataAccess.Core.IDataAccessService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.OrderReferenceValidationRule"/> class.
            </summary>
            <param name="daService">The da sevice.</param>
            <param name="bizDocID">BizDocID</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.OrderReferenceValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.SecurityValidationRule">
            <summary>
            Apply security update
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.SecurityValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.GoodsReceiptStatusesAndQuantitiesValidationRule">
            <summary>
            Validate GR statuses and quantities
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.GoodsReceiptStatusesAndQuantitiesValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.UpdateSellerAndBuyerValidationRule">
            <summary>
            GoodsReceipt Seller and Buyer company update rule
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.UpdateSellerAndBuyerValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.GoodsReceipt,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The document.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ValidationRuleFactory">
            <summary>
            GoodsReceipt validation rule factory
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ValidationRuleFactory.CreateUpdateSellerAndBuyerRule(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Creates the update seller and buyer rule.
            </summary>
            <param name="daService">The da service.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ValidationRuleFactory.CreateDuplicateGRRule(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Creates the duplicate gr rule.
            </summary>
            <param name="daService">The da service.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ValidationRuleFactory.CreateOrderReferenceRule(TRR.O2I.DataAccess.Core.IDataAccessService,System.String)">
            <summary>
            Creates the order reference rule.
            </summary>
            <param name="daService">The da service.</param>
            <param name="bizDocID"></param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ValidationRuleFactory.CreateOrderLineReferencesRule(TRR.O2I.DataAccess.Core.IDataAccessService)">
            <summary>
            Creates the order line references rule.
            </summary>
            <param name="daService">The da service.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ValidationRuleFactory.CreateSecurityRule">
            <summary>
            Creates the security rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ValidationRuleFactory.CreateDuplicateLineItemsRule">
            <summary>
            Creates the duplicate line items rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.GoodsReceipt.ValidationRuleFactory.CreateStatusesAndQuantitiesRule">
            <summary>
            Creates the statuses and quantities rule.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.InvoiceResponses.CorrespondingInvoiceValidationRule">
            <summary>
            CorrespondingInvoiceValidationRule
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.InvoiceResponses.CorrespondingInvoiceWasFoundValidationRule">
            <summary>
            CorrespondingInvoiceWasFoundRule
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.InvoiceResponses.InvoiceResponseAndInvoiceLinesValidationRule">
            <summary>
            InvoiceResponseAndInvoiceLinesValidationRule
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.InvoiceResponses.InvoiceResponseAndInvoiceValidationRule">
            <summary>
            InvoiceResponseAndInvoiceValidationRule
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.InvoiceResponses.InvoiceResponseLinesValidationRule">
            <summary>
            InvoiceResponseLinesValidationRule
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.IOrderLineValidationRuleFactory">
            <summary>
            Factory for providing validation rules for OrderLines
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.IOrderLineValidationRuleFactory.CreateShipmentsDetailsValidationRule">
            <summary>
            Creates the shipments details validation rule.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.OrderLineValidationRuleFactory">
            <summary>
            OrderLineValidationRuleFactory
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.OrderLineValidationRuleFactory.CreateShipmentsDetailsValidationRule">
            <summary>
            Creates the shipments details validation rule.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrderValidator">
            <summary>
            Validates the Purchase Order entity
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.PurchaseOrderValidator.Validate(TRR.O2I.DataAccess.Core.IDataAccessService,System.Object[])">
            <summary>
            Validates the Purchase Order entity
            </summary>
            <param name="daService"></param>
            <param name="entityToValidate"></param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ShipmentDetailsUpdateValidationRule">
            <summary>
            Updates ShipmentDetails
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.ShipmentDetailsUpdateValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.OrderLine,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The line.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.SubLineValidationRule">
            <summary>
            Check wheather subline has line
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.Shredding.Validators.SubLineValidationRule.ApplyToDocument(TRR.O2I.DataAccess.Entities.OrderCompositeXMLIsland,System.String)">
            <summary>
            Applies to document.
            </summary>
            <param name="document">The line.</param>
            <param name="documentGuid">The document GUID.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.SubItemCollectionDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.SubItemCollectionDescriptor.#ctor">
            
             <summary>
             Default contructor.
             </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.SubItemCollectionDescriptor.#ctor(System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:TRR.O2I.BusinessLogic.Managers.SubItemCollectionDescriptor"/> class.
            </summary>
            <param name="subItems">The sub items.</param>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Managers.SubItemCollectionDescriptor.SubItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.SupplierSettingsManager">
            <summary>
            Represents manager class for supplier settings.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.SupplierSettingsManager.Load(System.Int32)">
            <summary>
            Loads settings object for supplier with provided id.
            </summary>
            <param name="supplierId">Supplier's id.</param>
            <returns>Settings object for supplier with provided id.</returns>
            <remarks>This methods returns null if no supplier settings is found.</remarks>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.SupplierSettingsManager.Update(TRR.O2I.DataAccess.Core.Entities.SupplierSettings)">
            <summary>
            Updates provided entity in db.
            </summary>
            <param name="settings">Settings object to be saved.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.SupplierSettingsManager.Create(TRR.O2I.DataAccess.Core.Entities.SupplierSettings)">
            <summary>
            Creates provided entity in db.
            </summary>
            <param name="settings">Supplier settings object to be created in db.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.TaxesHelper">
            <summary>
            Tax handling helper.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.TaxesHelper.Calculate(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Tax,System.Decimal,System.Decimal@,System.Decimal@)">
            <summary>
            Calculates tax percent and tax amount given the tax and amount.
            </summary>
            <param name="tax"></param>
            <param name="taxableAmount"></param>
            <param name="taxPercent"></param>
            <param name="taxAmount"></param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.TaxesHelper.RecalculateTaxFields(TRR.O2I.BusinessLogic.BusinessEntity.Entities.Invoicing.IInvoicingDocumentLine,TRR.O2I.BusinessLogic.BusinessEntity.Entities.Tax)">
            <summary>
            Recalculates the tax fields.
            </summary>
            <param name="line">The line.</param>
            <param name="tax">The tax.</param>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.TaxRateHelper">
            <summary>
            Predifined TaxRates helper
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.TaxRateHelper.GetMatchedRateId(System.Collections.IList,System.Decimal)">
            <summary>
            Gets the matched rate id.
            </summary>
            <param name="rateList">The rate list.</param>
            <param name="compareToValue">The compare to value.</param>
            <returns></returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.TaxRateHelper.GetPredefinedRate(System.Int32)">
            <summary>
            Loads predefined rate object.
            </summary>
            <param name="rateId">Rate id.</param>
            <returns>Loaded rate object.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.TaxRateHelper.GetPredefinedRateValue(System.Int32)">
            <summary>
            Gets the predifined rate value.
            </summary>
            <param name="rateId">The rate id.</param>
            <returns></returns>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Services.TRIPTasksProcessingManager">
            <summary>
            Summary description for TRIPTasksProcessingManager.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TRIPTasksProcessingManager.ProcessTask(TRR.O2I.DataAccess.Entities.TRIPTask)">
            <summary>
            Process task from queue.
            </summary>
            <remarks>This method updates task entity in database automaticaly.</remarks>
            <param name="task">Target task to process.</param>
            <returns>Task processing status result.</returns>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TRIPTasksProcessingManager.AddTask(System.String,System.String,System.Int32,TRR.O2I.Common.Core.DocumentType,System.String)">
            <summary>
            Stores task into queue.
            </summary>
            <param name="taskName">Declarative task name.</param>
            <param name="tripName">Target TRIP name.</param>
            <param name="documentId">Target document PK data.</param>
            <param name="documentType">Target document type.</param>
            <param name="taskProcessor">Task processor handler assembly qualified name.
            Target class must implement <see cref="T:TRR.O2I.Common.Core.ITRIPTaskProcesor"/> interface.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TRIPTasksProcessingManager.ProcessTasksQueue">
            <summary>
            Process all tasks in queue.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TRIPTasksProcessingManager.RemoveTask(System.String,System.Int32,TRR.O2I.Common.Core.DocumentType)">
            <summary>
            Removes task from queue.
            </summary>
            <param name="tripName">Target TRIP name.</param>
            <param name="documentId">Target document PK data.</param>
            <param name="documentType">Target document type.</param>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TRIPTasksProcessingManager.Execute">
            <summary>
            Called by IntegrationService.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Services.TRIPTasksProcessingManager.CreateTask(System.Int32,TRR.O2I.Common.Core.DocumentType,TRR.O2I.Common.Core.ITRIPConfiguration,System.String,System.String)">
            <summary>
            Creates the task.
            </summary>
            <param name="documentId">The document id.</param>
            <param name="documentType">Type of the document.</param>
            <param name="trip">The trip.</param>
            <param name="taskProcessor">The task processor.</param>
            <param name="taskName">Name of the task.</param>
            <returns></returns>
        </member>
        <member name="P:TRR.O2I.BusinessLogic.Services.TRIPTasksProcessingManager.Instance">
            <summary>
            Static accessor to the class instance.
            </summary>
        </member>
        <member name="T:TRR.O2I.BusinessLogic.Managers.DefaultTax.ValueAddedTypeTaxStrategy">
            <summary>
            France, Germany, Netherlands and other.
            </summary>
        </member>
        <member name="M:TRR.O2I.BusinessLogic.Managers.DefaultTax.ValueAddedTypeTaxStrategy.ShallDefaultTaxBeApplied(TRR.O2I.BusinessLogic.BusinessEntity.BuyerSettingsBusinessLogic.IBuyerSettings,TRR.O2I.BusinessLogic.BusinessEntity.Business.OrderTypeKey)">
            <summary>
            Gets a value indicating whether default tax should be applied on invoice lines while invoice is being created based on buyer settings.
            </summary>
            <value><c>true</c> if default tax should be applied on invoice lines while invoice is being created; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
