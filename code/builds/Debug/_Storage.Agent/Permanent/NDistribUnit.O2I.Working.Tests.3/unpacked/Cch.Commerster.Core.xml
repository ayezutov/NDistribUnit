<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cch.Commerster.Core</name>
    </assembly>
    <members>
        <member name="T:Cch.Commerster.Core.ZipCodeValidationPair">
            <summary>
            struct that used to store regular Expression and error message LabelId pair fpr zipCode validation
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.ZipCodeValidationPair.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="labelId"></param>
            <param name="zipCodeValidationRegularExpressionString"></param>
        </member>
        <member name="T:Cch.Commerster.Core.FaxLengthValidationPair">
            <summary>
            struct that used to store regular Expression and error message LabelId pair for fax/phone length validation
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.FaxLengthValidationPair.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="labelId"></param>
            <param name="FaxLengthValidationRegularExpressionString"></param>
        </member>
        <member name="T:Cch.Commerster.Core.CountryInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Entity.LookupEntity`2">
            <summary>
            Abstracy implementation of a Lookup Entity
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TDal"></typeparam>
        </member>
        <member name="F:Cch.Commerster.Core.Entity.LookupEntity`2.rownum">
            <summary>
            rownum
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Entity.LookupEntity`2.shortName">
            <summary>
            shortName
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Entity.LookupEntity`2.description">
            <summary>
            description
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Entity.LookupEntity`2.labelId">
            <summary>
            labelId
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Entity.LookupEntity`2.isInternal">
            <summary>
            Is Internal Visibility only
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Entity.LookupEntity`2.id">
            <summary>
            id
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Entity.LookupEntity`2.SetThreadCache(System.Boolean)">
            <summary>
            Sets caching policy for the current Thread
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Entity.LookupEntity`2.GetAll">
            <summary>
            Returns a list of all values available
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Entity.LookupEntity`2.Get(System.String)">
            <summary>
            Returns an entity by a given shortName
            </summary>
            <param name="shortName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Entity.LookupEntity`2.GetBy(System.String)">
            <summary>
            Returns an entity by a given description
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Entity.LookupEntity`2.Get(System.Int32)">
            <summary>
            Returns an entity by a given Id
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Entity.LookupEntity`2.Get(`0)">
            <summary>
            Returns a full entity by a given partially filled instance
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.Entity.LookupEntity`2.Rownum">
            <summary>
            Rownum
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Entity.LookupEntity`2.ShortName">
            <summary>
            Short Name aka Code/SysName
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Entity.LookupEntity`2.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Entity.LookupEntity`2.LabelId">
            <summary>
            Label Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Entity.LookupEntity`2.IsInternal">
            <summary>
            Is Internal Visible only
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Entity.LookupEntity`2.TranslatedDescription">
            <summary>
            Localized Description if available
            </summary>
            <remarks>Returns Description if localization is not available</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.Entity.LookupEntity`2.Id">
            <summary>
            Unique Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.CountryInfo.CountryOtherId">
            <summary>
            "Other" Country Id
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Cch.Commerster.Core.CountryInfo.ZipCodeRegularExpressionList" -->
        <!-- Badly formed XML comment ignored for member "F:Cch.Commerster.Core.CountryInfo.FaxLengthRegularExpressionList" -->
        <member name="F:Cch.Commerster.Core.CountryInfo.CountryOther">
            <summary>
            Other Country
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.CountryInfo.DialingCode">
            <summary>
            Country Dialing Code
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.CountryInfo.RegionId">
            <summary>
            Region Id
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.RegionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.RegionInfo.RegionOther">
            <summary>
            "Other" Region instance
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.RegionInfo.RegionOtherId">
            <summary>
            Other Regon Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.RegionInfo.rownum">
            <summary>
            Rownum
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.RegionInfo.Get(System.Int32)">
            <summary>
            Retrives RegionInfo by Region ID
            </summary>
            <param name="regionId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.RegionInfo.GetAll">
            <summary>
            Returns list of all Regions
            </summary>
            <returns></returns>
            <remarks>List is cached by DAL</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.RegionInfo.Id">
            <summary>
            Region Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.RegionInfo.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.StateInfo">
            <summary>
            Holds Postal State Information
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.StateInfo.StateOther">
            <summary>
            "Other" state
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.StateInfo.StateOtherId">
            <summary>
            "Other" state Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.StateInfo.rownum">
            <summary>
            Rownum
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.StateInfo.#ctor(System.String)">
            <summary>
            Constructs a StateInfo object with a given full name (non US state)
            </summary>
            <param name="otherStateName"></param>
        </member>
        <member name="F:Cch.Commerster.Core.StateInfo.shortName">
            <summary>
            The short name.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.StateInfo.Get(System.Int32)">
            <summary>
            Retrives StateInfo by State ID
            </summary>
            <param name="stateId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.StateInfo.Get(System.String)">
            <summary>
            Retrives StateInfo by State Abbreviation
            </summary>
            <param name="shortName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.StateInfo.GetAll">
            <summary>
            Returns list of all US states
            </summary>
            <returns></returns>
            <remarks>List is cached by DAL</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.StateInfo.Id">
            <summary>
            Initialized to 1 (means it is not a US state, i.e. Other)
            </summary>
            <remarks>StateId has to be set to the StateInfo.StateOther in order to update FullName proeprty</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.StateInfo.FullName">
            <summary>
            Property to get/set State's FullName (long name)
            </summary>
            <remarks>Can be set only if StateId == StateInfo.StateOther</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.StateInfo.ShortName">
            <summary>
            Property to get State's ShortName
            </summary>
            <remarks>if StateId == StateInfo.StateOther the null value is always returned</remarks>
        </member>
        <member name="T:Cch.Commerster.Core.AddressInfo">
            <summary>
            Holds Address Information
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.AddressInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.AddressInfo.#ctor(System.String,System.String,System.String,System.String,Cch.Commerster.Core.RegionInfo,Cch.Commerster.Core.CountryInfo,Cch.Commerster.Core.StateInfo)">
            <summary>
            "Chunky-call" constructor
            </summary>
            <param name="address1"></param>
            <param name="address2"></param>
            <param name="city"></param>
            <param name="zipCode"></param>
            <param name="region"></param>
            <param name="country"></param>
            <param name="state"></param>
        </member>
        <member name="P:Cch.Commerster.Core.AddressInfo.Empty">
            <summary>
            Empty Address Info
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.AddressInfo.Address1">
            <summary>
            Address1
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.AddressInfo.Address2">
            <summary>
            Address2
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.AddressInfo.City">
            <summary>
            City
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.AddressInfo.ZipCode">
            <summary>
            ZIP Code
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.AddressInfo.State">
            <summary>
            State
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.AddressInfo.Region">
            <summary>
            Region
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.AddressInfo.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Attachment.Attachment.ContentBody">
            <summary>
            Content Body is lazy initialized
            </summary>		
        </member>
        <member name="T:Cch.Commerster.Core.Caching.CacheCategory">
            <summary>
            Defines whether to access itmes build on Commerster or framework items
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Caching.CacheCategory.App">
            <summary>
            Application item
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Caching.CacheCategory.Core">
            <summary>
            Core item
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Caching.CacheCategory.SessionKey">
            <summary>
            Use Session Key
            <remarks>Standard 16 bytes long session IDs are generated using RNGCryptoServiceProvider. Might want to override SessionIDManager to use GUID for session id</remarks>
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Caching.Cache">
            <summary>
            Wrapper for System.Web.Caching.Cache object
            </summary>
            <remarks>Advised to use only in the Data Access Layer objects</remarks>
        </member>
        <member name="F:Cch.Commerster.Core.Caching.Cache.CacheDurationLong">
            <summary>
            45 minutes cache
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Caching.Cache.CacheDurationMedium">
            <summary>
            15 minutes cache
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Caching.Cache.CacheDurationShort">
            <summary>
            5 minutes cache
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Caching.Cache.CacheDurationSession">
            <summary>
            Equals to Session Timeout
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Caching.Cache.NoSlidingExpiration">
            <summary>
            Controlls expiration sliding.
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Caching.Cache.NoAbsoluteExpiration">
            <summary>
            Controls expiration time.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Caching.Cache.RemoveSessionKeyItems">
            <summary>
            Removes all items added with CacheCategory.SessionKey for a current session
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Caching.Cache.RemoveSessionKeyItems(System.String)">
            <summary>
            Removes all items added with CacheCategory.SessionKey for a given session Id
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Caching.Cache.Remove(Cch.Commerster.Core.Caching.CacheCategory,System.String)">
            <summary>
            Removes an item from Cache
            </summary>
            <param name="cacheCategory"></param>
            <param name="key"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Caching.Cache.Add(Cch.Commerster.Core.Caching.CacheCategory,System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            Allows to Add/Replace an item to cache with a specified dependency
            </summary>
            <param name="cacheCategory"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dependency"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Caching.Cache.Add(Cch.Commerster.Core.Caching.CacheCategory,System.String,System.Object,System.DateTime)">
            <summary>
            Allows to Add/Replace an item to cache with a specified Absolute Expiration
            </summary>
            <param name="cacheCategory"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="absoluteExpiration"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Caching.Cache.Add(Cch.Commerster.Core.Caching.CacheCategory,System.String,System.Object,System.TimeSpan)">
            <summary>
            Allows to Add an item to cache with a specified sliding expiration value
            </summary>
            <param name="cacheCategory"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="slidingExpiration"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Caching.Cache.Add(Cch.Commerster.Core.Caching.CacheCategory,System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            Allows to Add/Replace an item to cache with a specified dependency, sliding/absolute expiration value, priority, remove callback
            </summary>
            <param name="cacheCategory"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dependency"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
            <param name="priority"></param>
            <param name="removeCallback"></param>
            <remarks>Available for the complicated caching scenarios</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.Caching.Cache.GetEntityById``1(Cch.Commerster.Interfaces.GetMethodTransactionalDelegate{``0},System.Int32,System.TimeSpan,System.Data.IDbTransaction)">
            <summary>
            Allows to call any object which supports public static T Get(int id) signature
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getMethod"></param>
            <param name="id"></param>
            <param name="cacheDuration"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Caching.Cache.GetEntityById``1(Cch.Commerster.Interfaces.GetMethodDelegate{``0},System.Int32,System.TimeSpan)">
            <summary>
            Allows to call any object which supports public static T Get(int id) signature
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getMethod"></param>
            <param name="id"></param>
            <param name="cacheDuration">cache duration</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cch.Commerster.Core.Caching.Cache.RemoveEntityById``1(System.Int32)" -->
        <member name="M:Cch.Commerster.Core.Caching.Cache.GetEntityById``1(Cch.Commerster.Interfaces.GetMethodDelegate{``0},System.Int32)">
            <summary>
            Allows to call any object which supports public static T Get(int id) signature
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getMethod"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Caching.Cache.GetSlidingValue(Cch.Commerster.Core.Caching.CacheExpirationAttribute)">
            <summary>
            Returns a sliding expiration value for a given attribute
            </summary>
            <param name="attribute"></param>
            <remarks>throws <see cref="T:System.ArgumentException"/> if value cannot be obtained</remarks>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.Caching.Cache.Items">
            <summary>
            Get
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Caching.Cache.ItemsCollection">
            <summary>
            A collection of the itmes in the cache
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Caching.Cache.ItemsCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Caching.Cache.ItemsCollection.Item(Cch.Commerster.Core.Caching.CacheCategory,System.String)">
            <summary>
            Sets/gets an item in a cache
            </summary>
            <param name="cacheCategory"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.Configuration">
            <summary>
            Helper class for standard .NET Configuration Manager
            </summary>
            <remarks>
            Either this class or ConfigurationManager can be used to get config data
            </remarks>
        </member>
        <member name="P:Cch.Commerster.Core.Configuration.ConnectionStrings">
            <summary>
            Property whish allows to read a connection string info by given a specific name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Configuration.BaseWebUrl">
            <summary>
            Returns the http domain (http[s]://host[:port]/virtdir/)
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Configuration.CurrentApplicationId">
            <summary>
            Returns a current application Id based on the executing page
            </summary>
            <remarks>Returns null if Application can't be determined</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.Configuration.CurrentHelpLink">
            <summary>
            Returns a current helpLink based on the executing page
            </summary>
            <remarks>Returns default PDF help file if page can't be determined</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.Configuration.PasswordEditUrl">
            <summary>
            Url for PasswordEdit page
            </summary>
            <remarks>Combine BaseWebUrl with PasswordEditUrl to get a proper link</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.Configuration.UnlockAccountUrl">
            <summary>
            Url for UnlockAccount page
            </summary>
            <remarks>Combine BaseWebUrl with UnlockAccountUrl to get a proper link</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.Configuration.SchemasUrl">
            <summary>
            Schemas Root Url
            </summary>
            <remarks>i.e. http://localhost/main/schemas/</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.Configuration.DefaultPage">
            <summary>
            Default Page (~ operator path)
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Configuration.ConnectionStringCollection">
            <summary>
            Provides and indexer to get a connection info from the config file connectionStrings element
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Configuration.ConnectionStringCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Configuration.ConnectionStringCollection.Mds">
            <summary>
            Internal only member to provide all framework with the connection string to MDS database
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Configuration.ConnectionStringCollection.Item(System.String)">
            <summary>
            Access method.
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:Cch.Commerster.Core.ConnectionStringException"></exception>
        </member>
        <member name="T:Cch.Commerster.Core.PageBlocksSection">
            <summary>
            Configuration section handler for page blocks
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.PageHelpLink">
            <summary>
            PageHelpLink get the help link of a given page from the PageHelpLink.config file
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.PageHelpLink.GetHelpLink(System.String)">
            <summary>
            Get the help link of a given page from the PageHelpLink.config file
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Currency">
            <summary>
            Class which provides means to work with currencies
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Currency.UsDollar">
            <summary>
            USD currency
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Currency.Euro">
            <summary>
            EURO currency
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Currency.FullName">
            <summary>
            Currency Full Name (i.e. U.S. Dollar)
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Database.DalFactory">
            <summary>
            DalFactory provides a current implementation instance of the given Dal interface
            </summary>
            <example>This is a sample call to DalFactory
            <code><![CDATA[
            	DalFactory.GetInstance<IUserDal>().Save(...);
            ]]></code>
            </example>
        </member>
        <member name="M:Cch.Commerster.Core.Database.DalFactory.GetInstance``1">
            <summary>
            Returns current Instance of the specific Dal Implemenation
            </summary>
            <exception cref="T:Cch.Commerster.Core.DalNotFoundException"></exception>
        </member>
        <member name="M:Cch.Commerster.Core.Database.DalFactory.Register``1(System.String,System.String)">
            <summary>
            Allows to register a Dal Interface at run-time
            </summary>
            <typeparam name="T">Dal Interface</typeparam>
            <param name="assemblyName">Assembly Name</param>
            <param name="className">Class Name</param>
        </member>
        <member name="T:Cch.Commerster.Core.Database.QueryBuilder">
            <summary>
            Helper class to build queries
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Database.QueryBuilder.stringHashCode">
            <summary>
            String Hash Code
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Database.QueryBuilder.intHashCode">
            <summary>
            Int Hash Code
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Database.QueryBuilder.dtHashCode">
            <summary>
            Date time hash code
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Database.QueryBuilder.boolHashCode">
            <summary>
            Bool hash code
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Database.QueryBuilder.stringArrayHashCode">
            <summary>
            string[] hash code
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Database.QueryBuilder.intArrayHashCode">
            <summary>
            int[] hash code
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Database.QueryBuilder.dtArrayHashCode">
            <summary>
            DateTime[] hash code
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Database.QueryBuilder.boolArrayHashCode">
            <summary>
            bool[] hash code
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Database.QueryBuilder.duplicateParamSeqNumber">
            <summary>
            Holds a sequence number for a duplicate parameter
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Database.QueryBuilder.GetParameterName(System.Data.Common.DbCommand,System.String)">
            <summary>
            Returns a parameter name based on a given table field name
            </summary>
            <param name="command"></param>
            <param name="tableFieldName"></param>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.Database.DbHelper">
            <summary>
            Public utility class for all DB related operations which are not specific to a database provider
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Database.DbHelper.GetNullable``1(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Return Nullable value. The T should always be Nullable, i.e. string, int?, DateTime?
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Database.DbHelper.GetNullable``1(System.Data.Common.DbCommand,System.String)">
            <summary>
            Return Nullable value. The T should always be Nullable, i.e. string, int?, DateTime?
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.PaginationControl">
            <summary>
            Defines pagination control
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.PaginationControl.TotalRecordsName">
            <summary>
            Total Records Name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.PaginationControl.NoPaging">
            <summary>
             No Paging needed
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.PaginationControl.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="firstPage">The first page.</param>
            <param name="pagesRequested">The pages requested.</param>
            <param name="recordsPerPage">The records per page.</param>
        </member>
        <member name="M:Cch.Commerster.Core.PaginationControl.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="firstPage"></param>
            <param name="pagesRequested"></param>
            <param name="recordsPerPage"></param>
            <param name="readTotalRecords"></param>
        </member>
        <member name="P:Cch.Commerster.Core.PaginationControl.FirstPage">
            <summary>
            First page requested
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.PaginationControl.PagesRequested">
            <summary>
            Number of pages to retrieve
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.PaginationControl.RecordsPerPage">
            <summary>
            Defines records count per page
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.PaginationControl.TotalRecords">
            <summary>
            Total number of records will be returned
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.PaginationControl.ReadTotalRecords">
            <summary>
            Indicates wether total count is returned
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.SearchColumnInfo`2">
            <summary>
            Defines column information in the search methods
            </summary>
            <typeparam name="T">Column from enum. Each class provides it's own search enum</typeparam>
            <typeparam name="V">Value type</typeparam>
        </member>
        <member name="M:Cch.Commerster.Core.SearchColumnInfo`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Cch.Commerster.Core.SearchColumnInfo`2"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Cch.Commerster.Core.SearchColumnInfo`2.#ctor(`0,Cch.Commerster.Core.SortOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Cch.Commerster.Core.SearchColumnInfo`2"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="sorting">The sorting.</param>
        </member>
        <member name="M:Cch.Commerster.Core.SearchColumnInfo`2.#ctor(`0,`1,Cch.Commerster.Core.MatchMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cch.Commerster.Core.SearchColumnInfo`2"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="matching">The matching.</param>
        </member>
        <member name="M:Cch.Commerster.Core.SearchColumnInfo`2.#ctor(`0,`1,Cch.Commerster.Core.MatchMethod,Cch.Commerster.Core.SortOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Cch.Commerster.Core.SearchColumnInfo`2"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="matching">The matching.</param>
            <param name="sorting">The sorting.</param>
        </member>
        <member name="F:Cch.Commerster.Core.SearchColumnInfo`2.columnName">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.SearchColumnInfo`2.columnValue">
            <summary>
            Column value
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.SearchColumnInfo`2.matching">
            <summary>
            Matching
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.SearchColumnInfo`2.sorting">
            <summary>
            Sorting
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.SearchColumnInfo`2.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:Cch.Commerster.Core.SearchColumnInfo`2.ColumnValue">
            <summary>
            Gets the column value.
            </summary>
            <value>The column value.</value>
        </member>
        <member name="P:Cch.Commerster.Core.SearchColumnInfo`2.Matching">
            <summary>
            Gets the matching.
            </summary>
            <value>The matching.</value>
        </member>
        <member name="P:Cch.Commerster.Core.SearchColumnInfo`2.Sorting">
            <summary>
            Gets the sorting.
            </summary>
            <value>The sorting.</value>
        </member>
        <member name="P:Cch.Commerster.Core.SearchColumnInfo`2.Cch#Commerster#Core#ISearchColumn#IsValueBased">
            <summary>
            Returns true if matching method is based on a value
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.Database.SqlDalTransaction">
            <summary>
            Helper class for DALs accepting IDbTransaction parameter
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDalTransaction.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDalTransaction.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDalTransaction.Dispose">
            <summary>
            IDisposable.Dispose()
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Database.SqlDbHelper">
            <summary>
            Class to prepare and Execute database actions.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ToXml``1(``0[])">
            <summary>
            Converts an array to the XML (Windows-1252 encoding) to be passed to the stored procedures within commerster
            </summary>
            <typeparam name="T">T can be any primitive type, DateTime(UTC) or a string</typeparam>
            <param name="inputArray"></param>
            <returns></returns>
            <remarks>Format of the output xml is &lt;?xml version="1.0" encoding="Windows-1252"?&gt;&lt;Root&gt;&lt;R v="" /&gt;&lt;R v="" /&gt;&lt;/Root&gt;</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ToXml16``1(``0[])">
            <summary>
            Converts an array to the XML (UTF-16 encoding) to be passed to the stored procedures within commerster.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputArray"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ToXml16(System.String[][])">
            <summary>
            Converts a jagged string array into XML (UTF-16 encoding)
            </summary>
            <param name="inputArray"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ToXml16``1(``0[][])">
            <summary>
            Converts a jagged array into XML (UTF-16 encoding)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputArray"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.AddPaginationParams(System.Data.SqlClient.SqlCommand,Cch.Commerster.Core.IPaginationControl)">
            <summary>
            Appends pagination-specific parameters (command has to follow Framework's parameter naming)
            </summary>
            <param name="cmd"></param>
            <param name="paginationControl"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ExecuteReader(System.Data.SqlClient.SqlCommand,System.Data.CommandBehavior,System.Data.CommandType)">
            <summary>
            Opens a connection assosiated with the command and executes it
            </summary>
            <param name="command">Constructed SqlDbCommand object</param>
            <param name="commandBehavior">CommandBehavior enum</param>
            <param name="commandType"></param>
            <returns>Returns a DbDataReader which callee should propery close</returns>
            <exception cref="T:Cch.Commerster.Core.LoginException"></exception>
            <exception cref="T:Cch.Commerster.Core.TimestampException"></exception>
            <exception cref="T:Cch.Commerster.Core.GeneralDbException"></exception>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ExecuteNonQuery(System.Data.SqlClient.SqlCommand,System.Data.CommandType)">
            <summary>
            Use this to execute queries that doesn't return a reader.
            </summary>
            <param name="command"></param>
            <param name="commandType"></param>
            <returns></returns>
            <exception cref="T:Cch.Commerster.Core.LoginException"></exception>
            <exception cref="T:Cch.Commerster.Core.TimestampException"></exception>
            <exception cref="T:Cch.Commerster.Core.GeneralDbException"></exception>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ExecuteNonQuery(System.Data.SqlClient.SqlCommand)">
            <summary>
            Use this to execute queries that doesn't return a reader.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ExecuteReader(System.Data.SqlClient.SqlCommand)">
            <summary>
            Opens a connection assosiated with the command and executes it
            </summary>
            <param name="command">Constructed SqlCommand object</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ExecuteReader(System.Data.SqlClient.SqlCommand,System.Data.CommandBehavior)">
            <summary>
            Opens a connection assosiated with the command and executes it
            </summary>
            <param name="command">Constructed DbCommand object</param>
            <param name="commandBehavior"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ExecuteReader(System.Data.SqlClient.SqlCommand,System.Data.CommandType)">
            <summary>
            Opens a connection assosiated with the command and executes it
            </summary>
            <param name="command">Constructed DbCommand object</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.AddInputParameter``1(System.Data.SqlClient.SqlCommand,System.String,System.Data.SqlDbType,``0)">
            <summary>
            Adds input parameter with a given name and value
            </summary>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="command"></param>
            <param name="paramName"></param>
            <param name="paramType"></param>
            <param name="paramValue"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.AddOutputParameter(System.Data.SqlClient.SqlCommand,System.String,System.Data.SqlDbType)">
            <summary>
            Adds output parameter with a given name and type
            </summary>
            <param name="command"></param>
            <param name="paramName"></param>
            <param name="paramType"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.AddOutputParameter(System.Data.SqlClient.SqlCommand,System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            Adds output parameter with a given name, type and size
            </summary>
            <param name="command"></param>
            <param name="paramName"></param>
            <param name="paramType"></param>
            <param name="size"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.AddRetValParameter(System.Data.SqlClient.SqlCommand,System.String)">
            <summary>
            Adds return value parameter with a given name and type
            </summary>
            <param name="command"></param>
            <param name="paramName"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.AddParameter``1(System.Data.SqlClient.SqlCommand,System.String,System.Data.ParameterDirection,System.Data.SqlDbType,``0,System.Nullable{System.Int32})">
            <summary>
            General method to add a parameter with a given name, direction, and value
            </summary>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="command"></param>
            <param name="paramName"></param>
            <param name="paramDirection"></param>
            <param name="paramType"></param>
            <param name="paramValue"></param>
            <param name="size"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ReadBinary(System.Data.SqlClient.SqlDataReader,System.String,HW.Commerster.Foundation.ContentType)">
            <summary>
            Helper method to read binary data from database
            </summary>
            <remarks>Automatically performs Uncompression</remarks>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlDbHelper.ReadBinary(System.Data.SqlClient.SqlDataReader,System.String)">
            <summary>
            Helper method to read binary data from database
            </summary>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.Database.SqlSearchSpBuilder">
            <summary>
            Helper to build SqlCommand for searched including pagination control
            </summary>
            <remarks>Use this class with the stored procedures</remarks>
            <example>
            <![CDATA[
            -- sp prototype
            create procedure spMyApp_Search
            	@customParam int = null,
            	@rpp int = null,
            	@page int = null,
            	@pagesRequested int = null,
            	@totalRows int OUT
            as
            begin
            	declare @resultset TABLE (rownum int identity (0,1), COLUMN_NAME PRIMARY KEY)
            
            	INSERT INTO @resultset (COLUMN_NAME)
            	select TOP (@rpp * (@page + @pagesRequested)) COLUMN_NAME FROM ... WHERE ...
            	
            	select @totalRows = count(*) from FROM ... WHERE ...
            
            	select field1, field2, ... fieldN FROM table a inner join @resultset r ON a.COLUMN_NAME = r.COLUMN_NAME
            	if NOT (@rpp IS NULL or @page IS NULL or @pagesRequested IS NULL)
            	set @sql = @sql + '	where r.rownum >= (@rpp * @page) AND r.rownum < (@rpp * (@page + @pagesRequested))
            end
            ]]>
            </example>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlSearchSpBuilder.#ctor(System.String,Cch.Commerster.Core.IPaginationControl)">
            <summary>
            Constructor
            </summary>
            <param name="commandText"></param>
            <param name="paginationControl"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlSearchSpBuilder.BuildCommand``1(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},System.Collections.Generic.Dictionary{``0,System.String})">
            <summary>
            Builds SqlCommand object to be executed
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchColumns"></param>
            <param name="columnMap"></param>
            <returns></returns>
            <remarks>Array parameters are converted to XML via SqlDbHelper.ToXml() (ToXml16() for string) calls</remarks>
        </member>
        <member name="T:Cch.Commerster.Core.Database.SqlSearchQueryBuilder">
            <summary>
            Helper to build SELECT statements for searched including pagination control
            </summary>
            <remarks>Use this class with the dynamic SQL</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlSearchQueryBuilder.#ctor(System.String,System.String,Cch.Commerster.Core.IPaginationControl)">
            <summary>
            Constructor
            </summary>
            <param name="selectClause"></param>
            <param name="fromClause"></param>
            <param name="paginationControl"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlSearchQueryBuilder.AddSortColumnToSelect(System.String)">
            <summary>
            Adds a Column which appears in Order by to the list of Select if it does not exists
            </summary>
            <param name="tableFieldName"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.SqlSearchQueryBuilder.BuildCommand``1(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},System.Collections.Generic.Dictionary{``0,System.String})">
            <summary>
             Builds SqlCommand object to be executed
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchColumns"></param>
            <param name="columnMap"></param>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.Database.TransactionHelper`1">
            <summary>
            Transaction Helper
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cch.Commerster.Core.Database.TransactionHelper`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Database.TransactionHelper`1.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor
            </summary>
            <param name="currentTransaction"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.TransactionHelper`1.#ctor(System.Data.IDbTransaction,System.Data.IsolationLevel)">
            <summary>
            Constructor
            </summary>
            <param name="currentTransaction"></param>
            <param name="isolationLevel"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.TransactionHelper`1.Rollback">
            <summary>
            Rollbacks a transaction
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Database.TransactionHelper`1.Commit">
            <summary>
            Commits a transaction
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Database.TransactionHelper`1.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Database.TransactionHelper`1.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Database.TransactionHelper`1.Dispose">
            <summary>
            IDisposable.Dispose()
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Database.TransactionHelper`1.Transaction">
            <summary>
            Current Transaction
            </summary>
        </member>
        <member name="T:Cch.Commerster.Ebp.EbpAccount">
            <summary>
            Class represent an EbpAccount
            </summary>
        </member>
        <member name="F:Cch.Commerster.Ebp.EbpAccount.isCreated">
            <summary>
            Indicates if the account is created via Create method
            </summary>
        </member>
        <member name="M:Cch.Commerster.Ebp.EbpAccount.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ebpUserName"></param>
            <param name="companyShortName"></param>
        </member>
        <member name="M:Cch.Commerster.Ebp.EbpAccount.Get(System.String,System.String)">
            <summary>
            Returns an EbpAccount with available Commerster Name and Password to login with
            </summary>
            <param name="ebpUserName"></param>
            <param name="companyShortName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Ebp.EbpAccount.Create(System.String,System.String)">
            <summary>
            Creates a new Ebp account
            </summary>
            <param name="ebpUserName"></param>
            <param name="companyShortName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Ebp.EbpAccount.Save">
            <summary>
            Saves Ebp Account
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Ebp.EbpAccount.EbpUserName">
            <summary>
            EBP User name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Ebp.EbpAccount.Password">
            <summary>
            Auto-generated password
            </summary>
        </member>
        <member name="P:Cch.Commerster.Ebp.EbpAccount.UserName">
            <summary>
            Commerster User name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Ebp.EbpAccount.CompanyShortName">
            <summary>
            Company short name
            </summary>
        </member>
        <member name="T:Cch.Commerster.Interfaces.HierarchyBase`1">
            <summary>
            Hierarchy Implementation class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Cch.Commerster.Interfaces.HierarchyBase`1.id">
            <summary>
            id of the record which Hierarchy function would work for
            </summary>
        </member>
        <member name="M:Cch.Commerster.Interfaces.HierarchyBase`1.#ctor(System.Nullable{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Cch.Commerster.Interfaces.HierarchyBase`1.GetRootId">
            <summary>
            Returns the Root Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Interfaces.HierarchyBase`1.GetRootId(System.Data.IDbTransaction)">
            <summary>
            Returns the Root Id
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Interfaces.HierarchyBase`1.GetChildren">
            <summary>
            Returns all immediate children for a given node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Interfaces.HierarchyBase`1.Traverse">
            <summary>
            Traverses the full tree based on a given node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Interfaces.HierarchyBase`1.Traverse(System.Data.IDbTransaction)">
            <summary>
            Traverses the full tree based on a given node
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Interfaces.HierarchyBase`1.NodeId">
            <summary>
            Sets id which method would use as an input parameter
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.SqlLookupEntityDalImpl`3">
            <summary>
            Abstract Sql implementation for an entity
            </summary>
            <typeparam name="T">Entity Type</typeparam>
            <typeparam name="TDal">Type of Entity Lookup Dal Interface</typeparam>
            <typeparam name="TDalImpl">Type of Entity Dal Implementation</typeparam>
        </member>
        <member name="F:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.instance">
            <summary>
            holds the Singleton instance
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.slidingExpiration">
            <summary>
            Default Caching Value
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.Reset">
            <summary>
            Removes cached content
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.GetAll">
            <summary>
            Returns all records
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.ReadEntity(`0,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Should implement a reading an entity from the reader
            </summary>
            <param name="entity"></param>
            <param name="reader"></param>
        </member>
        <member name="P:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.Instance">
            <summary>
            Public property returning the instance
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.ConnectionString">
            <summary>
            ConnectionString
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.CommandText">
            <summary>
            CommandText
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.CommandType">
            <summary>
            CommandType
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.IsCachable">
            <summary>
            The resultset will be cached if this returns true
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.CacheCategory">
            <summary>
            CacheCategory
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.SqlLookupEntityDalImpl`3.CacheKey">
            <summary>
            CacheKey
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.InitializerEventArgs">
            <summary>
            Base Initializer Event
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.InitializerEventArgs.Transaction">
            <summary>
            Transaction context
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Events">
            <summary>
            Public Events available for use by application initializers only
            </summary>
        </member>
        <member name="E:Cch.Commerster.Core.Events.BeforeAddUserCompanyRole">
            <summary>
            Occurs before DB call to establish a given role/user/company relationship
            </summary>
        </member>
        <member name="E:Cch.Commerster.Core.Events.AfterAddUserCompanyRole">
            <summary>
            Occurs after DB call to establish a given role/user/company relationship
            </summary>
        </member>
        <member name="E:Cch.Commerster.Core.Events.BeforeRemoveUserCompanyRole">
            <summary>
            Occurs before DB call to delete a given role/user/company relationship
            </summary>
        </member>
        <member name="E:Cch.Commerster.Core.Events.AfterRemoveUserCompanyRole">
            <summary>
            Occurs after DB call to delete a given role/user/company relationship
            </summary>
        </member>
        <member name="T:Cch.Commerster.HttpModules.RequestPreprocessorModule">
            <summary>
            Calls registered request preprocessors implementations
            </summary>
        </member>
        <member name="T:Cch.Commerster.HttpModules.SsoModule">
            <summary>
            SSO Http Module
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.IAddressInfoDal">
            <summary>
            Provides an interface for Addressinfos.
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.ICurrencyDal">
            <summary>
            Interface for Currency DAL
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.IdDatePair">
            <summary>
            Structure to hold an id and a date.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.IdDatePair.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Cch.Commerster.Core.IdDatePair.#ctor(System.Int32,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="userId"></param>
            <param name="dateTimeInfo"></param>
        </member>
        <member name="P:Cch.Commerster.Core.IdDatePair.Current">
            <summary>
            Safe method to return Current UserId/DateTime pair. Returns Commerster "System" IdDatePair if current user isn't available
            </summary>
            <remarks>Returns a UserId of LoginAs requestor if LoginAs session is started. NEVER USE THIS OTHER THAN FOR AUDIT PURPOSE</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.IdDatePair.System">
            <summary>
            A predefined "System" id-date pair
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.IdDatePair.UserId">
            <summary>
            Returns userId
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.IdDatePair.DateTimeInfo">
            <summary>
            Returns Date/Time
            </summary>
            <remarks>Date/Time is in UTC</remarks>
        </member>
        <member name="T:Cch.Commerster.Core.Localization.FormsTranslator">
            <summary>
            Class to translate a form.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.FormsTranslator.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="language">The language to use for translations.</param>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.FormsTranslator.TranslateChildren(System.Web.UI.Control)">
            <summary>
            Public method to find form fields that need translating and translate them
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.FormsTranslator.TranslateChildren(System.Web.UI.WebControls.ListControl)">
            <summary>
            Public method to get translations for a list control (drop down list, list box, etc)
            </summary>
            <param name="parent">List control whose items need to be translated</param>
        </member>
        <member name="T:Cch.Commerster.Core.ITranslationDal">
            <summary>
            Interface to define the translation interface.
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Localization.Language">
            <summary>
            Languages (Cultures) available in the system
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.Language.isContractTranslation">
            <summary>
            Is Contract Translation
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.Language.nativeName">
            <summary>
            Native Culture Name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Localization.Language.IsContractTranslation">
            <summary>
            Is Contract Translation
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Localization.Language.NativeName">
            <summary>
            Native Culture Name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Localization.Language.EnglishName">
            <summary>
            English Culture Name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Localization.Language.ShortName">
            <summary>
            Culture Name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Localization.Language.SupportedLanguages">
            <summary>
            Supported Languages
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Localization.ApplicationLabel">
            <summary>
            Translation in the given application
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Localization.LabelInfo">
            <summary>
            Label Info
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Localization.PreloadLabel">
            <summary>
            Preloaded Label from Lookup tables
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Localization.TextTranslator">
            <summary>
            This class is used to translate texts.
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TextTranslator.Instance">
            <summary>
            Singleton Instance
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TextTranslator.rwLock">
            <summary>
            High Performance Lock
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TextTranslator.NoTranslationLabel">
            <summary>
            Constant returned if there is nothing found for a given language/label pair
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TextTranslator.GetTranslation(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
             Returns the translation for a given label/language/application
            </summary>
            <param name="language"></param>
            <param name="labelId"></param>
            <param name="applicationId">Should not be passed unless mapping logic is needed</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TextTranslator.GetTranslation(System.String,System.Int32)">
            <summary>
            Returns the translation for a given label/language
            </summary>
            <param name="language">Determines which translation to use.</param>
            <param name="labelId">The label to translate.</param>
            <returns>The translation if present.</returns>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TextTranslator.GetTranslation(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Returns a translation of a given label. Language is taken from Thread.CurrentCulture (set by framework for every web call)
            </summary>
            <param name="labelId"></param>
            <param name="appId">Should not be passed unless mapping logic is needed</param>
            <returns></returns>
            <remarks>en-US culture is used if Thread.CurrentCultrue is neutral</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TextTranslator.GetTranslation(System.Int32)">
            <summary>
            Returns a translation of a given label. Language is taken from Thread.CurrentCulture (set by framework for every web call)
            </summary>
            <param name="labelId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TextTranslator.GetTranslation(System.String,System.Enum)">
            <summary>
            Returns a localized value for Enum field
            </summary>
            <param name="language"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TextTranslator.GetTranslation(System.Enum)">
            <summary>
            Returns a localized value for Enum field
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TextTranslator.GetDictionary(System.String)">
            <summary>
            Gets the correct dictionary for the given language or creates a new one and adds it.
            </summary>
            <param name="language">The language of the dictonairy.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TextTranslator.Cch#Commerster#Core#Localization#ITextTranslator#GetTranslation(System.String,System.Int32)">
            <summary>
            Returns the translation for a given label. Returns an empty string if no translation was found.
            </summary>
            <param name="language">Determines which translation to use.</param>
            <param name="labelId">The label to translate.</param>
            <returns>The translation if present.</returns>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TextTranslator.Cch#Commerster#Core#Localization#ITextTranslator#GetTranslation(System.Int32)">
            <summary>
            Returns a translation of a given label. Language is taken from Thread.CurrentCulture (set by framework for every web call)
            </summary>
            <param name="labelId"></param>
            <returns></returns>
            <remarks>en-US culture is used if Thread.CurrentCultrue is neutral</remarks>
        </member>
        <member name="T:Cch.Commerster.Core.Localization.TziIdAttribute">
            <summary>
            TziId Attribute
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TziIdAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Cch.Commerster.Core.Localization.TziIdAttribute.WindowsTimeZoneId">
            <summary>
            Windows TimeZoneInfo Id
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Localization.TimeZoneIdentifier">
            <summary>
            This enumeration stores all available time zones
            </summary>
            <remarks>Every value must have TziId attribute set</remarks>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.AfghanistanStandardTime">
            <summary>
            Afghanistan Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.AlaskanStandardTime">
            <summary>
            Alaskan Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.ArabStandardTime">
            <summary>
            Arab Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.ArabianStandardTime">
            <summary>
            Arabian Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.ArabicStandardTime">
            <summary>
            Arabic Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.AtlanticStandardTime">
            <summary>
            Atlantic Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.AusCentralStandardTime">
            <summary>
            AUS Central Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.AusEasternStandardTime">
            <summary>
            AUS Eastern Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.AzoresStandardTime">
            <summary>
            Azores Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.CanadaCentralStandardTime">
            <summary>
            Canada Central Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.CapeVerdeStandardTime">
            <summary>
            Cape Verde Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.Utc">
            <summary>
            UTC
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.CenAustraliaStandardTime">
            <summary>
            Cen. Australia Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.CentralAmericaStandardTime">
            <summary>
            Central America Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.CentralAsiaStandardTime">
            <summary>
            Central Asia Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.CentralEuropeStandardTime">
            <summary>
            Central Europe Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.CentralEuropeanStandardTime">
            <summary>
            Central European Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.CentralPacificStandardTime">
            <summary>
            Central Pacific Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.CentralStandardTime">
            <summary>
            Central Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.ChinaStandardTime">
            <summary>
            China Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.DatelineStandardTime">
            <summary>
            Dateline Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.EAfricaStandardTime">
            <summary>
            E. Africa Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.EAustraliaStandardTime">
            <summary>
            E. Australia Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.EEuropeStandardTime">
            <summary>
            E. Europe Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.ESouthAmericaStandardTime">
            <summary>
            E. South America Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.EasternStandardTime">
            <summary>
            Eastern Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.EgyptStandardTime">
            <summary>
            Egypt Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.EkaterinburgStandardTime">
            <summary>
            Ekaterinburg Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.FijiStandardTime">
            <summary>
            Fiji Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.FleStandardTime">
            <summary>
            FLE Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.GmtStandardTime">
            <summary>
            GMT Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.GreenlandStandardTime">
            <summary>
            Greenland Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.GreenwichStandardTime">
            <summary>
            Greenwich Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.GtbStandardTime">
            <summary>
            GTB Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.HawaiianStandardTime">
            <summary>
            Hawaiian Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.IndiaStandardTime">
            <summary>
            India Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.IranStandardTime">
            <summary>
            Iran Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.IsraelStandardTime">
            <summary>
            Israel Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.KoreaStandardTime">
            <summary>
            Korea Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.CentralStandardTimeMexico">
            <summary>
            Central Standard Time (Mexico)
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.MountainStandardTimeMexico">
            <summary>
            Mountain Standard Time (Mexico)
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.MidAtlanticStandardTime">
            <summary>
            Mid-Atlantic Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.MountainStandardTime">
            <summary>
            Mountain Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.MyanmarStandardTime">
            <summary>
            Myanmar Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.NCentralAsiaStandardTime">
            <summary>
            N. Central Asia Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.NepalStandardTime">
            <summary>
            Nepal Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.NewZealandStandardTime">
            <summary>
            New Zealand Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.NewfoundlandStandardTime">
            <summary>
            Newfoundland Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.NorthAsiaEastStandardTime">
            <summary>
            North Asia East Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.NorthAsiaStandardTime">
            <summary>
            North Asia Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.PacificSaStandardTime">
            <summary>
            Pacific SA Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.PacificStandardTime">
            <summary>
            Pacific Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.RomanceStandardTime">
            <summary>
            Romance Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.RussianStandardTime">
            <summary>
            Russian Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.SaEasternStandardTime">
            <summary>
            SA Eastern Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.SaPacificStandardTime">
            <summary>
            SA Pacific Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.SaWesternStandardTime">
            <summary>
            SA Western Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.SamoaStandardTime">
            <summary>
            Samoa Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.SeAsiaStandardTime">
            <summary>
            SE Asia Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.SingaporeStandardTime">
            <summary>
            Singapore Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.SouthAfricaStandardTime">
            <summary>
            South Africa Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.SriLankaStandardTime">
            <summary>
            Sri Lanka Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.TaipeiStandardTime">
            <summary>
            Taipei Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.TasmaniaStandardTime">
            <summary>
            Tasmania Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.TokyoStandardTime">
            <summary>
            Tokyo Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.TongaStandardTime">
            <summary>
            Tonga Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.UsEasternStandardTime">
            <summary>
            US Eastern Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.UsMountainStandardTime">
            <summary>
            US Mountain Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.VladivostokStandardTime">
            <summary>
            Vladivostok Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.WAustraliaStandardTime">
            <summary>
            W. Australia Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.WCentralAfricaStandardTime">
            <summary>
            W. Central Africa Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.WEuropeStandardTime">
            <summary>
            W. Europe Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.WestAsiaStandardTime">
            <summary>
            West Asia Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.WestPacificStandardTime">
            <summary>
            West Pacific Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.YakutskStandardTime">
            <summary>
            Yakutsk Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.ArmenianStandardTime">
            <summary>
            Armenian Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.AzerbaijanStandardTime">
            <summary>
            Azerbaijan Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.CentralBrazilianStandardTime">
            <summary>
            Central Brazilian Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.GeorgianStandardTime">
            <summary>
            Georgian Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.JordanStandardTime">
            <summary>
            Jordan Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.MiddleEastStandardTime">
            <summary>
            Middle East Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.MontevideoStandardTime">
            <summary>
            Montevideo Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.NamibiaStandardTime">
            <summary>
            Namibia Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.PacificStandardTimeMexico">
            <summary>
            Pacific Standard Time (Mexico)
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.ArgentinaStandardTime">
            <summary>
            Argentina Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.UtcPlus12">
            <summary>
            UTC+12
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.MoroccoStandardTime">
            <summary>
            Morocco Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.PakistanStandardTime">
            <summary>
            Pakistan Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.ParaguayStandardTime">
            <summary>
            Paraguay Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.UlaanbaatarStandardTime">
            <summary>
            Ulaanbaatar Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.BangladeshStandardTime">
            <summary>
            Bangladesh Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.MauritiusStandardTime">
            <summary>
            Mauritius Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.SyriaStandardTime">
            <summary>
            Syria Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.VenezuelaStandardTime">
            <summary>
            Venezuela Standard Time
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.UtcMinus2">
            <summary>
            UTC-02
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneIdentifier.UtcMinus11">
            <summary>
            UTC-11
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Localization.TimeZoneConverter">
            <summary>
            This class is used to convert .NET TimeZoneInfo.Id string value into TimeZoneIdentifier int value and vice-versa
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Localization.TimeZoneConverter.identToTimeZoneIdMap">
            <summary>
            Time Zone Map
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TimeZoneConverter.ToUtcDateTime(System.DateTime)">
            <summary>
            Converts a given DateTime into UTC time using the browser's time zone offset
            </summary>
            <param name="dateToConvert"></param>
            <remarks>Only makes sence within a context of a logged-in user</remarks>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TimeZoneConverter.ToLocalDateTime(System.DateTime)">
            <summary>
            Converts a given UTC DateTime into local time of the user using the browser's time zone offset
            </summary>
            <param name="dateToConvert"></param>
            <remarks>Only makes sence within a context of a logged-in user</remarks>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TimeZoneConverter.GetTimeZoneIdentifier(System.Int32)">
            <summary>
            Returns the TimezoneIdentifier from an integer value
            </summary>
            <param name="timeZoneIdentifier"></param>
            <returns></returns>
            <exception cref="T:Cch.Commerster.Core.InvalidTimeZoneIdentifierException"> is thrown if passed integer is not a valid TimeZone Identifier</exception>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TimeZoneConverter.GetTimeZoneInfo(Cch.Commerster.Core.Localization.TimeZoneIdentifier)">
            <summary>
            Returns TimeZoneInfo by TimeZoneIdentifier
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TimeZoneConverter.GetTimeZoneIdentifierId(Cch.Commerster.Core.Localization.TimeZoneIdentifier)">
            <summary>
            Returns Id value understandable by .NET TimeZoneInfo class
            </summary>
            <param name="identifier">integer representing the timezone</param>
            <returns>string used by the system</returns>
        </member>
        <member name="M:Cch.Commerster.Core.Localization.TimeZoneConverter.GetTimeZoneIdentifier(System.String)">
            <summary>
            This method maps a string system name to TimeZoneIdentifier enum value
            </summary>
            <param name="id">windows time zone ID in registry</param>
            <returns>TimeZoneIdentifier enum value</returns>
        </member>
        <member name="T:Cch.Commerster.Core.Logging.DatabaseAppender">
            <summary>
            Custom Database appender for logging within Commerster
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Logging.EmailAppender">
            <summary>
            Custom E-mail appender for logging within Commerster
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Logging.ExtendedItem">
            <summary>
            Extended item for LogEvent's ExtendedInfo
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.ExtendedItem.#ctor">
            <summary>
            Internal Constructor
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.ExtendedItem.#ctor(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Private Constructor
            </summary>
            <param name="name"></param>
            <param name="valueLabelId"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.ExtendedItem.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for a key/value Label ID
            </summary>
            <param name="name"></param>
            <param name="valueLabelId"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.ExtendedItem.#ctor(System.String,System.String)">
            <summary>
            Constructor for a key/value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.ExtendedItem.name">
            <summary>
            name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.ExtendedItem.valueLabelId">
            <summary>
            Value Label ID (no need to store message)
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.ExtendedItem.value">
            <summary>
            value
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.ExtendedItem.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.ExtendedItem.ValueLabelId">
            <summary>
            Value Label ID (no need to store message)
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.ExtendedItem.Value">
            <summary>
            Value (if not localized)
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Logging.ExtendedItemCollection">
            <summary>
            Extended Item Collection
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.ExtendedItemCollection.#ctor">
            <summary>
            Creates an empty collection
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.ExtendedItemCollection.#ctor(System.Collections.Generic.ICollection{Cch.Commerster.Core.Logging.ExtendedItem})">
            <summary>
            Creates a new collection and uses the specified items
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.ExtendedItemCollection.GetKeyForItem(Cch.Commerster.Core.Logging.ExtendedItem)">
            <summary>
            Extracts the key from the specified element
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.ExtendedItemCollection.ToPrimitiveArray">
            <summary>
            Converts a collection into an array of KeyValuePair&lt;string, string&gt;
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.Logging.Log">
            <summary>
            Log class to be used by Commerster applications
            </summary>
            <remarks>type-safe ILog implementation</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.Log.Info(Cch.Commerster.Core.Logging.LogEntry)">
            <summary>
            Log a message object with the Info level
            </summary>
            <param name="le">Log entry</param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.Log.Info(Cch.Commerster.Core.Logging.LogEntry,System.Exception)">
            <summary>
            Log a message object with the Info level with corresponding Exception
            </summary>
            <param name="le">Log entry</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.Log.Error(Cch.Commerster.Core.Logging.LogEntry,System.Exception)">
            <summary>
            Log a message object with the Error level
            </summary>
            <param name="le">Log entry</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.Log.Error(Cch.Commerster.Core.Logging.LogEntry)">
            <summary>
            Log a message object with the Error level with corresponding Exception
            </summary>
            <param name="le">Log entry</param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.Log.Debug(Cch.Commerster.Core.Logging.LogEntry,System.Exception)">
            <summary>
            Log a message object with the Debug level with corresponding Exception
            </summary>
            <param name="le">Log entry</param>
            <param name="exception"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.Log.Debug(Cch.Commerster.Core.Logging.LogEntry)">
            <summary>
            Log a message object with the Debug level
            </summary>
            <param name="le">Log entry</param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.Log.Fatal(Cch.Commerster.Core.Logging.LogEntry,System.Exception)">
            <summary>
            Log a formatted message string with the Fatal level with corresponding Exception
            </summary>
            <param name="le">Log entry</param>
            <param name="exception"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.Log.Fatal(Cch.Commerster.Core.Logging.LogEntry)">
            <summary>
            Log a formatted message string with the Fatal level
            </summary>
            <param name="le">Log entry</param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.Log.Warn(Cch.Commerster.Core.Logging.LogEntry,System.Exception)">
            <summary>
            Log a message object with the Warn level
            </summary>
            <param name="le">Log entry</param>
            <param name="exception"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.Log.Warn(Cch.Commerster.Core.Logging.LogEntry)">
            <summary>
            Log a message object with the Warn level
            </summary>
            <param name="le">Log entry</param>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.Log.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.Log.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.Log.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.Log.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is info enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is info enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.Log.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is warn enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cch.Commerster.Core.Logging.CategoryType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.CategoryType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.CategoryType.Generic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.CategoryType.Custom">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.CategoryType.DataAccess">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.CategoryType.BusinessLogic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.CategoryType.UI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.CategoryType.InternalProcessing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.CategoryType.Activity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.CategoryType.Alert">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.CategoryType.Audit">
            <summary>
            Audit
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.CategoryType.Mdx">
            <summary>
            MDX
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Logging.LogEntrySearchFields">
            <summary>
            Defines list of fields supported by Search method
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.MessageLabelId">
            <summary>
            Label Id of the Message
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.SeverityLevel">
            <summary>
            Severity Level
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.UserId">
            <summary>
            User Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.UserName">
            <summary>
            User Name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.CategoryType">
            <summary>
            Category Type
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.CategoryName">
            <summary>
            Category Name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.SubCategoryName">
            <summary>
            Sub Category Name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.AppId">
            <summary>
            Application Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.ProcessName">
            <summary>
            Process Name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.MachineName">
            <summary>
            Machine Name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.ExtendedInfoKeyName">
            <summary>
            Extended Info Key Name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.ExtendedInfoKeyValue">
            <summary>
            Extended Info Key Value
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntrySearchFields.ExtendedInfoKeyValueLabelId">
            <summary>
            Extended Info Key Value Label Id
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Logging.LogEntry">
            <summary>
            Represents a Log entry.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.AddExtenededItem(Cch.Commerster.Core.Logging.ExtendedItem)">
            <summary>
            Append ExtendedItem to the extendedInfo list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.AddExtenededItem(System.String,System.String)">
            <summary>
            Append Key Value Pair to the extendedInfo list
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <remarks>ExtendedInfo is inititalized automatically</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.AddExtenededItem(System.String,System.Int32)">
            <summary>
            Append Key Value Pair to the extendedInfo list
            </summary>
            <param name="key"></param>
            <param name="valueLabelId"></param>
            <remarks>ExtendedInfo is inititalized automatically</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.AppendException(System.Exception)">
            <summary>
            Adds Exception (and all InnerExceptions) into the extendedInfo list
            </summary>
            <param name="ex"></param>
            <remarks>ExtendedInfo is inititalized automatically</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.op_Implicit(System.String)~Cch.Commerster.Core.Logging.LogEntry">
            <summary>
            Implicit operator constructing LogEntry object from a string
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.op_Explicit(System.Int32)~Cch.Commerster.Core.Logging.LogEntry">
            <summary>
            Explicit operator constructing LogEntry object from a labelId
            </summary>
            <param name="labelId"></param>
            <returns></returns>
        </member>
        <member name="F:Cch.Commerster.Core.Logging.LogEntry.rownum">
            <summary>
            Used for sorting
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.#ctor">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.#ctor(System.String)">
            <summary>
            Constructs a LogEntry object with a simple message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.#ctor(System.String,Cch.Commerster.Core.Logging.CategoryType)">
            <summary>
            Constructs a LogEntry object with a simple message and category
            </summary>
            <param name="message"></param>
            <param name="category"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.#ctor(System.String,System.Int32,Cch.Commerster.Core.Logging.CategoryType)">
            <summary>
            Constructs a LogEntry object with a simple localizable message and category
            </summary>
            <param name="message"></param>
            <param name="messageLabelId"></param>
            <param name="category"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a LogEntry object with a message, custom category name and custom sub-category name
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
            <param name="subCategoryName"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructs a LogEntry object with a localizable message, custom category name and custom sub-category name
            </summary>
            <param name="message"></param>
            <param name="messageLabelId"></param>
            <param name="categoryName"></param>
            <param name="subCategoryName"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.GetError(System.Int32)">
            <summary>
            Returns Log Entries with Error Severity Level
            </summary>
            <param name="logEntryId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.GetError(System.Int32[])">
            <summary>
            Returns Log Entries with Error Severity Level
            </summary>
            <param name="logEntryIds"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.GetDebug(System.Int32)">
            <summary>
            Returns Log Entries with Severity Levels other than Fatal
            </summary>
            <param name="logEntryId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.GetDebug(System.Int32[])">
            <summary>
            Returns Log Entries with Severity Levels other than Fatal
            </summary>
            <param name="logEntryIds"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.SearchError(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},Cch.Commerster.Core.IPaginationControl)">
            <summary>
            Performs Search on Log Entries
            </summary>
            <param name="searchColumns"></param>
            <param name="paginationControl"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.SearchDebug(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},Cch.Commerster.Core.IPaginationControl)">
            <summary>
            Performs Search on Log Entries
            </summary>
            <param name="searchColumns"></param>
            <param name="paginationControl"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Logging.LogEntry.System#ICloneable#Clone">
            <summary>
            Returns a deep copy 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.RowNum">
            <summary>
            Rownum
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.Message">
            <summary>
            Message (if not localized)
            </summary>
            <remarks>If set, puts null into MessageLabelId</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.MessageLabelId">
            <summary>
            Message Label ID (no need to store message)
            </summary>
            <remarks>If set, puts null into Message</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.SeverityLevel">
            <summary>
            Severity level
            </summary>
            <remarks>ALL &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.UserId">
            <summary>
            Commerster User Id (if -1 in case Thread.Principal was used, if 0, nothing was available)
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.UserName">
            <summary>
            Commerster User name (login) (Windows identity if not available i.e. NT AUTHORITY\SYSTEM, etc)
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.CategoryName">
            <summary>
            Custom Category name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.SubCategoryName">
            <summary>
            Custom SubCategory name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.AppId">
            <summary>
            Commerster Application Id (if available)
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.ThreadCultureName">
            <summary>
            Culture name for the current thread
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.ProcessId">
            <summary>
            Current Process Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.ProcessName">
            <summary>
            Current Process Name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.MachineName">
            <summary>
            Machine Name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.TimeStamp">
            <summary>
            Date/Time (UTC)
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.WebSessionId">
            <summary>
            Web Session ID (ASP.NET Session ID) if available
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Logging.LogEntry.ExtendedInfo">
            <summary>
            Any extended information (key name/key value pairs)
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.NameInfo">
            <summary>
            Stores name information.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.NameInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.NameInfo.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="firstName"></param>
            <param name="lastName"></param>
        </member>
        <member name="M:Cch.Commerster.Core.NameInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="middleInitial"></param>
        </member>
        <member name="P:Cch.Commerster.Core.NameInfo.Empty">
            <summary>
            Empty Name Info
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.NameInfo.FirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.NameInfo.MiddleInitial">
            <summary>
            MiddleInitial
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.NameInfo.LastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.NameInfo.DisplayName">
            <summary>
            Gets the name to display.
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Personalization.IPersonalizationDal">
            <summary>
            Personalization data access
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Personalization.IPersonalizationDal.LoadPerUserPersonalizationData(System.Int32,System.String)">
            <summary>
            Loads the per user personalization data.
            </summary>
            <param name="userId">Name of the user.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Personalization.IPersonalizationDal.ResetPerUserPersonalizationData(System.Int32,System.String)">
            <summary>
            Resets the per user personalization data.
            </summary>
            <param name="userId">Name of the user.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Cch.Commerster.Core.Personalization.IPersonalizationDal.SavePerUserPersonalizationData(System.Int32,System.String,System.Byte[])">
            <summary>
            Saves the per user personalization data.
            </summary>
            <param name="userId">Name of the user.</param>
            <param name="path">The path.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:Cch.Commerster.Core.Personalization.PersonalizationProvider">
            <summary>
            Personalization provider implementation
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.FaxNumberingPlan">
            <summary>
            Represents Fax number
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.FaxNumberingPlan.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="countryId"></param>
            <param name="faxNumber"></param>
        </member>
        <member name="M:Cch.Commerster.Core.FaxNumberingPlan.#ctor(Cch.Commerster.Core.CountryInfo,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="country"></param>
            <param name="faxNumber"></param>
        </member>
        <member name="M:Cch.Commerster.Core.FaxNumberingPlan.GetErrorMessage">
            <summary>
            Returns error message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.FaxNumberingPlan.GetRegex">
            <summary>
            Returns Regex validation pattern
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.FaxNumberingPlan.LocalNumber">
            <summary>
            Local Number (a number w/o country dialing code)
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.FaxNumberingPlan.DialingCode">
            <summary>
            Country Dialing Code
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Resources.Cch_Commerster_Core">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.ArgumentInvalidException">
            <summary>
              Looks up a localized string similar to Specified argument value is not valid.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.AuthenticationException">
            <summary>
              Looks up a localized string similar to Authentication verification failed.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.AuthorizationException">
            <summary>
              Looks up a localized string similar to Authorization verification failed.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.ClientWebServiceException">
            <summary>
              Looks up a localized string similar to Call to a web-service failed.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.ContactNotActive">
            <summary>
              Looks up a localized string similar to Contact for user account is disabled.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.DalNotFoundException">
            <summary>
              Looks up a localized string similar to Specified Dal Interface does not have Implementation class defined.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.GeneralException">
            <summary>
              Looks up a localized string similar to General exception. See exception details for the cause.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.InvalidCountryId">
            <summary>
              Looks up a localized string similar to Specified CountryId is not defined.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.InvalidRegionId">
            <summary>
              Looks up a localized string similar to Specified RegionId is not defined.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.InvalidStateId">
            <summary>
              Looks up a localized string similar to Specified StateId is not defined.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.InvalidTicketException">
            <summary>
              Looks up a localized string similar to Given SSO ticket is not valid.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.InvalidTimeZoneIdentifierException">
            <summary>
              Looks up a localized string similar to Specified Time Zone Identifier is not vaild.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.LockedAccount">
            <summary>
              Looks up a localized string similar to User account is locked.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.LoginException">
            <summary>
              Looks up a localized string similar to Login failed.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.NoActiveUserException">
            <summary>
              Looks up a localized string similar to No User found in the Session.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.NoRecordsException">
            <summary>
              Looks up a localized string similar to No records found.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.NoSessionAvailableException">
            <summary>
              Looks up a localized string similar to Session is not available.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.NotValidKeyNameException">
            <summary>
              Looks up a localized string similar to The key name has to follow Application.KeyName format.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.NoUserAccount">
            <summary>
              Looks up a localized string similar to User account does not exist.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Resources.Cch_Commerster_Core.WrongPassword">
            <summary>
              Looks up a localized string similar to Passwords do not match.
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Security.UcrEventArgs">
            <summary>
            Event Arguments for user/company/role assign/revoke
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Security.AccessRights">
            <summary>
            Access Rights object to manage various User/Role/Company/Application relations
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsHubwooCompany(System.Int32)">
            <summary>
            Returns True if given company is a hubwoo company
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsHubwooEmployee(System.Int32)">
            <summary>
            Return True if given user's Primary Company is one of the hubwoo companies
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsHubwooEmployee(System.Int32,System.Data.IDbTransaction)">
            <summary>
            Return True if given user's Primary Company is one of the hubwoo companies
            </summary>
            <param name="userId"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsInRole(System.String,System.Int32)">
            <summary>
            Returns True or False if current user has access to a given company for a given role
            </summary>
            <param name="roleSysName"></param>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsInRole(System.String,System.Int32,System.Int32)">
            <summary>
            Returns True or False if user has access to a given company for a given role
            </summary>
            <param name="roleSysName"></param>
            <param name="userId"></param>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsInRole(System.String,System.Int32,System.Int32,System.Data.IDbTransaction)">
            <summary>
            Returns True or False if user has access to a given company for a given role
            </summary>
            <param name="roleSysName"></param>
            <param name="userId"></param>
            <param name="companyId"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsUserInRole(System.String,System.Int32)">
            <summary>
            Returns True or False if user has access to a given role for any company
            </summary>
            <param name="roleSysName"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsUserInRole(System.String,System.String)">
            <summary>
            Returns True or False if user has access to a given role for any company
            </summary>
            <param name="roleSysName"></param>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsUserInRole(System.Int32,System.Int32)">
            <summary>
            Returns True or False if user has access to a given role for any company
            </summary>
            <param name="roleId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsUserInRole(System.Int32,System.String)">
            <summary>
            Returns True or False if user has access to a given role for any company
            </summary>
            <param name="roleId"></param>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsUserInRole(System.Int32)">
            <summary>
            Returns True or False if current user has access to a given role for any company
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsUserInRole(System.String)">
            <summary>
            Returns True or False if current user has access to a given role for any company
            </summary>
            <param name="roleSysName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetRoles(System.String)">
            <summary>
            Returns list of roles for a user
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetRoles(System.Int32)">
            <summary>
            Returns list of roles for a user
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetCompanyIdsFor(System.Int32)">
            <summary>
            Returns list of the company IDs which are allowed to use a given application
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetCompaniesFor(System.Int32,System.Int32)">
            <summary>
            Returns list of company information for a given role/user
            </summary>
            <param name="roleId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetAllowedCompaniesFor(System.Int32)">
            <summary>
            Returns a list of companies which can be assigned to a given contact
            </summary>
            <remarks>Returns null if this operation is non-applicable (i.e. for Hubwoo employee)</remarks>
            <param name="contactId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetAllowedCompaniesFor(System.Int32,System.Data.IDbTransaction)">
            <summary>
            Returns a list of companies which can be assigned to a given contact
            </summary>
            <remarks>Returns null if this operation is non-applicable (i.e. for Hubwoo employee)</remarks>
            <param name="contactId"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetCompaniesFor(System.Int32[],System.Int32)">
            <summary>
            Returns list of company information for the given roles/user
            </summary>
            <param name="roleIds"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetCompanyIdsFor(System.Int32[],System.Int32)">
            <summary>
            Returns IDs of the Companies accessible by a given user for given roles. Better performance than GetCompaniesFor
            </summary>
            <param name="roleIds"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetCompanyIdsFor(System.Int32[],System.Int32,System.Data.IDbTransaction)">
            <summary>
            Returns IDs of the Companies accessible by a given user for given roles. Better performance than GetCompaniesFor
            </summary>
            <param name="roleIds"></param>
            <param name="userId"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetCompanyIdsFor(System.Int32,System.Int32)">
            <summary>
            Returns IDs of the Companies accessible by a given user for a given role. Better performance than GetCompaniesFor
            </summary>
            <param name="roleId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetUsersFor(System.Int32)">
            <summary>
            Returns a list of users information for a given company
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetUsersFor(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Returns a list of users information for a given role/company
            </summary>
            <param name="roleId"></param>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.GetUsersFor(System.Int32[],System.Nullable{System.Int32})">
            <summary>
            Returns a list of users information for a given roles/company
            </summary>
            <param name="roleIds"></param>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.AllowCompanyApplication(System.Int32,System.Int32[])">
            <summary>
            Allows Company to use given applications
            </summary>
            <param name="companyId"></param>
            <param name="appIds"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.AllowCompanyApplication(System.Int32,System.Int32[],System.Data.IDbTransaction)">
            <summary>
            Allows Company to use given applications
            </summary>
            <param name="companyId"></param>
            <param name="appIds"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.DenyCompanyApplication(System.Int32,System.Int32[])">
            <summary>
            Removes company access from given applications
            </summary>
            <param name="companyId"></param>
            <param name="appIds"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.DenyCompanyApplication(System.Int32,System.Int32[],System.Data.IDbTransaction)">
            <summary>
            Removes company access from given applications
            </summary>
            <param name="companyId"></param>
            <param name="appIds"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.AllowUserCompanyRole(System.Int32,System.Int32,System.String)">
            <summary>
            Adds User/Company/Role relation
            <remarks>Automatically does Company/Application assignment</remarks>
            </summary>
            <param name="companyId"></param>
            <param name="userId"></param>
            <param name="role"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.AllowUserCompanyRole(System.Int32,System.Int32,System.String[])">
            <summary>
            Adds User/Company/Role relation
            <remarks>Automatically does Company/Application assignment</remarks>
            </summary>
            <param name="companyId"></param>
            <param name="userId"></param>
            <param name="roles"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.AllowUserCompanyRole(System.Int32,System.Int32,System.String[],System.Data.IDbTransaction)">
            <summary>
            Adds User/Company/Role relation
            </summary>
            <param name="companyId"></param>
            <param name="userId"></param>
            <param name="roles"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.AllowUserCompanyRole(System.Int32,System.Collections.Generic.IList{Cch.Commerster.Interfaces.Security.IUraInfo})">
            <summary>
            Adds User/Company/Role relation
            <remarks>Automatically does Company/Application assignment</remarks>
            </summary>
            <param name="companyId"></param>
            <param name="uraInfos"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.AllowUserCompanyRole(System.Int32,System.Collections.Generic.IList{Cch.Commerster.Interfaces.Security.IUraInfo},System.Data.IDbTransaction)">
            <summary>
            Adds User/Company/Role relation
            <remarks>Automatically does Company/Application assignment</remarks>
            </summary>
            <param name="companyId"></param>
            <param name="uraInfos"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.DenyUserCompanyRole(System.Nullable{System.Int32},System.Int32,System.String)">
            <summary>
            Removes User/Company/Role relation
            <remarks>Does not remove Company/Application assignment</remarks>
            </summary>
            <param name="companyId">Optional</param>
            <param name="userId"></param>
            <param name="role"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.DenyUserCompanyRole(System.Nullable{System.Int32},System.Int32,System.String[])">
            <summary>
            Removes User/Company/Role relation
            <remarks>Does not remove Company/Application assignment</remarks>
            </summary>
            <param name="companyId">Optional</param>
            <param name="userId"></param>
            <param name="roles"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.DenyUserCompanyRole(System.Nullable{System.Int32},System.Collections.Generic.IList{Cch.Commerster.Interfaces.Security.IUraInfo},System.Data.IDbTransaction)">
            <summary>
            Removes User/Company/Role relation
            <remarks>Does not remove Company/Application assignment</remarks>
            </summary>
            <param name="companyId">Optional</param>
            <param name="uraInfos"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsUserOfApplication(System.Int32,System.Int32)">
            <summary>
            Returns true or false if given userId has access to a specified application
            </summary>
            <param name="userId"></param>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsUserOfApplication(System.Int32,System.String)">
            <summary>
            Returns true or false if given userId has access to a specified application
            </summary>
            <param name="userId"></param>
            <param name="appSysName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsCompanyOfApplication(System.Int32,System.Int32)">
            <summary>
            Returns true or false if given companyId has access to a specified application
            </summary>
            <param name="companyId"></param>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.AccessRights.IsCompanyOfApplication(System.Int32,System.String)">
            <summary>
            Returns true or false if given companyId has access to a specified application
            </summary>
            <param name="companyId"></param>
            <param name="appSysName"></param>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.Security.Application">
            <summary>
            Represents Commerster Application
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Security.Application.GetApplicationsByCompanyId(System.Int32)">
            <summary>
            Gets the applications by company id.
            </summary>
            <param name="companyId">The company id.</param>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.Security.Application.SysName">
            <summary>
            Application System Name
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Security.ApplicationCollection">
            <summary>
            Application Collection
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Security.CompanyKeyInfoSecure">
            <summary>
            Represent CompanyKeyInfo with UraInfo
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.CompanyKeyInfo">
            <summary>
            Represent only key information about the company, such as ID, ShortName/Name. Usually used for lookups
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.#ctor(System.Nullable{System.Int32})">
            <summary>
            Protected constructor. Only company object can create itself
            </summary>
            <param name="companyId"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.#ctor">
            <summary>
            Creates CompanyKeyInfo instance
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.Create">
            <summary>
            Creates CompanyKeyInfo instance
            </summary>
            <returns></returns>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.rownum">
            <summary>
            Used only by Search methods
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.companyId">
            <summary>
            Company Id
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.Search``1(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},Cch.Commerster.Core.IPaginationControl)">
            <summary>
            Generic Search method
            </summary>
            <param name="paginationControl"></param>
            <param name="searchColumns">a list of SearchColumnInfo classes. Use CompanySearchFields enum for Column Name Type</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.Search``1(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},Cch.Commerster.Core.IPaginationControl,Cch.Commerster.Core.Security.UraInfo)">
            <summary>
            Generic Search method
            </summary>
            <param name="paginationControl"></param>
            <param name="searchColumns">a list of SearchColumnInfo classes. Use CompanySearchFields enum for Column Name Type</param>
            <param name="uraInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.Search``1(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},Cch.Commerster.Core.IPaginationControl,Cch.Commerster.Core.Security.UraInfo,System.Data.IDbTransaction)">
            <summary>
            Internal Search method
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchColumns"></param>
            <param name="paginationControl"></param>
            <param name="uraInfo"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.industries">
            <summary>
            Industry collection for a company
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.GetIndusties">
            <summary>
            Populates <see cref="P:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.Industries"/> property
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.Get(System.Int32[])">
            <summary>
            Retrives <see cref="T:Cch.Commerster.Core.UserCompany.CompanyKeyInfo"/> by a specified list of company Ids
            </summary>
            <param name="companyIds"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.Get``1(System.Int32[])">
            <summary>
            Retrives companies by a specified list of company Ids
            </summary>
            <typeparam name="T"></typeparam>
            <param name="companyIds"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.Get``1(System.Int32[],System.Data.IDbTransaction)">
            <summary>
            Retrives Company of T by a specified list of company Ids
            </summary>
            <typeparam name="T">Company Type</typeparam>
            <param name="companyIds"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.Get(System.Int32,System.Data.IDbTransaction)">
            <summary>
            Retrives CompanyKeyInfo by a specified company Id
            </summary>
            <typeparam name="T"></typeparam>
            <param name="companyId"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.GetIndusties(System.Boolean)">
            <summary>
            Populates <see cref="P:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.Industries"/> property
            </summary>
            <param name="forceRead">If true, forces a re-read from the data source</param>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.RowNum">
            <summary>
            Used only by Search methods
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.CompanyTypeId">
            <summary>
            Gets or sets the company type id.
            </summary>
            <value>The company type id.</value>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.CompanyId">
            <summary>
            Company Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.CompanyShortName">
            <summary>
            Gets or sets the short name of the company.
            </summary>
            <value>The short name of the company.</value>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.CompanyName">
            <summary>
            Full Company Name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.CatalogIdent">
            <summary>
            Catalog Ident
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.SsoType">
            <summary>
            SSO Configuration Type
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyKeyInfo.Industries">
            <summary>
            Returns an industry collection for a company
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Security.CompanyKeyInfoSecure.#ctor(System.Nullable{System.Int32})">
            <summary>
            Protected constructor. Only company object can create itself
            </summary>
            <param name="companyId"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.CompanyKeyInfoSecure.#ctor">
            <summary>
            Creates CompanyKeyInfoSecure instance
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Security.CompanyKeyInfoSecure.Create">
            <summary>
            Creates CompanyKeyInfoSecure instance
            </summary>
            <returns></returns>
        </member>
        <member name="F:Cch.Commerster.Core.Security.CompanyKeyInfoSecure.ura">
            <summary>
            User/Role/Application info
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.CompanyKeyInfoSecure.Ura">
            <summary>
            User/Role/Application info
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Security.Encryption">
            <summary>
            Class is used to encrypt/decrypt data passed in query strings and MD5 hashing
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Security.Encryption.Encrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            Encrypts string data using RijndaelManaged
            </summary>
            <remarks>Returns null if encrypt fails</remarks>
            <param name="data"></param>
            <param name="iv"></param>
            <param name="key"></param>
            <returns>Encrypted base64 string</returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.Encryption.Encrypt(System.String,System.Boolean)">
            <summary>
            Encrypts data and returns Base64 string
            </summary>
            <param name="data"></param>
            <param name="isSessionIdIv">True if SessionId should used to generate an IV</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.Encryption.Encrypt(System.String)">
            <summary>
            Encrypts data and returns Base64 string
            </summary>
            <remarks>Returns null if encrypt fails</remarks>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.Encryption.Decrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts base64 data using RijndaelManaged
            </summary>
            <param name="data"></param>
            <param name="iv"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.Encryption.Decrypt(System.String,System.Boolean)">
            <summary>
            Decrypts base64 data
            </summary>
            <param name="data"></param>
            <param name="isSessionIdIv">True if SessionId should used to generate an IV</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.Encryption.Decrypt(System.String)">
            <summary>
            Decrypts base64 data
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.Encryption.Md5Hash(System.String)">
            <summary>
            Produces MD5 hash
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.ISecurityDal.ValidateUser(System.String,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            Validates supplied user name and password
            </summary>
            <param name="userName"></param>
            <param name="passwordHash"></param>
            <param name="isLoginAs"></param>
            <param name="transaction"></param>
            <returns>userId if successful</returns>
        </member>
        <member name="T:Cch.Commerster.Core.Security.MembershipProvider">
            <summary>
            Membership Provider Implementation
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes Provider instance
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.IsValidPassword(System.String)">
            <summary>
            Returns true if a new password satisfies passwordStrengthRegularExpression and minRequiredPasswordLength
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes password on a given user
            </summary>
            <param name="username"></param>
            <param name="oldPassword">old password</param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            ChangePasswordQuestionAndAnswer
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="newPasswordQuestion"></param>
            <param name="newPasswordAnswer"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            CreateUser
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="email"></param>
            <param name="passwordQuestion"></param>
            <param name="passwordAnswer"></param>
            <param name="isApproved"></param>
            <param name="providerUserKey"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            DeleteUser
            </summary>
            <param name="username"></param>
            <param name="deleteAllRelatedData"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            FindUsersByEmail
            </summary>
            <param name="emailToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            FindUsersByName
            </summary>
            <param name="usernameToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            GetAllUsers
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.GetNumberOfUsersOnline">
            <summary>
            GetNumberOfUsersOnline
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.GetPassword(System.String,System.String)">
            <summary>
            GetPassword
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            GetUser
            </summary>
            <param name="username"></param>
            <param name="userIsOnline"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            GetUser
            </summary>
            <param name="providerUserKey"></param>
            <param name="userIsOnline"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            GetUserNameByEmail
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.ResetPassword(System.String,System.String)">
            <summary>
            Resets Password for a given user. No notificatin sent
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.GeneratePassword(System.Int32)">
            <summary>
            Generates a new password 
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.UnlockUser(System.String)">
            <summary>
            UnlockUser
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            UpdateUser
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Validates given username and password.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.ValidateUser(System.String,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            Validates given username and password.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="isLoginAs">Login As flag</param>
            <param name="transaction"></param>
            <returns>user Id if valid, exception otherwise</returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.DoIpCheck(System.String)">
            <summary>
            Verifies that current login is a subject to Admin/Allowed IP verification
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.SendEmailPasswordReset(Cch.Commerster.Core.UserCompany.User,System.String)">
            <summary>
            Sends Reset Password e-mail to the given user
            </summary>
            <param name="user"></param>
            <param name="password"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.SendEmailNewUser(Cch.Commerster.Core.UserCompany.User,System.String)">
            <summary>
            Sends a "welcome" e-mail to the given user
            </summary>
            <param name="user"></param>
            <param name="password"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.SendEmailUserName(Cch.Commerster.Core.UserCompany.User)">
            <summary>
            Sends UserName reminder e-mail to the given user
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.GetUnlockCode(System.Int32)">
            <summary>
            Returns an unlock code for a given user
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.UnlockUser(System.Guid)">
            <summary>
            Unlocks the user by given unlock Code
            </summary>
            <param name="unlockCode"></param>
            <returns>UserId if unlock succeeded</returns>
        </member>
        <member name="M:Cch.Commerster.Core.Security.MembershipProvider.SendEmailAccountLocked(Cch.Commerster.Core.UserCompany.User)">
            <summary>
            Sends Account Locked e-mail to the given user
            </summary>
            <param name="user"></param>
        </member>
        <member name="P:Cch.Commerster.Core.Security.MembershipProvider.ApplicationName">
            <summary>
            ApplicationName
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.MembershipProvider.EnablePasswordReset">
            <summary>
            EnablePasswordReset
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.MembershipProvider.EnablePasswordRetrieval">
            <summary>
            EnablePasswordRetrieval
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.MembershipProvider.MaxInvalidPasswordAttempts">
            <summary>
            MaxInvalidPasswordAttempts
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.MembershipProvider.MinRequiredNonAlphanumericCharacters">
            <summary>
            MinRequiredNonAlphanumericCharacters
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.MembershipProvider.MinRequiredPasswordLength">
            <summary>
            MinRequiredPasswordLength
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.MembershipProvider.PasswordAttemptWindow">
            <summary>
            PasswordAttemptWindow
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.MembershipProvider.PasswordFormat">
            <summary>
            PasswordFormat
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.MembershipProvider.PasswordStrengthRegularExpression">
            <summary>
            PasswordStrengthRegularExpression
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.MembershipProvider.RequiresQuestionAndAnswer">
            <summary>
            RequiresQuestionAndAnswer
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.MembershipProvider.RequiresUniqueEmail">
            <summary>
            RequiresUniqueEmail
            </summary>
            <remarks>Always true</remarks>
        </member>
        <member name="T:Cch.Commerster.Core.Security.Role">
            <summary>
            Represents Commerster Role (application role)
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Security.Role.applicationId">
            <summary>
            Application Id for this role
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Security.Role.Find(System.Int32)">
            <summary>
            Returns list of Roles associated with the given application
            </summary>
            <param name="appId">The app id.</param>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.Security.Role.SysName">
            <summary>
            Role System Name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.Role.ApplicationId">
            <summary>
            Application Id for this role
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Security.RoleProvider">
            <summary>
            Role Provider Implementation
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Security.RoleProvider.ClearRolesForUserCache(System.String)">
            <summary>
            Removes roles for a user cached by GetRolesForUser
            </summary>
            <param name="username"></param>
        </member>
        <member name="T:Cch.Commerster.Core.Security.UraInfo">
            <summary>
            Represent User/Role/Application information
            </summary>
            <remarks>Possible combination are User, User/Role, User/Application, User/Role/Application</remarks>
        </member>
        <member name="F:Cch.Commerster.Core.Security.UraInfo.userId">
            <summary>
            The user id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Security.UraInfo.roleName">
            <summary>
            The system name of the role
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Security.UraInfo.appSysName">
            <summary>
            The name of the app system name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Security.UraInfo.roleId">
            <summary>
            Role Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Security.UraInfo.appId">
            <summary>
            Application Id
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Security.UraInfo.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cch.Commerster.Core.Security.UraInfo"/> class.
            </summary>
            <param name="userId">The user id.</param>
        </member>
        <member name="M:Cch.Commerster.Core.Security.UraInfo.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cch.Commerster.Core.Security.UraInfo"/> class.
            </summary>
            <param name="userId">The user id.</param>
            <param name="roleName">Name of the role.</param>
            <param name="appSysName">Name of the app sys.</param>
            <remarks>App is aways known if role is specified</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.Security.UraInfo.#ctor(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Cch.Commerster.Core.Security.UraInfo"/> class.
            </summary>
            <param name="userId"></param>
            <param name="roleId"></param>
            <param name="applicationId"></param>
            <remarks>App is aways known if role is specified</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.Security.UraInfo.UserId">
            <summary>
            Returns User Id
            </summary>
            <value>The user id.</value>
        </member>
        <member name="P:Cch.Commerster.Core.Security.UraInfo.RoleName">
            <summary>
            Returns the system name of the role
            </summary>
            <value>The name of the role.</value>
        </member>
        <member name="P:Cch.Commerster.Core.Security.UraInfo.AppSysName">
            <summary>
            Returns the application system name
            </summary>
            <value>The application system name</value>
        </member>
        <member name="P:Cch.Commerster.Core.Security.UraInfo.RoleId">
            <summary>
            Role Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.UraInfo.AppId">
            <summary>
            Application Id
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Security.UserKeyInfoSecure">
            <summary>
            Represent UserKeyInfo with UraInfo
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.UserKeyInfo">
            <summary>
            Represent only key information about the user, such as ID, Name/Email. Usually used for lookups
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserKeyInfo.rownum">
            <summary>
            Row Number
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.UserKeyInfo.System#IComparable{Cch#Commerster#Core#UserCompany#UserKeyInfo}#CompareTo(Cch.Commerster.Core.UserCompany.UserKeyInfo)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.UserKeyInfo.UserId">
            <summary>
            Gets or sets the user id.
            </summary>
            <value>The user id.</value>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.UserKeyInfo.UserName">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.UserKeyInfo.Name">
            <summary>
            Name Info
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.UserKeyInfo.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.UserKeyInfo.OverrideEmail">
            <summary>
            Override Email
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.UserKeyInfo.Preferences">
            <summary>
            Preferences
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.UserKeyInfo.ContactId">
            <summary>
            ContactId
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Security.UserKeyInfoSecure.ura">
            <summary>
            User/Role/Application info
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Security.UserKeyInfoSecure.Ura">
            <summary>
            User/Role/Application info
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Session.SessionCategory">
            <summary>
            Defines whether to access itmes build on Commerster or framework items
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Session.SessionCategory.App">
            <summary>
            Application component.
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Session.SessionCategory.Core">
            <summary>
            Core component.
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Session.SessionManager">
            <summary>
            Wrapper for HttpContext.Current.Session object
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Session.SessionManager.Remove(Cch.Commerster.Core.Session.SessionCategory,System.String)">
            <summary>
            Removes an item from Session
            </summary>
            <param name="category"></param>
            <param name="key"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Session.SessionManager.Clear">
            <summary>
            Clears the current session
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Session.SessionManager.DestroySession">
            <summary>
            Destroys the session.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Session.SessionManager.Items">
            <summary>
            Returns the session items.
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Session.SessionManager.ItemsCollection">
            <summary>
            A collection of the itmes in the session
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.Session.SessionManager.ItemsCollection.Item(Cch.Commerster.Core.Session.SessionCategory,System.String)">
            <summary>
            Sets/gets an item in a session
            </summary>
            <param name="category"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.Smtp.Configuration">
            <summary>
            Smtp related configuration
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Smtp.Configuration.CuCaAddress">
            <summary>
            Customer Care Email Address
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.Smtp.Configuration.ToAddressOverride">
            <summary>
            Contains a list of addresses which overrides "To" address list.
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.Smtp.EmailClient">
            <summary>
            Wrapper for <see cref="T:System.Net.Mail.SmtpClient"/>
            Single entry point for all communication
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.Smtp.EmailClient.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends an e-mail via SmtpClient() with error logging
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Smtp.EmailClient.Send(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Sends an e-mail via SmtpClient() with error logging
            </summary>
            <param name="message"></param>
            <param name="isOverrideBypass"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Smtp.EmailClient.SendMail(System.Net.Mail.MailMessage)">
            <summary>
            Sends an e-mail via SmtpClient() with error logging
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Smtp.EmailClient.SendMail(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Sends an e-mail via SmtpClient() with error logging
            </summary>
            <param name="message"></param>
            <param name="isOverrideBypass"></param>
        </member>
        <member name="M:Cch.Commerster.Core.Smtp.EmailClient.Send(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient,System.Boolean)">
            <summary>
            Sends an e-mail via SmtpClient() with error logging
            </summary>
            <param name="message"></param>
            <param name="client"></param>
            <param name="isOverrideBypass"></param>
            <exception cref="T:Cch.Commerster.Core.SmtpClientException"/>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.CompanySearchFields">
            <summary>
            Defines list of fields support by DAL Search method
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.CompanyName">
            <summary>
            Company Name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.CompanyShortName">
            <summary>
            Company short name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.StateId">
            <summary>
            State ID
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.City">
            <summary>
            City
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.CountryId">
            <summary>
            Country ID
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.Duns">
            <summary>
            Duns number placeholder. WARNING: Not a DUNS in WMGIP
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.VatNumber">
            <summary>
            VAT
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.IsActive">
            <summary>
            Is active company
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.CompanyType">
            <summary>
            Company Type: Buyer/Supplier/Undefined
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.IndustryId">
            <summary>
            Industry ID
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.StateOther">
            <summary>
             StateOther
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.OtherTaxId">
            <summary>
            Any Tax ID issued in different countries to a company
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.Zip">
            <summary>
            ZIP Code (Postal Code)
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.CompanyDescription">
            <summary>
            Sourcing Guide Company Description
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.ProductInformation">
            <summary>
            Sourcing Guide Product Information
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.CompanyId">
            <summary>
            Company Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.Email">
            <summary>
            E-mail
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.CatalogIdent">
            <summary>
            Catalog Ident
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.UserId">
            <summary>
            User Id, only applies when UraInfo is specified
            <remarks>Reserved to the Framework</remarks>
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.RoleId">
            <summary>
            Role Id, only applies when UraInfo is specified
            <remarks>Reserved to the Framework</remarks>
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySearchFields.ApplicationId">
            <summary>
            Application Id, only applies when UraInfo is specified
            <remarks>Reserved to the Framework</remarks>
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.Company">
            <summary>
            Represents a company in the system.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Company.#ctor(System.Nullable{System.Int32})">
            <summary>
            Protected constructor. Only company object can create itself
            </summary>
            <param name="companyId"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Company.#ctor">
            <summary>
            Creates a new Company object
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Company.Create">
            <summary>
            Creates a new Company object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Company.Get(System.Int32)">
            <summary>
            Returns a Company.
            </summary>
            <param name="companyId">The Company to return.</param>
            <returns>Object of type Company.</returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Company.Save">
            <summary>
            Save's Company data
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Company.Search(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},Cch.Commerster.Core.IPaginationControl)">
            <summary>
            Performs search on the company
            </summary>
            <param name="paginationControl"></param>
            <param name="searchColumns">a list of SearchColumnInfo classes. Use CompanySearchFields enum for Column Name Type</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Company.Search(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},Cch.Commerster.Core.IPaginationControl,Cch.Commerster.Core.Security.UraInfo)">
            <summary>
            Performs search on the company
            </summary>
            <param name="paginationControl"></param>
            <param name="searchColumns">a list of SearchColumnInfo classes. Use CompanySearchFields enum for Column Name Type</param>
            <param name="uraInfo"></param>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.IsActive">
            <summary>
            IsActive
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.DisplayParent">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.IsGlobal">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.AccountManagerUserId">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.ParentCompanyId">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.Phone">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.Fax">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.PhysicalDunsNumber">
            <summary>
            Physical Duns Placeholder
            </summary>
            <remarks>The actual transacting Duns Numbers are accessible by methods in Cch.Connectivity</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.IsVisible">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.WebPageUrl">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.CatalogReadyDate">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.CatalogRegistrationDate">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.CxCompanyName">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.IsContentServices">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.IsIntegrationServices">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.IsVirtualCompany">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.VatNumber">
            <summary>
            VAT Identification Number
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.DocStandardId">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.IsOfsSupplier">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.OtherTaxId">
            <summary>
            Any Tax ID issued in different countries to a company
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.CultureInfo">
            <summary>
            Company's Culture Info. Predefined cultures only.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.ValidatedByUserId">
            <summary>
            Last UserId which validated the validity of information
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.CreatedBy">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.ModifiedBy">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Company.Email">
            <summary>
            Company E-mail
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.CompanyType">
            <summary>
            Company Type enums
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanyType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanyType.Buyer">
            <summary>
            Buyer
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanyType.Supplier">
            <summary>
            Supplier
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.CompanySsoType">
            <summary>
            Company Sso Type
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySsoType.Disabled">
            <summary>
            SSO is Disabled, SSO requests should not be allowed 
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySsoType.Enabled">
            <summary>
            SSO is Enabled, but not required
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanySsoType.Forced">
            <summary>
            SSO is required, no regular login should be allowed
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.CompanyRelationType">
            <summary>
            CompanyRelationType enum
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanyRelationType.Omnicontent">
            <summary>
            Omnicontent
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanyRelationType.EasyOrder">
            <summary>
            EasyOrder
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.CompanyRelationType.SSR">
            <summary>
            SSR relations
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.CompanyRelation">
            <summary>
            Represents company relations.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyRelation.GetRelationsOfCompany(System.Int32)">
            <summary>
            Returns the relations of a company.
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyRelation.GetRelationsToCompany(System.Int32)">
            <summary>
            Returns the relations to a company.
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyRelation.GetCompanyRelation(System.Int32,System.Int32)">
            <summary>
            Returns a CompanyRelation for a given supplier/buyer
            </summary>
            <param name="supplierCompanyId"></param>
            <param name="buyerCompanyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyRelation.Create">
            <summary>
            Creates a new Company object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyRelation.Get(System.Int32)">
            <summary>
            Returns a CompanyRelation.
            </summary>
            <param name="companyRelationId">The CompanyRelation id.</param>
            <returns>Object of type CompanyRelation.</returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyRelation.Get(System.Int32,System.Data.IDbTransaction)">
            <summary>
            Gets the specified company relation id.
            </summary>
            <param name="companyRelationId">The company relation id.</param>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyRelation.Exists(System.Int32,System.Int32,System.Int32)">
            <summary>
            Existses the specified relation type.
            </summary>
            <param name="relationType">Type of the relation.</param>
            <param name="companyOfId">The company of id.</param>
            <param name="companyToId">The company to id.</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyRelation.Save">
            <summary>
            Saves CompanyRelation data
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyRelation.Save(System.Data.IDbTransaction)">
            <summary>
            Saves the specified transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyRelation.Delete">
            <summary>
            Delete a relation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.CompanyRelation.Delete(System.Int32)">
            <summary>
            Delete a relation
            </summary>
            <param name="relationId"></param>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyRelation.RelationId">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyRelation.CompanyOfId">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyRelation.CompanyToId">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyRelation.RelationType">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyRelation.IsActive">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyRelation.CreationDate">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyRelation.CreatedByUserId">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyRelation.ModificationDate">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.CompanyRelation.ModifiedByUserId">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.ContactSearchFields">
            <summary>
            Defines list of fields support by DAL Search method
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactSearchFields.Email">
            <summary>
            E-mail address
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactSearchFields.PrimaryCompany">
            <summary>
            Primary Company
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactSearchFields.IsActive">
            <summary>
            Is Active
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactSearchFields.InternalTypeId">
            <summary>
            InternalType Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactSearchFields.ContactTypeId">
            <summary>
            ContactType Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactSearchFields.FirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactSearchFields.LastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactSearchFields.OfficePhone">
            <summary>
            OfficePhone
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactSearchFields.OverrideEmail">
            <summary>
            Override Email
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactSearchFields.ContactId">
            <summary>
            Contact Id
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.InternalType">
            <summary>
            Defines list of internal contact types (GBL_InternalType)
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.InternalType.AccountManager">
            <summary>
            AccountManager
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.InternalType.ProjectManager">
            <summary>
            ProjectManager
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.InternalType.Connectivity">
            <summary>
            Connectivity
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.Contact">
            <summary>
            Provides methods/properties to work with Contact entity in Commerster
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.Contact.rownum">
            <summary>
            Used only by Search methods
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.IsHubwooEmployee">
            <summary>
            Return True if current user's Primary Company is one of the hubwoo companies
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.Contact.userId">
            <summary>
            User Id a Contact may have
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Cch.Commerster.Core.UserCompany.Contact"/> class.
            </summary>
            <param name="contactId">The contact to represent.</param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Cch.Commerster.Core.UserCompany.Contact"/> class.
            </summary>
            <param name="contactId"></param>
            <param name="companyId"></param>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.Contact.contactId">
            <summary>
            Nullable int storing the contacs id.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.ReadSettings(System.Data.IDbTransaction)">
            <summary>
            Reads settings
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.Contact.settings">
            <summary>
            Settings as Property Bag
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.Contact.companyId">
            <summary>
            Protected int.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.Create">
            <summary>
            Creates a new Contact object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.Create(System.Int32)">
            <summary>
            Creates a new Contact object for a given company
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.GetOverrideEmail(System.String)">
            <summary>
            Returns an override email for a given contact's email
            </summary>
            <param name="email"></param>
            <remarks>return null if override email is not set</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.Get(System.Int32)">
            <summary>
            Returns Contact object by a given Id
            </summary>
            <param name="contactId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.Save">
            <summary>
            Saves Contact's object fields only
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.Save(System.Data.IDbTransaction)">
            <summary>
            Save call for internal use. Can be called by other classes in this assembly
            </summary>
            <param name="transaction">Caller set this parameter to make object participating in the same transaction as a caller</param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.Delete">
            <summary>
            Deletes a user from a database
            </summary>
            <remarks>Internal use only as we do not allow to delete users from the database</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Contact.Search(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},Cch.Commerster.Core.IPaginationControl)">
            <summary>
            Performs search on the contact
            </summary>
            <param name="paginationControl"></param>
            <param name="searchColumns">a list of SearchColumnInfo classes. Use CompanySearchFields enum for Column Name Type</param>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.RowNum">
            <summary>
            Used only by Search methods
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.UserId">
            <summary>
            User Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.ContactId">
            <summary>
            Set/Get contactId.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.CurrentPreferences">
            <summary>
            Gets the current preferences.
            </summary>
            <value>The current preferences.</value>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.Settings">
            <summary>
            Settings as Property Bag
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.Name">
            <summary>
            Gets/Sets Name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.Address">
            <summary>
            Gets/Sets Address
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.Fax">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.Title">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.ContactSalutationId">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.CompanyId">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.Email">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.OverrideEmail">
            <summary>
            Override Email
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.MobilePhone">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.OfficePhone">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.OfficePhoneExt">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.HomePhone">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.Pager">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.IsActive">
            <summary>
            Gets/Sets Active flag for Contact and associated User account
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.ValidatedByUserId">
            <summary>
            Last UserId which validated the validity of information
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.CreatedBy">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Contact.ModifiedBy">
            <summary>
            Set/Get
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.ContactType">
            <summary>
            Represents a Contact Type collection available in the system
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.ContactSalutation">
            <summary>
            Represents a Contact Salutation(Mr., Mrs., Ms.) collection available in the system
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.ContactTypeInfo">
            <summary>
            Represent User/ContactType/Company relationship
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.Create">
            <summary>
            Creates new ContactType Instance
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactTypeInfo.id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactTypeInfo.rownum">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactTypeInfo.contactId">
            <summary>
            Contact Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactTypeInfo.contactTypeId">
            <summary>
            Contact Type Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.ContactTypeInfo.companyId">
            <summary>
            Company Id
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.Get(System.Int32)">
            <summary>
            Returns ContactTypes which given contact has
            </summary>
            <param name="contactId">The contact id.</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.GetByCompany(System.Int32)">
            <summary>
            Returns ContactTypes for a given company
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.Get(System.Int32,System.Int32)">
            <summary>
            Returns ContactTypes which given contact has for a given company
            </summary>
            <param name="contactId">The contact id.</param>
            <param name="companyId">The company id.</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.InsertLink(System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Estblishes a link between a contact, company and contact type
            </summary>
            <param name="contactId">The contact id.</param>
            <param name="companyIds">The company ids.</param>
            <param name="contactTypeIds">The contact type ids.</param>
            <remarks>An exception is thrown if link already exists</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.InsertLink(System.Int32,System.Int32[],System.Int32[],System.Data.IDbTransaction)">
            <summary>
            Estblishes a link between a contact, company and contact type
            </summary>
            <param name="contactId">The contact id.</param>
            <param name="companyIds">The company ids.</param>
            <param name="contactTypeIds">The contact type ids.</param>
            <param name="transaction">The transaction.</param>
            <remarks>An exception is thrown if link already exists</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.InsertLink(System.Int32,System.Int32[],System.Int32[],System.Int32[]@,System.Data.IDbTransaction)">
            <summary>
            Estblishes a link between a contact, company and contact type. Returns a list of generated unique Ids
            </summary>
            <param name="contactId">The contact id.</param>
            <param name="companyIds">The company ids.</param>
            <param name="contactTypeIds">The contact type ids.</param>
            <param name="pkValues">List of generated Ids</param>
            <param name="transaction">The transaction.</param>
            <remarks>An exception is thrown if link already exists</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.InsertLink(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Estblishes a link between a contact, company and contact type
            </summary>
            <param name="contactId">The contact id.</param>
            <param name="companyId">The company id.</param>
            <param name="contactTypeIds">The contact type ids.</param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.InsertLink(System.Int32,System.Int32[],System.Int32)">
            <summary>
            Estblishes a link between a contact, company and contact type
            </summary>
            <param name="contactId">The contact id.</param>
            <param name="companyIds">The company ids.</param>
            <param name="contactTypeId">The contact type id.</param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.InsertLink(System.Int32,System.Int32,System.Int32)">
            <summary>
            Estblishes a link between a contact, company and contact type
            </summary>
            <param name="contactId">The contact id.</param>
            <param name="companyId">The company id.</param>
            <param name="contactTypeId">The contact type id.</param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.RemoveLink(System.Int32)">
            <summary>
            Removes records for a given Contact/Company/ContactType value
            </summary>
            <param name="contactTypeInfoId"></param>
            <remarks>Note: Default Contact Type will not be removed</remarks>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.RemoveLink(System.Int32[])">
            <summary>
            Removes records for a given Contact/Company/ContactType array of values
            </summary>
            <param name="contactTypeInfoIds"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.ContactTypeInfo.RemoveLink(System.Int32[],System.Data.IDbTransaction)">
            <summary>
            Removes records for a given Contact/Company/ContactType array of values
            </summary>
            <param name="contactTypeInfoIds"></param>
            <param name="transaction"></param>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.ContactTypeInfo.Id">
            <summary>
            Unique Id identifying Contact/Company/ContactType relation
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.ContactTypeInfo.RowNum">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.ContactTypeInfo.ContactId">
            <summary>
            Contact Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.ContactTypeInfo.ContactTypeId">
            <summary>
            Contact Type Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.ContactTypeInfo.CompanyId">
            <summary>
            Company Id
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.ICompanyDal">
            <summary>
            Defines methods to access data store
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.ICompanyRelationDal">
            <summary>
            Defines methods to access data store
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.IContactDal">
            <summary>
            Defines methods to access data store
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.IIndustryDal">
            <summary>
            Dal interface for Industry
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.IIndustryDal.GetByCompanyId(System.Int32)">
            <summary>
            Returns a list of Industry Ids
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.Industry">
            <summary>
            Defines Company Industry
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Industry.GetByCompanyId(System.Int32)">
            <summary>
            Returns list of industries for a given company id
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Industry.GetIndustryNames(System.Collections.Generic.IList{Cch.Commerster.Core.UserCompany.Industry})">
            <summary>
            Returns translated industry names concatenated with comma
            </summary>
            <param name="industries"></param>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.IndustryCollection">
            <summary>
            Industry collection for the Company class
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.IndustryCollection.ClearItems">
            <summary>
            Sets isModified and calls base method
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.IndustryCollection.InsertItem(System.Int32,Cch.Commerster.Core.UserCompany.Industry)">
            <summary>
            Sets isModified and calls base method
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.IndustryCollection.RemoveItem(System.Int32)">
            <summary>
            Sets isModified and calls base method
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.IndustryCollection.SetItem(System.Int32,Cch.Commerster.Core.UserCompany.Industry)">
            <summary>
            Sets isModified and calls base method
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.IndustryCollection.GetIds">
            <summary>
            Returns an array of Industry Ids for the current collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.IndustryCollection.IsModified">
            <summary>
            Returns True if collection was modified since last read
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.IPreferencesDal">
            <summary>
            Defines methods to access data store
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.IUserDal">
            <summary>
            Defines methods to access data store
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.IUserDal.Insert(Cch.Commerster.Core.UserCompany.User,System.Data.IDbTransaction)">
            <summary>
            Inserts new user record in the database along with its contact info and preferences
            </summary>
            <param name="user"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Cch.Commerster.Core.IUserDal.Update(Cch.Commerster.Core.UserCompany.User,System.Data.IDbTransaction)">
            <summary>
            Updates a user record in the database along with its contact info and preferences
            </summary>
            <param name="user"></param>
            <param name="transaction"></param>
        </member>
        <member name="T:Cch.Commerster.Core.IViewDal">
            <summary>
            Defines methods to access data store
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.IViewDal.GetByCompanyID(System.Collections.Generic.List{Cch.Commerster.Core.UserCompany.View},System.Int32,System.Data.IDbTransaction)">
            <summary>
            Gets the by company ID.
            </summary>
            <param name="viewsList">The views list.</param>
            <param name="companyId">The company id.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Cch.Commerster.Core.IViewDal.Get(Cch.Commerster.Core.UserCompany.View,System.Data.IDbTransaction)">
            <summary>
            Gets the specified view.
            </summary>
            <param name="view">The view.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Cch.Commerster.Core.IViewDal.Insert(Cch.Commerster.Core.UserCompany.View,System.Data.IDbTransaction)">
            <summary>
            Inserts the specified view.
            </summary>
            <param name="view">The view.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Cch.Commerster.Core.IViewDal.Update(Cch.Commerster.Core.UserCompany.View,System.Data.IDbTransaction)">
            <summary>
            Updates the specified view.
            </summary>
            <param name="view">The view.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Cch.Commerster.Core.IViewDal.Delete(Cch.Commerster.Core.UserCompany.View,System.Data.IDbTransaction)">
            <summary>
            Deletes the specified view.
            </summary>
            <param name="view">The view.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Cch.Commerster.Core.IViewDal.Exists(System.String,System.Data.IDbTransaction)">
            <summary>
            Existses the specified view name.
            </summary>
            <param name="viewName">Name of the view.</param>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.IViewDal.AddRelation(System.Int32,System.Int32,System.Data.IDbTransaction)">
            <summary>
            Adds the relation.
            </summary>
            <param name="viewId">The view id.</param>
            <param name="relationId">The relation id.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Cch.Commerster.Core.IViewDal.RemoveRelation(System.Int32,System.Int32,System.Data.IDbTransaction)">
            <summary>
            Removes the relation.
            </summary>
            <param name="viewId">The view id.</param>
            <param name="relationId">The relation id.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Cch.Commerster.Core.IViewDal.RelationExistsInView(System.Int32,System.Int32,System.Data.IDbTransaction)">
            <summary>
            Relations the exists in view.
            </summary>
            <param name="viewId">The view id.</param>
            <param name="relationId">The relation id.</param>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.Preferences">
            <summary>
            Represents the preferences of a user.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Preferences.Set(System.Globalization.CultureInfo,Cch.Commerster.Core.Localization.TimeZoneIdentifier)">
            <summary>
            Set preferences of a user.
            </summary>
            <param name="cultureInfo">The culture to use.</param>
            <param name="timeZoneIdentifier">The timezone.</param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Preferences.Save">
            <summary>
            Saves current preferences into a database
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Preferences.Save(System.Data.IDbTransaction)">
            <summary>
            Save call for internal use. Can be called by other classes in this assembly
            </summary>
            <param name="transaction">Caller set this parameter to make object participating in the same transaction as a caller</param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.Preferences.SaveTzOffset(System.TimeSpan)">
            <summary>
            Saves browser's time zone offset 
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Preferences.RecordsPerPage">
            <summary>
            Records Per Page to show in the applications (global value)
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Preferences.RecordsPerPageInternal">
            <summary>
            Records Per Page to show in the applications (global value)
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Preferences.TimeZoneId">
            <summary>
            Set/get TimeZone.
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Preferences.CultureInfo">
            <summary>
            Returns CultureInfo for the current user
            </summary>
            <remarks>Returns read-only CultureInfo for the current user</remarks>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.Preferences.BrowserTzOffest">
            <summary>
            Returns Timezone Offset taken from the browser's JScript Date.getTimezoneOffset() call
            <remarks>Timezone Offset taken from JScript Date.getTimezoneOffset() call in minutes. Negative if timezone offset is behind UTC (i.e. GMT-n). Throws <see cref="T:Cch.Commerster.Core.TzOffsetException"/> exception if offset is not available</remarks>
            </summary> 
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.SettingsCollection">
            <summary>
            Represents settings for an application
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.Remove(System.String,System.String)">
            <summary>
            Removes a key
            </summary>
            <param name="appSysName"></param>
            <param name="key"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.Remove(System.Int32,System.String)">
            <summary>
            Removes a key
            </summary>
            <param name="appId"></param>
            <param name="key"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.Remove(System.String)">
            <summary>
            Removes all keys for an application
            </summary>
            <param name="appSysName"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.Remove(System.Int32)">
            <summary>
            Removes all keys for an application
            </summary>
            <param name="appId"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.GetValue``1(System.Int32,System.String)">
            <summary>
            Returns a value with specified key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.ContainsKey(System.String,System.String)">
            <summary>
            Determines whether the specified app sys name has value.
            </summary>
            <param name="appSysName">Name of the app sys.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified app sys name has value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.ContainsKey(System.Int32,System.String)">
            <summary>
            Determines whether the specified app id has value.
            </summary>
            <param name="appId">The app id.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified app id has value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.SetValue``1(System.Int32,System.String,``0)">
            <summary>
            Set a specified key with a given value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appId"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.GetValue``1(System.String,System.String)">
            <summary>
            Returns a value with specified key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSysName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.SetValue``1(System.String,System.String,``0)">
            <summary>
            Set a specified key with a given value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSysName"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.Save">
            <summary>
            Persists current settings
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.SettingsCollection.ContactId">
            <summary>
            Contact Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.SettingsCollection.Item(System.Int32,System.String)">
            <summary>
            Indexer
            </summary>
            <param name="appId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.SettingsCollection.Item(System.String,System.String)">
            <summary>
            Indexer
            </summary>
            <param name="appSysName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.SettingsCollection.PropertyBag">
            <summary>
            Property Bag class
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SettingsCollection.PropertyBag.ToPrimitiveArray">
            <summary>
            Converts a collection into an array of KeyValuePair&lt;string, string&gt;
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.SettingsCollection.PropertyBag.Id">
            <summary>
            PK Value
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.SettingsCollection.PropertyBag.AppId">
            <summary>
            App Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.SettingsCollection.PropertyBag.IsDirty">
            <summary>
            Is Dirty flag
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.SgCompany">
            <summary>
            Sourcing Guide Company
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SgCompany.#ctor(System.Nullable{System.Int32})">
            <summary>
            Protected constructor. Only company object can create itself
            </summary>
            <param name="companyId"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SgCompany.#ctor">
            <summary>
            Creates a new SgCompany object
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SgCompany.Create">
            <summary>
            Creates a new SgCompany object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SgCompany.Get(System.Int32)">
            <summary>
            Returns a Sourcing Guide Company.
            </summary>
            <param name="companyId">company Id</param>
            <returns>Object of type Company.</returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SgCompany.Search(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},Cch.Commerster.Core.IPaginationControl)">
            <summary>
            Performs search on the sourcing guide company
            </summary>
            <param name="paginationControl"></param>
            <param name="searchColumns">a list of SearchColumnInfo classes. Use CompanySearchFields enum for Column Name Type</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.SgCompany.Search(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},Cch.Commerster.Core.IPaginationControl,Cch.Commerster.Core.Security.UraInfo)">
            <summary>
            Performs search on the sourcing guide company
            </summary>
            <param name="paginationControl"></param>
            <param name="searchColumns">a list of SearchColumnInfo classes. Use CompanySearchFields enum for Column Name Type</param>
            <param name="uraInfo"></param>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.SgCompany.CompanyDescription">
            <summary>
            Company Description
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.SgCompany.ProductInformation">
            <summary>
            Product Information
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.UserSearchFields">
            <summary>
            Defines list of fields support by DAL Search method
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.UserName">
            <summary>
            Company Name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.CompanyShortName">
            <summary>
            Company short name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.City">
            <summary>
            City
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.CountryId">
            <summary>
            Country ID
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.IsActive">
            <summary>
            Is active company
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.CompanyType">
            <summary>
            Company Type: Buyer/Supplier/Undefined
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.Email">
            <summary>
            E-mail address
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.CompanyId">
            <summary>
            Company id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.LastName">
            <summary>
            Last name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.FirstName">
            <summary>
            Last name
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.ContactTypeId">
            <summary>
            ContactType Id
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.OfficePhone">
            <summary>
            OfficePhone: OfficePhone
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.UserSearchFields.OverrideEmail">
            <summary>
            Override Email
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.User">
            <summary>
            Provides methods/properties to work with User entity in Commerster
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.#ctor(System.Nullable{System.Int32})">
            <summary>
            Constructor.
            </summary>
            <param name="userId">The user ID of the user.</param>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.User.nonSessionCurrentUser">
            <summary>
            hold a reference to Current User outside of Web Application
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.GetCurrent">
            <summary>
            This method allows a caller to get the current active user
            </summary>
            <returns>User instance or null</returns>
            <remarks>Call this method to get current active web user</remarks>
            <exception cref="T:Cch.Commerster.Core.NoActiveUserException">Thrown if there was an error on getting a user info from the session</exception>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.Create">
            <summary>
            Creates a new User object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.Create(System.String,System.Int32)">
            <summary>
            Creates a user with empty password with existing Contact
            </summary>
            <param name="userName">New user name</param>
            <param name="contactId">Contact ID of the existing Contact</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.Create(System.String,System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Creates a user with empty password with existing Contact
            </summary>
            <param name="userName">New user name</param>
            <param name="contactId">Contact ID of the existing Contact</param>
            <param name="transaction">Transaction</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.GeneratePassword">
            <summary>
            Returns a new password with the current required minimum length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.Get(System.Int32)">
            <summary>
            Returns a user object based on given Id
            </summary>
            <param name="userId">User Id in the database</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.Get(System.String)">
            <summary>
            Returns a user object based on a given username
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.Save">
            <summary>
            Saves User's object fields only
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.Save(System.Data.IDbTransaction)">
            <summary>
            Save call for internal use. Can be called by other classes in this assembly
            </summary>
            <param name="transaction">Caller set this parameter to make object participating in the same transaction as a caller</param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.Delete">
            <summary>
            Deletes a user from a database
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.User.Search(System.Collections.Generic.IList{Cch.Commerster.Core.ISearchColumn},Cch.Commerster.Core.IPaginationControl)">
            <summary>
            Performs search on the user
            </summary>
            <param name="paginationControl"></param>
            <param name="searchColumns">a list of SearchColumnInfo classes. Use UserSearchFields enum for Column Name Type</param>
            <returns></returns>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.User.UserId">
            <summary>
            User Id
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.User.UserName">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.User.PasswordHash">
            <summary>
            Password Hash
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.User.Password">
            <summary>
            Makes an MD5 hash of the value and assigns it to PasswordHash
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.User.IsSsoOnly">
            <summary>
            Is SSO Only
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.User.CreatedBy">
            <summary>
            Created By
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.User.ModifiedBy">
            <summary>
            Modified By
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.User.IsAuthenticated">
            <summary>
            IsAuthenticated
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.UserCompany.View">
            <summary>
            Represents views.
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.UserCompany.View.viewId">
            <summary>
            View Id
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cch.Commerster.Core.UserCompany.View"/> class.
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.GetByCompanyID(System.Int32)">
            <summary>
            Returns all views available for a given company.
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.Create">
            <summary>
            Creates a new View object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.Get(System.Int32)">
            <summary>
            Returns a view.
            </summary>
            <param name="viewId">The view id.</param>
            <returns>Object of type View.</returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.Get(System.String)">
            <summary>
            Returns a view.
            </summary>
            <param name="viewName">The view name.</param>
            <returns>Object of type View.</returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.Exists(System.String)">
            <summary>
            Checks if a view exists
            </summary>
            <param name="name">The name.of view</param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.Save">
            <summary>
            Saves view data
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.Save(System.Data.IDbTransaction)">
            <summary>
            Saves view data
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.Delete">
            <summary>
            Deletes a view
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.Delete(System.Int32)">
            <summary>
            Deletes a view
            </summary>
            <param name="viewId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.RelationExistsInView(System.Int32,System.Int32)">
            <summary>
            Checks if a relation exists for a given view
            </summary>
            <param name="viewId"></param>
            <param name="relationId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.RelationExistsInView(System.Int32)">
            <summary>
            Checks if a relation exists for a given view
            </summary>
            <param name="relationId"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.AddRelation(System.Int32,System.Int32)">
            <summary>
            Adds a relation to view.
            CAUTION! There is no check for existence of such a mapping in the db. Therfore 
            RelationExistsInView() should be always called before processing this method!
            </summary>
            <param name="viewId"></param>
            <param name="relationId"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.AddRelation(System.Int32)">
            <summary>
            Adds a relation to view.
            CAUTION! There is no check for existence of such a mapping in the db. Therfore 
            RelationExistsInView() should be always called before processing this method!
            </summary>
            <param name="relationId"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.RemoveRelation(System.Int32,System.Int32)">
            <summary>
            Removes a relation from view.
            </summary>
            <param name="viewId"></param>
            <param name="relationId"></param>
        </member>
        <member name="M:Cch.Commerster.Core.UserCompany.View.RemoveRelation(System.Int32)">
            <summary>
            Removes a relation from view.
            </summary>
            <param name="relationId"></param>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.View.ViewId">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.View.Name">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.View.Comment">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.View.CompanyId">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.View.IsActive">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.View.CreationDate">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.View.CreatedByUserId">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.View.ModificationDate">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.UserCompany.View.ModifiedByUserId">
            <summary>
            Get/Set
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.SubType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.SubType.Portal">
            <summary>
            Supplier Portal
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.SubType.eBuy">
            <summary>
            eBuy 4
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.SubType.eAnalyze">
            <summary>
            eAnalyze
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.SubType.eSource">
            <summary>
            eSource
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.SubType.BW">
            <summary>
            BW 3.5
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.SubType.NW">
            <summary>
            NetWeaver Portal
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.ApplicationType.SapSrm">
            <summary>
            Sap SRM - it's own version of MYSAPSSO2 cookie is set by this application
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.ApplicationType.SapGeneric">
            <summary>
            SAP Generic - MYSAPSSO2 cookie is not set
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.ApplicationType.Portal">
            <summary>
            ePortal
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.WebServices.Sso.Application">
            <summary>
            SSO Application
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.ErrorUrlKey">
            <summary>
            Error Url key in the HttpContext
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.SetContextErrorUrl">
            <summary>
            Sets Error Url in the HttpContext to be processed on error in global.asax
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.GetSpSsoRedirectUrl(System.String)">
            <summary>
            Returns a SSO Redirect URL which starts SP-initiated mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.GetSpSsoRedirectUrl">
            <summary>
            Returns a SSO Redirect URL which starts SP-initiated mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.Save">
            <summary>
            Save
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.SsoRedirectUrl">
            <summary>
            The "prefix" SSO URL for the customer
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.IdpServiceUrl">
            <summary>
            IDP Url to send SAML Request to
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.LoginUrl">
            <summary>
            The URL to be taken to if Login fails or session times out
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.LogoutUrl">
            <summary>
            Logout URL to be used when Logout button is clicked
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.ErrorUrl">
            <summary>
            Error URL to be used when SSO request fails in the SAML Processor
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.CompanyIds">
            <summary>
            List of Company Ids realated to the SSO profile
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.CustomerProfile.IpAddressList">
            <summary>
            List of IP addresses for which custom Login URL will be used
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.ProfileApplication.SapClientKey">
            <summary>
            SapClient key name in CustomData
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.ProfileApplication.SsoClientKey">
            <summary>
            SsoClient key name in CustomData
            </summary>
        </member>
        <member name="F:Cch.Commerster.Core.WebServices.Sso.ProfileApplication.SourceSystemId">
            <summary>
            Two character Source System ID
            </summary>
        </member>
        <member name="M:Cch.Commerster.WebServices.Sso.Sso.CookiesToByteArray(System.Web.HttpCookieCollection)">
            <summary>
            Returns a HttpCookieCollection in a binary form
            </summary>
            <param name="cookieCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.WebServices.Sso.Sso.CookiesFromByteArray(System.Byte[])">
            <summary>
            Returns a HttpCookieCollection from binary form
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.WebServices.Sso.Token.#ctor(System.DateTime)">
            <summary>
            Creates a new token
            </summary>
            <param name="expireOn"></param>
        </member>
        <member name="M:Cch.Commerster.Core.WebServices.Sso.Token.#ctor(System.TimeSpan)">
            <summary>
            Creates a new token
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.Token.Guid">
            <summary>
            Unique identifier
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.Token.Payload">
            <summary>
            Application specific payload
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.Token.ExpireOn">
            <summary>
            Expiration date time
            </summary>
        </member>
        <member name="T:Cch.Commerster.Core.WebServices.Sso.TrustedSubject">
            <summary>
            Trusted Subject
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.WebServices.Sso.TrustedSubject.Get(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Returns matching certificate from the database by Requestor Certificate
            </summary>
            <param name="requestorCertificate"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.Core.WebServices.Sso.TrustedSubject.Save">
            <summary>
            Save
            </summary>
        </member>
        <member name="M:Cch.Commerster.Core.WebServices.Sso.TrustedSubject.Save(System.Data.IDbTransaction)">
            <summary>
            Save
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.TrustedSubject.X500Name">
            <summary>
            X500 Name
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.TrustedSubject.CustomerProfileId">
            <summary>
            Customer Profile ID
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.TrustedSubject.Certificate">
            <summary>
            Certificate attached to this profile
            </summary>
        </member>
        <member name="P:Cch.Commerster.Core.WebServices.Sso.TrustedSubject.IsFullCertificateCheck">
            <summary>
            True if entire certificate should be compared during SSO, false for just Subject's Distinguished Name
            </summary>
        </member>
        <member name="T:Cch.Commerster.WebServices.Fault">
            <summary>
            Enum for Client or Server Fault
            </summary>
        </member>
        <member name="F:Cch.Commerster.WebServices.Fault.Client">
            <summary>
            Client Fault
            </summary>
        </member>
        <member name="F:Cch.Commerster.WebServices.Fault.Server">
            <summary>
            Server Fault
            </summary>
        </member>
        <member name="T:Cch.Commerster.WebServices.WsHelper">
            <summary>
            WebServices Helper class
            </summary>
        </member>
        <member name="M:Cch.Commerster.WebServices.WsHelper.CreateSoapException(System.Exception)">
            <summary>
            Create SoapException based on generic .NET exception
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Cch.Commerster.WebServices.WsHelper.CreateSoapException(System.Exception,Cch.Commerster.WebServices.Fault)">
            <summary>
            Create SoapException based on generic .NET exception
            </summary>
            <param name="ex"></param>
            <param name="fault"></param>
            <returns></returns>
        </member>
    </members>
</doc>
